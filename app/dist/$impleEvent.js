!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);let i={$useArrow:!0,$event:"event",$eventOnce:"event-once",$useVar:!0,$seperatorArrow:/([a-z]+)[\s]*[=][>][\s]*([\w-\.]+)([(][^)]*[)])?/,$seperatorArrowGlobal:new RegExp(/([a-z]+)[\s]*[=][>][\s]*([\w-\.]+)([(][^)]*[)])?/,"g"),$reserveEventArgument:!0,$seperator:/[:]/g,$className:".return",$dataFeed:"data-feed",$dataGet:"data-get",$dataTemplate:"data-template",$dataComponent:"data-component",$dataFilter:"data-filter",$dataValidate:"data-validate",$dataSet:"data-set",$dataStore:"data-store",$dataAppend:"data-append",$dataForEach:"data-for-each",$returnTo:"el",$root:document,$global:document,$defaultTemplate:'<li class="return-list-item"></li>'};var r={id:0,list:{},cloneElement:function(e){return this.obj2Html(this.html2Obj(e,{},1))},html2Obj:function(e,t,n){if(t[n]={},3==e.nodeType)e.nodeValue.trim()&&(t[n].isText=!0,t[n].text=e.nodeValue);else if(8==e.nodeType);else{t[n].tagName=e.nodeName.toLowerCase(),t[n].attributes={};for(var i=0;i<e.attributes.length;i++)e.attributes.length,t[n].attributes[e.attributes[i].name]=e.attributes[i].value;if(e.hasChildNodes){t[n].hasChild=!0,t[n].childCount=e.childNodes.length;for(var r=0;r<t[n].childCount;r++)e.childNodes[r]&&this.html2Obj(e.childNodes[r],t[n],r+1)}}return t},obj2Html:function(e,t){if(t){for(var n=1;n<=e.childCount;n++)if(e[n].isText){var i=document.createTextNode(e[n].text);t.appendChild(i)}else if(e[n].tagName){(i=$impleEvent.createElement(e[n].tagName,e[n].attributes)).id&&(i.id=i.id+n),t.appendChild(i),this.obj2Html(e[n],i)}}else t=$impleEvent.createElement(e[1].tagName,e[1].attributes),this.obj2Html(e[1],t);return t},to:function(e,t,n){e.hasAttribute("render-id")||(this.id=this.id+1,e.setAttribute("render-id",this.id),this.list[this.id]={obj:this.html2Obj(t,{},1)});var i=e.getAttribute("render-id"),r=this.list[i].obj;this.obj2Html(r,!1);Array.prototype.forEach.call(n,(function(t){var n=$impleEvent.render.obj2Html(r,!1);e.appendChild(n),$impleEvent.manageReturns(n,t),$impleEvent.update(n)}))}};function l(e,t){if(e.hasAttribute(t.split(".")[0].replace(/([a-z])([A-Z])/g,(e,t,n)=>t+"-"+n.toLowerCase())))return function(e,t,n){return"value"===n?$impleEvent.parseJSON(e.getAttribute(t)):{element:e,attribute:t,value:$impleEvent.parseJSON(e.getAttribute(t)),get(){return this.value},set(e){this.element.setAttribute(this.attribute,JSON.stringify(e))},save(){this.set(this.value)}}}(e,t.split(".")[0].replace(/([a-z])([A-Z])/g,(e,t,n)=>t+"-"+n.toLowerCase()),t.split(".")[1]);if(e.getAttribute($impleEvent.init.$dataGet)===t){let t=e.value?e.value:e.getAttribute("value");return $impleEvent.parseJSON(t)}if(e.getAttribute("name")===t){let t=e.value?e.value:e.getAttribute("value");return $impleEvent.parseJSON(t)}return"value"===t?$impleEvent.parseJSON(e.value):(console.log("unable to find attribute:"+t+" in "),console.log(e),null)}function o(e,t){if(e.hasAttribute($impleEvent.init.$dataAppend)||(e.innerHTML=""),"string"==typeof t||"number"==typeof t)e.appendChild(document.createTextNode(t));else{if(!t.nodeName)return!1;{let n=$impleEvent.render.cloneElement(t);e.appendChild(n),$impleEvent.update(n)}}}function s(e,t,n){for(var i=0;i<t.length;i++){let r=$impleEvent.render.cloneElement(n);if(r.id&&(r.id=r.id+"_"+i),r.setAttribute("index",i),e.appendChild(r),r.childElementCount)$impleEvent.manageReturns(r,t[i]);else if("string"==typeof t[i]||"number"==typeof t[i]||t[i].nodeName){if(r.hasAttribute($impleEvent.init.$dataFeed))return!1;o(r,t[i])}$impleEvent.update(r)}}let u={log:function(e){console.log(e)},logEvent:function(e){console.log(e.type,"\n",e)},logFunc:function(e,t,n,i,r,a){e=e.trim(),$impleEvent.callbacks.hasOwnProperty(e)?console.log($impleEvent.callbacks[e](event,t,n,i,r,a)):u.hasOwnProperty(e)&&console.log(u[e](event,t,n,i,r,a))},return:function(e,t,n){return isFinite(n)&&(e=t,n={type:"interval/timeout"}),e||(console.warn("Returning empty string  on "+n.type)," ")},returnTo:function(e,t,n,i){return isFinite(i)&&(e=t,t=n,i={type:"interval/timeout"}),t&&document.getElementById(e)?(t=t.replace(/\/s/g," ").trim(),{returnTo:{el:document.getElementById(e),data:t}}):(console.warn("Returning empty string  on "+i.type)," ")},timeout:function(e,t,n){if(!isFinite(t))return console.log("please Provide Time in ms; for timeout function"),!1;if($impleEvent.core.hasOwnProperty(e)){setTimeout($impleEvent.core[e].bind(this),t)}else{if(!$impleEvent.callbacks.hasOwnProperty(e))return console.error("Can't Found Method:"+e+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;{let i=setTimeout($impleEvent.callbacks[e].bind(this,[i,t]),n)}}},interval:function(e,t,n){if(!isFinite(t))return console.log("please Provide Time in ms; for interval function"),!1;if($impleEvent.core.hasOwnProperty(e)){console.log("wow");let i=setInterval($impleEvent.core[e].bind(this,[i,t]),n)}else{if(!$impleEvent.callbacks.hasOwnProperty(e))return console.error("Can't Found Method:"+e+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;{let i=setInterval($impleEvent.callbacks[e].bind(this,[i,t]),n)}}},close:function(e,t){let n=id.nodeType?id:"parent"==id?this.parentNode:document.getElementById(id);if(n){if("none"==n.style.display)return!1;if(!0===t){return!!confirm("Are you sure want to close?")&&(n.style.display="none")}n.style.display="none"}else console.warn("close error:-Cannot Find Element with id:"+id)},openClose:function(e,t){let n=e.nodeType?e:"parent"==e?this.parentNode:document.getElementById(e);if(n){if("none"==n.style.display)return n.style.display="initial",!1;if(!0===t){return!!confirm("Are you sure want to close?")&&(n.style.display="none")}n.style.display="none"}else console.warn("openClose error:-Cannot Find Element to close:"+e)},typewriter:function(e,t){let n=$impleEvent.createElement("input",{style:"outline:none; border:none;font-style:italic;padding:0px;margin:0px;width:1rem;font:inherit;",placeholder:"TypeWriter"}),i=this;n.onclick=function(e){e.stopPropagation()},this.style.position="relative",n.value=this.value?this.value:this.getAttribute("value"),this.appendChild(n),n.onkeyup=function(e){8!=e.which?(i.setAttribute("value",""),$impleEvent.manageReturns(i,this.value,!0),n.value=""):console.log(this.previousSibling)},n.onchange=function(){n.parentNode.removeChild(n)},n.onblur=function(){n.parentNode.removeChild(n)},n.focus()},dataChanger:function(e,t){if(this.hasAttribute($impleEvent.init.$dataGet)){let t=$impleEvent.createElement("div",{style:"padding:5px;border:1px solid #ccc;background:#ccc;border-radius:5px;postion:absolute;z-index:12345678998654;"}),n=$impleEvent.createElement("label",{style:"font-weight:bold;margin:0px 5px;background:#ccc"}),i=$impleEvent.createElement("input",{style:"outline:none; border:none;border-bottom:1px solid #eee;"});n.innerText=this.getAttribute($impleEvent.init.$dataGet),i.value=this.getAttribute("value"),t.appendChild(n),t.appendChild(i),t.style.position="absolute",t.style.zIndex=0x7048861b0fa4,t.style.top="100%",t.style.opacity="0.9";let r=this;t.onclick=function(e){e.stopPropagation()},this.style.position="relative",n.innerText=this.getAttribute($impleEvent.init.$dataGet),i.value=this.value?this.value:this.getAttribute("value"),this.appendChild(t),!0===e?i.onkeyup=function(){r.setAttribute("value",this.value),$impleEvent.manageReturns(r,this.value),i.onchange=function(){t.parentNode.removeChild(t)}}:i.onchange=function(){r.setAttribute("value",this.value),$impleEvent.manageReturns(r,this.value),t.parentNode.removeChild(t)}}},carousel:function(e,t){let n=this.getElementsByTagName("img");this.hasAttribute("index")||this.setAttribute("index",0);let i=parseInt(this.getAttribute("index"));for(let e=0;e<n.length;e++)n[e].style.display="none";i++,i>n.length&&(i=1),n[i-1].style.display="block",this.setAttribute("index",i)},addClassName:function(e,t){t.nodeType||("parent"==t?this.parentNode:document.getElementById(t));let n=this;t&&document.getElementById(t)&&(n=document.getElementById(t)),n.classList.add(e)},removeClassName:function(e,t){let n=this;t&&document.getElementById(t)&&(n=document.getElementById(t)),n.classList.remove(e)},toggleClassName:function(e,t){let n=this;t&&document.getElementById(t)&&(n=document.getElementById(t)),n.classList.toggle(e)},css:function(e,t,n,i){this.style.transition="all 0.35s",3==arguments.length?this.style[e]=t:(arguments.length=document.getElementById(n))?(document.getElementById(n).style.transition="all 0.35s",document.getElementById(n).style[e]=t):console.warn("Something Wrong with arguments you provided, unable to appy style/css on "+i.type)},validate:{email:{test:/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/,success:"You have provided Valid email Id",fail:"Please provide Valid Email address"},number:{test:/^\d+$/,success:"",fail:"Please provide number only"},required:{test:/\S+/,success:"",fail:"This field cant be empty"}}};const c={eventManager:function(e,t,n){for(let i=0;i<t.length;i++){if(!t[i].trim())return!1;!function(){let[r,a,l]=[null,[],null];if(!0===$impleEvent.init.$useArrow){if(!$impleEvent.init.$seperatorArrow.test(t[i]))return console.warn("Insufficient Agruments:'NaN"+$impleEvent.init.$seperatorArrow),!1;if([,r,l,a]=$impleEvent.init.$seperatorArrow.exec(t[i]),a=a&&a.replace(/^[(]|[)]$/g,"").trim()?a.replace(/^[(]|[)]$/g,"").trim().split(/[,]/):[],!r||!l)return console.warn("Insufficient Agruments:'NaN"+$impleEvent.init.$seperatorArrow),!1}else{if(data=t[i].split($impleEvent.init.$seperator),data.length<2)return console.warn("Insufficient Agruments: Must provided atleast eventname and callback  or event attribute format is not understood:used seperator is "+$impleEvent.init.$seperator),!1;r=data[0],l=data[1],a=data.slice(2)}if(n)r===n&&$impleEvent.callbackHandler(e,l,a,n);else if("invoke"!==r)if("call"!=r)if(r.match(/timeout|interval/)){if(!isFinite(a[0]))return console.error("please Provide Time in ms; for interval/timeout event"),!1;{let t=a[0];if(console.log(a.shift()),"interval"==r)var o=setInterval((function(){$impleEvent.callbackHandler(e,l,a,o)}),t);else var s=setTimeout((function(){$impleEvent.callbackHandler(e,l,a,s)}),t)}}else e.addEventListener(r,(function t(n){n.removeEventListener=function(){e.removeEventListener(this.type,t)},$impleEvent.callbackHandler(e,l,a,n)}),!1);else window.addEventListener("load",(function(t){$impleEvent.callbackHandler(e,l,a,t)}))}()}},callbackHandler:function(e,t,n,i){let r=t.split(/\./);if(2===r.length){if(!$impleEvent.inCallbacks.hasOwnProperty(r[0]))return console.error("Can't Found Object:'"+r[0]+"' in '"+t+"' ,For '.' notation, use  '$impleEvent.addIn()' method?"),!1;if(!$impleEvent.inCallbacks[r[0]].hasOwnProperty(r[1]))return console.error("Can't Found Method:"+r[1]+"in "+r[0]+"Object : ref->"+t+" ,Please Register event handler using '$impleEvent.addIn("+r[0]+", ....)' method?"),!1;t=$impleEvent.inCallbacks[r[0]][r[1]]}else if($impleEvent.core.hasOwnProperty(t))t=$impleEvent.core[t];else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;t=$impleEvent.callbacks[t]}let a=$impleEvent.argumentsHandler(e,n);a.push(i);let l=t.apply(e,a);if(l||"string"==typeof l||"number"==typeof l){if(e.getAttribute($impleEvent.init.$dataFilter)){let t=e.getAttribute($impleEvent.init.$dataFilter);$impleEvent.core.hasOwnProperty(t)?l=$impleEvent.core[t].call(e,l):$impleEvent.callbacks.hasOwnProperty(t)?l=$impleEvent.callbacks[t].call(e,l):console.error("Unable to apply filter "+t+": Missing filter method")}$impleEvent.manageReturns(e.parentNode,l)}if(e.hasAttribute($impleEvent.init.$dataSet)){var o=$impleEvent.getData(e,!0);Array.isArray(o)&&Array.prototype.forEach.call(document.querySelectorAll(e.getAttribute($impleEvent.init.$dataSet)),(function(e){e.setAttribute($impleEvent.init.$dataGet,o[0]),e.setAttribute("value",o[1])}))}},argumentsHandler:function(e,t){return t&&(t=t.map((function(t){if("string"==typeof t){try{return JSON.parse(t.trim().replace(/^'/,'"').replace(/'$/,'"'))}catch(e){}if(t.match(/^\$+/)){let i=e,r=t.match(/\$/g).length;if(r>1)for(var n=1;n<r&&(i.parentNode&&"HTML"!==i.tagName);n++)i=i.parentNode;let a=t.replace(/^\$+/,"").trim();return a?l(i,a):i}if(/^<.+>/.test(t)){let n=e,i=t.match(/<(.+)>(\[(\d+)\])?(\..+)?/);if(i[1])return n="parent"===i[1]?n.parentNode:"next"===i[1]?n.nextElementSibling:"previous"===i[1]?n.previousElementSibling:"first"===i[1]?n.parentElement.firstElementChild:"last"===i[1]?n.parentElement.lastElementChild:"nth"===i[1]&&isFinite(i[3])?n.parentElement.children:document.querySelectorAll(i[1]),isFinite(i[3])?(n=n[parseInt(i[3])],i[4]?l(n,i[4].replace(/^\./,"")):n):i[4]?l(n,i[4].replace(/^\./,"")):n}return $impleEvent.vars.hasOwnProperty(t)?$impleEvent.vars[t]:void 0}return t}))),t},manageReturns:function(e,t,n){if("string"!=typeof t&&"number"!=typeof t&&!t.nodeName||!0!==n||!e.classList.contains($impleEvent.init.$className.replace(".",""))){if("string"==typeof t||"number"==typeof t||t.nodeName)return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),(function(e){if(e.hasAttribute($impleEvent.init.$dataFeed)||e.hasAttribute($impleEvent.init.$dataComponent))return!1;o(e,t)})),!0;if("[object Object]"===Object.prototype.toString.call(t))return t.hasOwnProperty("global")&&t.global&&$impleEvent.manageReturns($impleEvent.init.$global,t.global),t.hasOwnProperty("grandParent")&&t.grandParent&&$impleEvent.manageReturns(e.parentNode.parentNode,t.grandParent),t.hasOwnProperty("parent")&&t.parent&&$impleEvent.manageReturns(e.parentNode,t.parent),t.hasOwnProperty("self")&&t.self&&$impleEvent.manageReturns(e,t.self),Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className+"["+$impleEvent.init.$dataFeed+"]"),(function(e){let n=e.getAttribute($impleEvent.init.$dataFeed).trim(),i=null;if(n){let a=n.split(".");if(!t.hasOwnProperty(a[0]))return!1;if(a.length)if(1==a.length)i=t[n];else if(a.length>1){let e=t;for(var r=0;r<a.length;r++){if(!e[a[r]]){console.error("Cannot find:"+n+" in  the return "+JSON.stringify(t));break}e=e[a[r]]}i=e}i&&!1===o(e,i)&&(console.error("Only String , Number and Html Element  can be embeded; Cannot embed "+i+"for "+n+"in : "+e.nodeName.toLowerCase()+" Html Element"),console.log(e))}else console.warn("Make sure you have :"+$impleEvent.init.$dataFeed+" attribute to handle given return"+t)})),t.hasOwnProperty("returnTo")&&t.returnTo&&(t.returnTo[$impleEvent.init.$returnTo]&&t.returnTo[$impleEvent.init.$returnTo].nodeName?$impleEvent.manageReturns(t.returnTo[$impleEvent.init.$returnTo],t.returnTo.data,!0):console.error("Error@returnTo : Element not found:Please give returnTo."+$impleEvent.init.$returnTo+" a valid html element")),void(t.hasOwnProperty("returnToMany")&&"[object Array]"===Object.prototype.toString.call(t.returnToMany)&&t.returnToMany.forEach((e,t)=>{e[$impleEvent.init.$returnTo]&&e[$impleEvent.init.$returnTo].nodeName?$impleEvent.manageReturns(e[$impleEvent.init.$returnTo],e.data,!0):console.error("Error@returnToMany : Element not found @ array-index "+t+":Please give "+$impleEvent.init.$returnTo+" a valid html element at index "+t)}));if("[object Array]"===Object.prototype.toString.call(t)){if(1==n){let n=null;if(e.hasAttribute($impleEvent.init.$dataTemplate)){let t=e.getAttribute($impleEvent.init.$dataTemplate);n=$impleEvent.html(t)}else if(e.hasAttribute($impleEvent.init.$dataComponent)){let t=e.getAttribute($impleEvent.init.$dataComponent);n=document.querySelector(t)}if(n&&n.nodeName)return e.hasAttribute($impleEvent.init.$dataAppend)||(e.innerHTML=""),void s(e,t,n)}let i=null,r=null;if(e.querySelector("["+$impleEvent.init.$dataTemplate+"]")){let t=e.querySelector("["+$impleEvent.init.$dataTemplate+"]").getAttribute($impleEvent.init.$dataTemplate);if(i=$impleEvent.html(t),!i)return console.error("Please provide valid html Element e.g <li></li>;  Provided :-"+t),!1;r=e.querySelector("["+$impleEvent.init.$dataTemplate+"]")}else if(e.querySelector("["+$impleEvent.init.$dataComponent+"]")){let t=e.querySelector("["+$impleEvent.init.$dataComponent+"]").getAttribute($impleEvent.init.$dataComponent);if(i=document.querySelector(t),!i)return console.error("Please provide valid querySelector:  Provided :-"+t),!1;r=e.querySelector("["+$impleEvent.init.$dataComponent+"]")}else{if(!e.querySelector("["+$impleEvent.init.$dataForEach+"]"))return console.info("Array returns need ["+$impleEvent.init.$dataTemplate+"] or ["+$impleEvent.init.$dataComponent+"] holder: No such holder found "),!1;r=e.querySelector("["+$impleEvent.init.$dataForEach+"]").parentNode,i=e.querySelector("["+$impleEvent.init.$dataForEach+"]")}r.hasAttribute($impleEvent.init.$dataAppend)||(r.innerHTML=""),s(r,t,i)}}else!e.hasAttribute($impleEvent.init.$dataFeed)&&o(e,t)}};c.render=r,c.getData=function(e,t){var n={},i=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(i){let l=null;if(e.value||""===e.value?l=e.value:e.hasAttribute("value")&&(l=e.getAttribute("value")),(""===l||l)&&e.hasAttribute($impleEvent.init.$dataFilter)){var r=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(r)?l=$impleEvent.core[r].call(e,l):$impleEvent.callbacks.hasOwnProperty(r)?l=$impleEvent.callbacks[r].call(e,l):console.error("Unable to apply filter"+r+": Missing filter method"),!l)return console.error("Error in "+$impleEvent.init.$dataFilter+": Must return value with valid data type; check return from '"+r+"' method"),!1}if(1==t)return[i,l];if(e.getAttribute($impleEvent.init.$dataValidate)){var a=e.getAttribute($impleEvent.init.$dataValidate);$impleEvent.callbacks.hasOwnProperty(a)?$impleEvent.callbacks[a].call(e,i,l)||(n.hasError=!0):console.log("Error in "+$impleEvent.init.$dataValidate+" unable to find callback :"+a)}n[i]=l}return e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),(function(e){var t=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(t){let l=null;if(e.value||""===e.value?l=e.value:e.hasAttribute("value")&&(l=e.getAttribute("value")),(""===l||l)&&e.hasAttribute($impleEvent.init.$dataFilter)){var i=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(i)?l=$impleEvent.core[i].call(e,l):$impleEvent.callbacks.hasOwnProperty(i)?l=$impleEvent.callbacks[i].call(e,l):console.error("Unable to apply filter"+i+": Missing filter method"),!l)return console.error("Error in "+$impleEvent.init.$dataFilter+" : Must return value with valid data type; check return from '"+i+"' method"),!1}if(e.getAttribute($impleEvent.init.$dataValidate)){var r=e.getAttribute($impleEvent.init.$dataValidate);if($impleEvent.callbacks.hasOwnProperty(r)){var a=$impleEvent.callbacks[r].call(e,t,l);Array.isArray(a)&&(n.validate=[]),!1===a&&(n.hasError=!0)}else console.error("Error in "+$impleEvent.init.$dataValidate+" unable to find callback :"+r)}n[t]=l}})),n},c.setData=function(e,t){let n=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);t.hasOwnProperty(n)&&(e.hasAttribute("value")?e.setAttribute("value",t[n]):e.value=t[n]),e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),(function(e){let n=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);t.hasOwnProperty(n)&&(e.value||""===e.value?e.value=t[n]:e.hasAttribute("value")&&e.setAttribute("value",t[n]))}))},c.dataStore=function(e,t){let n={};if(e&&e.nodeName)if(e.hasAttribute($impleEvent.init.$dataStore)){let i=e.getAttribute($impleEvent.init.$dataStore).trim();try{n=JSON.parse(i)}catch(r){if(console.error("Please Provide Valid JSON data: Provided: "+i),!t)return null;console.warn("Using default dataStore instead "),n=t,e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(n))}}else t&&(console.warn("Using default dataStore instead "),n=t,e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(n)));else console.error("Please Provide  HTML element as an arguments");return{store:n,get:function(){return this.store},set:function(){e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(this.store))}}},c.callbacks={},c.inCallbacks={},c.core=u,c.init=i,c.vars={},c.parseJSON=function(e){try{return JSON.parse(e)}catch(t){return e}},c.fire=function(e,t){if(e&&e.nodeName){let[n,i]=[[],null];[,i,n]=/[\s]*([\w-\.]+)([(][^)]*[)])?/.exec(t),i?(n?(n=n.replace(/[()]/g,"").split(/[,]/),!0===c.init.$reserveEventArgument&&n.shift()):n=[],c.callbackHandler(e,i,n,null)):console.error("Provide valid method, Provided "+i)}else console.error("Provide Html Element, Provided "+e)},c.invoke=function(e,t){let n=t||"invoke";if(e&&e.nodeName&&e.hasAttribute(this.init.$event)){let t=e.getAttribute(this.init.$event);if(t.trim())if(!0===this.init.$useArrow){let i=t.replace(c.init.$seperatorArrowGlobal,"");i.replace(/[,;]/g,"").trim()&&(console.error("Invalid syntax defination:'"+i,e),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(e,t.match(this.init.$seperatorArrowGlobal),n)}else this.eventManager(e,t.split(/\s+/),n)}},c.return=function(e,t){return this.manageReturns(e.parentNode,t)},c.reset=function(e,t){let n=e.parentNode;n.nodeType&&(!0===t?n.querySelectorAll(this.init.$className+"["+this.init.$dataFeed+"]").forEach(e=>{e.innerHTML=""}):n.querySelectorAll(this.init.$className).forEach(e=>{e.innerHTML=""}))},c.toString=function(){return"Object $impleEvent"},c.method=function(e,t){var n=e.split(/\./);return 2===n.length?this.inCallbacks.hasOwnProperty(n[0])?this.inCallbacks[n[0]].hasOwnProperty(n[1])?t?this.inCallbacks[n[0]][n[1]].bind(t):this.inCallbacks[n[0]][n[1]]:(console.error("Can't Found Method:"+n[1]+"in "+n[0]+"Object : ref->"+e+" ,Please Register event handler using '$impleEvent.addIn("+n[0]+", ....)' method?"),!1):(console.error("Can't Found Object:'"+n[0]+"' in '"+e+"' ,For '.' notation, use  '$impleEvent.addIn()' method?"),!1):this.core.hasOwnProperty(e)?t?this.core[e].bind(t):this.core[e]:this.callbacks.hasOwnProperty(e)?t?this.callbacks[e].bind(t):this.callbacks[e]:(console.error("Can't Found Method:"+e+" ,Please Register event handler using '$impleEvent.add()' method?"),!1)},c.addIn=function(e,t,n){let i=null;if(i=this.inCallbacks.hasOwnProperty(e)?this.inCallbacks[e]:this.inCallbacks[e]={},"[object Object]"===Object.prototype.toString.call(t))for(var r in t)"[object Function]"===Object.prototype.toString.call(t[r])?i[r]=t[r]:console.error("Please provide valid callback function for :"+r);else"[object String]"===Object.prototype.toString.call(t)&&"[object Function]"===Object.prototype.toString.call(n)?i[t]=n:console.error("Invalid argument supplied to add("+t+", "+n+") : Supply method name and callback");return this.initiate||(this.launch(),this.initiate=!0),this},c.asHTML=function(e){var t=this.createElement("div");return t.innerHTML=e,this.render.cloneElement(t).firstElementChild},c.html=function(e){return this.asHTML(e)},c.createElement=function(e,t){var n=document.createElement(e);for(var i in t)"text"==i?n.innerText=t[i]:n.setAttribute(i,t[i]);return n},c.validate=function(e,t,n){this.core.validate.hasOwnProperty(t)},c.initiate=null,c.add=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)"[object Function]"===Object.prototype.toString.call(e[n])?this.callbacks[n]=e[n]:console.error("Please provide valid callback function for :"+n);else"[object String]"===Object.prototype.toString.call(e)&&"[object Function]"===Object.prototype.toString.call(t)?this.callbacks[e]=t:console.error("Invalid argument supplied to add("+e+", "+t+") : Supply method name and callback");return this},c.register=function(e,t){return this.add(e,t)},c.$add=function(){if("[object Object]"===Object.prototype.toString.call(a))for(var e in a)this.vars[e]=a[key];else"[object String]"===Object.prototype.toString.call(a)?this.vars[a]=b:console.error("Invalid argument supplied to add("+a+", "+b+") : Supply vaild arguments");return this},c.addVar=function(e,t){return this.$add(e,t)},c.update=function(e){this.launch(e)},c.config=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)this.init.hasOwnProperty(n)?this.init[n]=e[n]:console.error("Unvalid Config Property :"+n);else this.init.hasOwnProperty(e)?this.init[e]=t:console.error("Unvalid Config Property :"+e);return this},c.launch=function(e){var t=e||this.init.$root;if(t!=document&&t.hasAttribute("event")){let e=t.getAttribute("event").trim();if(e)if(!0===this.init.$useArrow){let n=e.replace(c.init.$seperatorArrowGlobal,"");n.replace(/[,;]/g,"").trim()&&(console.error("Invalid syntax defination:'"+n,t),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(t,e.match(this.init.$seperatorArrowGlobal))}else this.eventManager(t,e.split(/\s+/))}let n=t.querySelectorAll("[event]");for(let e=0;e<n.length;e++){let t=n[e].getAttribute("event");if(t.trim())if(!0===this.init.$useArrow){let i=t.replace(c.init.$seperatorArrowGlobal,"");i.replace(/[,;]/g,"").trim()&&(console.error("Invalid syntax defination:'"+i,n[e]),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(n[e],t.match(this.init.$seperatorArrowGlobal))}else this.eventManager(n[e],t.split(/\s+/))}},window.$impleEvent?"Object $impleEvent"===window.$impleEvent.toString()?console.warn("Duplicate $impleEvent libaray Found! Make sure you are not importing $impleEvent more than one time. "):console.error("$impleEvent name is already used, Please Dont assign '$impleEvent' to any varibale, function or objects. Please free ' $impleEvent' namespace from global scope."):window.$impleEvent=c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9pbml0LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcmVuZGVyLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvYXJndW1lbnRzSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3JldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2V2ZW50LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9yZXRyaXZlLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvYXNzaWduLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvc3RvcmUuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJpbml0IiwiJHVzZUFycm93IiwiJGV2ZW50IiwiJGV2ZW50T25jZSIsIiR1c2VWYXIiLCIkc2VwZXJhdG9yQXJyb3ciLCIkc2VwZXJhdG9yQXJyb3dHbG9iYWwiLCJSZWdFeHAiLCIkcmVzZXJ2ZUV2ZW50QXJndW1lbnQiLCIkc2VwZXJhdG9yIiwiJGNsYXNzTmFtZSIsIiRkYXRhRmVlZCIsIiRkYXRhR2V0IiwiJGRhdGFUZW1wbGF0ZSIsIiRkYXRhQ29tcG9uZW50IiwiJGRhdGFGaWx0ZXIiLCIkZGF0YVZhbGlkYXRlIiwiJGRhdGFTZXQiLCIkZGF0YVN0b3JlIiwiJGRhdGFBcHBlbmQiLCIkZGF0YUZvckVhY2giLCIkcmV0dXJuVG8iLCIkcm9vdCIsImRvY3VtZW50IiwiJGdsb2JhbCIsIiRkZWZhdWx0VGVtcGxhdGUiLCJyZW5kZXIiLCJpZCIsImxpc3QiLCJjbG9uZUVsZW1lbnQiLCJlbCIsInRoaXMiLCJvYmoySHRtbCIsImh0bWwyT2JqIiwib2JqIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJ0cmltIiwiaXNUZXh0IiwidGV4dCIsInRhZ05hbWUiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiYXR0cmlidXRlcyIsImoiLCJsZW5ndGgiLCJoYXNDaGlsZE5vZGVzIiwiaGFzQ2hpbGQiLCJjaGlsZENvdW50IiwiY2hpbGROb2RlcyIsImsiLCJlbGUiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiJGltcGxlRXZlbnQiLCJjcmVhdGVFbGVtZW50IiwidG8iLCJjb21wb25lbnQiLCIkcmV0dXJuIiwiaGFzQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwicmVuZGVySWQiLCJnZXRBdHRyaWJ1dGUiLCJBcnJheSIsImZvckVhY2giLCJlIiwibWFuYWdlUmV0dXJucyIsInVwZGF0ZSIsImF0dHJpYnV0ZUhhbmRsZXIiLCIkYXJnIiwic3BsaXQiLCJyZXBsYWNlIiwiYSIsImIiLCJhdHRyIiwicGFyc2VKU09OIiwiZWxlbWVudCIsImF0dHJpYnV0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXQiLCJhdHRyT2JqZWN0aWZ5IiwiY29uc29sZSIsImxvZyIsImFwcGVuZERhdGEiLCJkYXRhIiwiaW5uZXJIVE1MIiwiaHRtbCIsImFwcGVuZEFycmF5IiwidGVtcGxhdGUiLCJjbG9uZUNvbXBvbmVudCIsImNoaWxkRWxlbWVudENvdW50IiwiY29yZSIsImluZm8iLCJsb2dFdmVudCIsImV2ZW50IiwidHlwZSIsImxvZ0Z1bmMiLCJjYWxsYmFja05hbWUiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJhcmc0IiwiYXJnNSIsImNhbGxiYWNrcyIsInJldHVybiIsImlzRmluaXRlIiwid2FybiIsInJldHVyblRvIiwiZ2V0RWxlbWVudEJ5SWQiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImVycm9yIiwidGltZXIiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xvc2UiLCJib29sIiwicGFyZW50Tm9kZSIsInN0eWxlIiwiZGlzcGxheSIsImNvbmZpcm0iLCJvcGVuQ2xvc2UiLCJ0eXBld3JpdGVyIiwiaW5wdXQiLCJwbGFjZWhvbGRlciIsIl90aGlzIiwib25jbGljayIsInN0b3BQcm9wYWdhdGlvbiIsInBvc2l0aW9uIiwib25rZXl1cCIsImV2Iiwid2hpY2giLCJwcmV2aW91c1NpYmxpbmciLCJvbmNoYW5nZSIsInJlbW92ZUNoaWxkIiwib25ibHVyIiwiZm9jdXMiLCJkYXRhQ2hhbmdlciIsImZvcm0iLCJsYWJlbCIsImlubmVyVGV4dCIsInpJbmRleCIsInRvcCIsIm9wYWNpdHkiLCJjYXJvdXNlbCIsImltYWdlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5kZXgiLCJwYXJzZUludCIsImFkZENsYXNzTmFtZSIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzTmFtZSIsInJlbW92ZSIsInRvZ2dsZUNsYXNzTmFtZSIsInRvZ2dsZSIsImNzcyIsInRyYW5zaXRpb24iLCJhcmd1bWVudHMiLCJ2YWxpZGF0ZSIsImVtYWlsIiwidGVzdCIsInN1Y2Nlc3MiLCJmYWlsIiwibnVtYmVyIiwicmVxdWlyZWQiLCJldmVudExpc3QiLCJpbnZva2UiLCJhcmdzIiwiY2FsbGJhY2siLCJleGVjIiwic2xpY2UiLCJjYWxsYmFja0hhbmRsZXIiLCJtYXRjaCIsInRpbWUiLCJzaGlmdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsImluQ2FsbGJhY2tzIiwiJGFyZ3MiLCJhcmd1bWVudHNIYW5kbGVyIiwicHVzaCIsImFwcGx5IiwiZmlsdGVyIiwiYXJyeSIsImdldERhdGEiLCJpc0FycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsIm1hcCIsImFyZyIsInBhcnNlIiwiJGxlbiIsInNlbGVjdG9yIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInBhcmVudEVsZW1lbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImxhc3RFbGVtZW50Q2hpbGQiLCJjaGlsZHJlbiIsInZhcnMiLCJ1bmRlZmluZWQiLCJjb250YWlucyIsInRvU3RyaW5nIiwiZ2xvYmFsIiwiZ3JhbmRQYXJlbnQiLCJwYXJlbnQiLCJzZWxmIiwiZmVlZCIsInJlc3VsdCIsInJldHVyblRvTWFueSIsInRlbXBsYXRlRWxlbWVudCIsImh0bWxUZW1wbGF0ZSIsInRlbXBsYXRlU291cmNlIiwicXVlcnlTZWxlY3RvciIsImhhc0Vycm9yIiwiaXNWYWxpZCIsInNldERhdGEiLCJkYXRhU3RvcmUiLCJfZGVmYXVsdCIsInN0b3JlIiwiZmlyZSIsIm1ldGhvZCIsImV2ZW50QXR0cmlidXRlIiwicmVtYWlucyIsImV2ZW50TWFuYWdlciIsInJlc2V0IiwiYWRkSW4iLCJfdGhpc0NhbGxiYWNrcyIsImtleXMiLCJpbml0aWF0ZSIsImxhdW5jaCIsImFzSFRNTCIsInN0cmluZyIsInRhZyIsInJlZ2lzdGVyIiwiJGFkZCIsImFkZFZhciIsImNvbmZpZyIsImVsZW1lbnRzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFB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QyxRQUFROEIsTUFBTSw4QkFBOEJrSCxFQUFRZSxFQUFTalIsSUFDN0RrSCxRQUFReUIsS0FBSyw2SUFHZDVFLEtBQUtvTSxhQUFhYyxFQUFTalIsR0FBSWlRLEVBQWVuRCxNQUFNL0ksS0FBSy9CLEtBQUtNLDZCQUU5RHlCLEtBQUtvTSxhQUFhYyxFQUFTalIsR0FBR2lRLEVBQWUzSixNQUFNLFVBYXJEOEcsT0FBTzlILFlBQzBCLHVCQUFoQzhILE9BQU85SCxZQUFZdUosV0FDckIzSCxRQUFReUIsS0FBSyx5R0FFYnpCLFFBQVE4QixNQUFNLG9LQUdmb0UsT0FBTzlILFlBQVkiLCJmaWxlIjoiJGltcGxlRXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJleHBvcnQgbGV0IGluaXQ9e1xuXHRcdFx0Ly91c2UgYXJyb3cgbm90YXRpb24gb3RoZXIgd2lzZSBfIGFuZCBzcGFjZVxuXHRcdFx0Ly91c2UgYXJyb3cgbm90YXRpb24gYW5kICwgc3BhY2Ugb3IgO1xuXHRcdFx0JHVzZUFycm93OnRydWUsXG5cdFx0XHQkZXZlbnQ6J2V2ZW50JywvL2FjdGlvblxuXHRcdFx0JGV2ZW50T25jZTonZXZlbnQtb25jZScsXG5cdFx0XHQkdXNlVmFyOnRydWUsXG5cdFx0XHQkc2VwZXJhdG9yQXJyb3c6LyhbYS16XSspW1xcc10qWz1dWz5dW1xcc10qKFtcXHctXFwuXSspKFsoXVteKV0qWyldKT8vLFxuXHRcdFx0JHNlcGVyYXRvckFycm93R2xvYmFsOm5ldyBSZWdFeHAoLyhbYS16XSspW1xcc10qWz1dWz5dW1xcc10qKFtcXHctXFwuXSspKFsoXVteKV0qWyldKT8vLFwiZ1wiKSxcblx0XHRcdCRyZXNlcnZlRXZlbnRBcmd1bWVudDp0cnVlLFxuXHRcdFx0JHNlcGVyYXRvcjovWzpdL2csLy9bLXxfXSB0aGlzIGlzIGFsc28gZ29vZCBbOl0vZywgZXZlbnQ9XCJjbGlja19yb3RhdGVfNDVkZWdcIiB8fGNsaWNrOnJvcnRhdGU6YXJndWVtbnRcblx0XHRcdC8vSFRNTCBFTEVNRU5UXG5cdFx0XHQvL2NhbGxiYWNrIGhhcyByZXR1cm4gaXQgd2lsbCBmaXJzdCBsb29rIGZvciBlbGVtZW50IHdpdGggZ2l2ZW4gY2xhc3NuYW1lIHRoZSBvbmx5IHByb2Nlc3MgcmV0dXJuXG5cdFx0XHQkY2xhc3NOYW1lOlwiLnJldHVyblwiLC8vY2xhc3MgbmFtZSB0byBkaXNwdGFjaCByZXR1cm5cblx0XHRcdC8vZGF0YS1mZWVkPVwibmFtZVwiLCAgcmV0dXJuIHtuYW1lOlwiTXkgTmFtZVwifVxuXHRcdFx0JGRhdGFGZWVkOlwiZGF0YS1mZWVkXCIsLy9kYXRhLXJldHVybiBhc2xvIHNvdW5kcyBncmVhdFxuXHRcdFx0Ly9nZXRzIGRhdGEgd2l0aCBrZXkgYW5kIHZhbHVlLCBkYXRhLWdldD1cIm5hbWVcIiB2YWx1ZT1cIm15IG5hbWVcIlxuXHRcdFx0JGRhdGFHZXQ6XCJkYXRhLWdldFwiLC8vXG5cdFx0XHQvL2ZvciBhcnJheSByZXR1cm4gY29udGFpbmVyIFxuXHRcdFx0JGRhdGFUZW1wbGF0ZTonZGF0YS10ZW1wbGF0ZScsXG5cdFx0XHQkZGF0YUNvbXBvbmVudDonZGF0YS1jb21wb25lbnQnLFxuXHRcdFx0JGRhdGFGaWx0ZXI6J2RhdGEtZmlsdGVyJyxcblx0XHRcdCRkYXRhVmFsaWRhdGU6J2RhdGEtdmFsaWRhdGUnLFxuXHRcdFx0JGRhdGFTZXQ6J2RhdGEtc2V0Jyxcblx0XHRcdCRkYXRhU3RvcmU6J2RhdGEtc3RvcmUnLFxuXHRcdFx0JGRhdGFBcHBlbmQ6XCJkYXRhLWFwcGVuZFwiLC8vQVBQRU5EUyBvciByZXBsYWNlIFxuXHRcdFx0JGRhdGFGb3JFYWNoOlwiZGF0YS1mb3ItZWFjaFwiLC8vQVBQRU5EUyBvciByZXBsYWNlIFxuXHRcdFx0Ly8gJGRhdGFFcnJvcjpcImRhdGEtZXJyb3JcIiwvL2ZvciBlcnJvclxuXHRcdFx0Ly8gJGRhdGFNZXNzYWdlOlwiZGF0YS1tZXNzYWdlXCIsXG5cdFx0XHQvLyAkZGF0YU5vdGlmaWNhdGlvbjonZGF0YS1ub3RpZmljYXRpb24nLCBcblx0XHQvL0FQUExJQ0FUSU9OXG5cdFx0XHQvLyAkbm90aWZpY2F0aW9uOm51bGwsXG5cdFx0XHQvL3JldHVybiB7IHJldHVyblRvOntlbDpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaDEnKX0sIGRhdGE6e25hbWU6XCJteW5hbWVcIn19XG5cdFx0XHQkcmV0dXJuVG86XCJlbFwiLC8vZGVmaW5lIHlvdXIgb3V0ZXIgc2NvcGUgZWxlbWVudCBob2xkZXJcblx0XHRcdCRyb290OmRvY3VtZW50LC8vYnkgZGVmYXVsdFxuXHRcdFx0JGdsb2JhbDpkb2N1bWVudCwvL2J5IGRlZmF1bHQgXG5cdFx0XHQkZGVmYXVsdFRlbXBsYXRlOic8bGkgY2xhc3M9XCJyZXR1cm4tbGlzdC1pdGVtXCI+PC9saT4nLC8vZGVmYXVsdCB3cmFwcGVyIGZvciBhcnJheSByZXR1cm4gaXRlbVxuXHRcbn07XG5cbiIsImV4cG9ydCB2YXIgIHJlbmRlcj17XG5cdC8vSVQgd2lsbCBjb252ZXJ0IGh0bWwgdG8gb2JqIGFuZCBvYmogdG8gSHRtbFxuXHRcdGlkOjAsLy9cblx0XHRsaXN0Ont9LFxuXHRcdGNsb25lRWxlbWVudDpmdW5jdGlvbihlbCl7XG5cdFx0XHQvL3JldHVybiBjbG9uZSBvciBjbG9uZSBuZXcgZWxlbWVudCBldmVyeSB0aW1lIGl0cyBjYWxsZWRcblx0XHRcdHJldHVybiB0aGlzLm9iajJIdG1sKHRoaXMuaHRtbDJPYmooZWwse30sMSkpO1xuXHRcdH0sXG5cdFx0Ly8gaHRtbDJPYmpJbm5lckh0bWw6ZnVuY3Rpb24oKXtcblxuXHRcdC8vIH0sXG5cdFx0aHRtbDJPYmo6ZnVuY3Rpb24oZWwsb2JqLGkpe1xuXG5cdFx0XHRcdG9ialtpXT17fTtcblx0XHRcdFx0aWYoZWwubm9kZVR5cGU9PTMpe1xuXHRcdFx0XHRcdGlmKGVsLm5vZGVWYWx1ZS50cmltKCkpe1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRvYmpbaV0uaXNUZXh0PXRydWU7XG5cdFx0XHRcdFx0XHRvYmpbaV0udGV4dD1lbC5ub2RlVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSBpZihlbC5ub2RlVHlwZT09OCl7XG5cdFx0XHRcdFx0Ly9pZ25vcmUgY29tbWVudHNcblx0XHRcdFx0fWVsc2V7XG5cblx0XHRcdFx0XHRvYmpbaV0udGFnTmFtZT1lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdG9ialtpXS5hdHRyaWJ1dGVzPXt9O1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coZWwpO1xuXHRcdFx0XHRcdGZvcih2YXIgaj0wO2o8ZWwuYXR0cmlidXRlcy5sZW5ndGg7aisrKXtcblx0XHRcdFx0XHRcdGVsLmF0dHJpYnV0ZXMubGVuZ3RoXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKGopO1xuXHRcdFx0XHRcdFx0b2JqW2ldLmF0dHJpYnV0ZXNbZWwuYXR0cmlidXRlc1tqXS5uYW1lXT1lbC5hdHRyaWJ1dGVzW2pdLnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGVsLmhhc0NoaWxkTm9kZXMpe1xuXHRcdFx0XHRcdFx0b2JqW2ldLmhhc0NoaWxkPXRydWU7XG5cdFx0XHRcdFx0XHRvYmpbaV0uY2hpbGRDb3VudD1lbC5jaGlsZE5vZGVzLmxlbmd0aDtcblx0XHRcdFx0XHRcdGZvciAodmFyIGs9MDsgazxvYmpbaV0uY2hpbGRDb3VudDsgaysrKXtcblx0XHRcdFx0XHRcdFx0aWYoZWwuY2hpbGROb2Rlc1trXSlcblx0XHRcdFx0XHRcdFx0dGhpcy5odG1sMk9iaihlbC5jaGlsZE5vZGVzW2tdLG9ialtpXSxrKzEpO1xuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQgcmV0dXJuIG9iajtcblxuXHRcdH0sXG5cdFx0b2JqMkh0bWw6ZnVuY3Rpb24ob2JqLGVsKXtcblx0XHRcdGlmKGVsKXtcblxuXHRcdFx0XHRcblx0XHRcdFx0Zm9yKHZhciBpPTE7aTw9b2JqLmNoaWxkQ291bnQ7aSsrKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihvYmpbaV0uaXNUZXh0KXtcblx0XHRcdFx0XHRcdHZhciBlbGU9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUob2JqW2ldLnRleHQpO1xuXHRcdFx0XHRcdFx0ZWwuYXBwZW5kQ2hpbGQoZWxlKTtcblxuXHRcdFx0XHRcdH1lbHNlIGlmKG9ialtpXS50YWdOYW1lKXtcblx0XHRcdFx0XHRcdHZhciBlbGU9JGltcGxlRXZlbnQuY3JlYXRlRWxlbWVudChvYmpbaV0udGFnTmFtZSwgb2JqW2ldLmF0dHJpYnV0ZXMpO1xuXHRcdFx0XHRcdFx0aWYoZWxlLmlkKXtlbGUuaWQ9ZWxlLmlkK2l9O1xuXHRcdFx0XHRcdFx0ZWwuYXBwZW5kQ2hpbGQoZWxlKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5vYmoySHRtbChvYmpbaV0sZWxlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0ZWw9JGltcGxlRXZlbnQuY3JlYXRlRWxlbWVudChvYmpbMV0udGFnTmFtZSwgb2JqWzFdLmF0dHJpYnV0ZXMpO1xuXHRcdFx0XHQvLyBpZihlbC5pZCl7ZWwuaWQ9ZWwuaWQrMX07XG5cdFx0XHRcdHRoaXMub2JqMkh0bWwob2JqWzFdLGVsKTtcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHRcblx0XHR9LFxuXHRcdFxuXHRcdHRvOmZ1bmN0aW9uKGVsLGNvbXBvbmVudCwkcmV0dXJuKXtcblxuXHRcdFx0aWYoIWVsLmhhc0F0dHJpYnV0ZSgncmVuZGVyLWlkJykpe1xuXHRcdFx0XHRcblx0XHQgXHRcdHRoaXMuaWQ9dGhpcy5pZCsxO1xuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUoJ3JlbmRlci1pZCcsdGhpcy5pZCk7XG5cdFx0XHRcdHRoaXMubGlzdFt0aGlzLmlkXT17b2JqOnRoaXMuaHRtbDJPYmooY29tcG9uZW50LHt9LDEpfTtcblx0XHQgXHR9XG5cdFx0IFx0dmFyIHJlbmRlcklkPWVsLmdldEF0dHJpYnV0ZSgncmVuZGVyLWlkJyk7XG5cdFx0IFx0dmFyIG9iaj10aGlzLmxpc3RbcmVuZGVySWRdLm9iajtcblx0XHQgXHR2YXIgZWxlPXRoaXMub2JqMkh0bWwob2JqLGZhbHNlKTtcblx0XHQgXHQvLyBmb3IgZWFjaCBpdGVtIGluIGFycmF5XG5cdFx0IFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCgkcmV0dXJuLGZ1bmN0aW9uKGUpe1xuXHRcdCBcdFx0dmFyIGVsZT0kaW1wbGVFdmVudC5yZW5kZXIub2JqMkh0bWwob2JqLGZhbHNlKTtcblx0XHQgXHRcdGVsLmFwcGVuZENoaWxkKGVsZSk7XG5cdFx0IFx0XHQkaW1wbGVFdmVudC5tYW5hZ2VSZXR1cm5zKGVsZSwgZSk7XG5cdFx0IFx0XHQkaW1wbGVFdmVudC51cGRhdGUoZWxlKTtcblx0XHQgXHR9KTtcblx0XHQgXHRcblx0XHR9LFx0XG5cdH07IiwiXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vSGFuZGxlIEFyZ3VtZW50cyBcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFyZ3VtZW50c0hhbmRsZXIoZWwsYXJncyl7XG5cdGlmKGFyZ3Mpe1xuXHRcdC8vbWFwcGluZyBhcmdzIFxuXHRcdGFyZ3M9YXJncy5tYXAoZnVuY3Rpb24oYXJnKXtcblxuXHRcdFx0aWYodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpey8vIGlcblx0XHRcdFx0Ly9Eb3VibGUgcW91dGVzIGlmIGl0cyBzaW5nbGVcblx0XHRcdFx0XG5cdFx0XHRcdC8vIEpTT04ucGFyc2UgZm9yIE51bWJlciAsIEJvb2xlYW4sICBzdHJpbmcgLGFycmF5IGFuZCBvYmplY3QgXG5cdFx0XHRcdHRyeVx0e1xuXHRcdFx0XHRcdGxldCAkYXJnPUpTT04ucGFyc2UoYXJnLnRyaW0oKS5yZXBsYWNlKC9eJy8sJ1wiJykucmVwbGFjZSgvJyQvLCdcIicpKTtcblx0XHRcdFx0XHRyZXR1cm4gJGFyZztcblx0XHRcdFx0fSBjYXRjaChlKXtcblx0XHRcdFx0XHQvLyBjb25zb2xlLndhcm4oZSk7XG5cdFx0XHRcdH1cblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tYXR0cmlidXRlICYgcGFyZW50c1xuXHRcdFx0XHRpZihhcmcubWF0Y2goL15cXCQrLykpe1xuXHRcdFx0XHRcdGxldCBlbGU9ZWw7XG5cdFx0XHRcdFx0bGV0ICRsZW49YXJnLm1hdGNoKC9cXCQvZykubGVuZ3RoO1xuXG5cdFx0XHRcdFx0aWYoICRsZW4gPiAxKXtcblx0XHRcdFx0XHRcdGZvciAodmFyIGkgPTEgOyBpIDwkbGVuIDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGlmKCFlbGVbXCJwYXJlbnROb2RlXCJdIHx8IGVsZS50YWdOYW1lPT09J0hUTUwnKXtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ICAgXHRcdGVsZT1lbGVbJ3BhcmVudE5vZGUnXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQgICB9XG5cblx0XHRcdFx0XHQgICBsZXQgJGFyZz1hcmcucmVwbGFjZSgvXlxcJCsvLFwiXCIpLnRyaW0oKTtcblxuXHRcdFx0XHRcdCAgIGlmKCEkYXJnKSByZXR1cm4gZWxlO1xuXG5cdFx0XHRcdFx0ICAgcmV0dXJuIGF0dHJpYnV0ZUhhbmRsZXIoZWxlLCRhcmcpO1xuXG5cdFx0XHRcdCAgICB9Ly9FTkRJRiAkIE1BVENIXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWlmIGFyZ3VtZW50IGlzIHF1ZXJ5c2VsZWN0b3Jcblx0XHRcdC8vUXVlcnkgc2VsZWN0b3IgQWxsIDw+IHNpZ25cblx0XHRcdC8vY2FzZSA6LS0tLS1xdWVyeSBzZWxldG9yXG5cdFx0XHQvLy0tLS0tLS0tLS0tLS0tLUVsZW1lbnQgUHJvY2NlclxuXHRcdFx0XHRpZigvXjwuKz4vLnRlc3QoYXJnKSl7XG5cdFx0XHRcdFx0bGV0IGVsZT1lbDtcblx0XHRcdFx0XHRsZXQgc2VsZWN0b3I9YXJnLm1hdGNoKC88KC4rKT4oXFxbKFxcZCspXFxdKT8oXFwuLispPy8pO1xuXHRcdFx0XHRcdGlmKHNlbGVjdG9yWzFdKXtcblx0XHRcdFx0XHRcdC8vQ0hFQ0sgSUYgSVQgSVMgcGFyZW50ICwgbmV4dCwgcHJldm91cywgZmlyc3QgLGxhc3QsIFxuXHRcdFx0XHRcdFx0aWYoc2VsZWN0b3JbMV09PT0ncGFyZW50Jyl7XG5cdFx0XHRcdFx0XHRcdGVsZT0gZWxlLnBhcmVudE5vZGU7XG5cblx0XHRcdFx0XHRcdH1lbHNlIGlmKHNlbGVjdG9yWzFdPT09J25leHQnKXtcblx0XHRcdFx0XHRcdFx0IGVsZT1lbGUubmV4dEVsZW1lbnRTaWJsaW5nXG5cblx0XHRcdFx0XHRcdH1lbHNlIGlmKHNlbGVjdG9yWzFdPT09J3ByZXZpb3VzJyl7XG5cdFx0XHRcdFx0XHRcdCBlbGU9ZWxlLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcblx0XHRcdFx0XHRcdH1lbHNlIGlmKHNlbGVjdG9yWzFdPT09J2ZpcnN0Jyl7XG5cdFx0XHRcdFx0XHRcdGVsZT1lbGUucGFyZW50RWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0XHRcdH1lbHNlIGlmKHNlbGVjdG9yWzFdPT09J2xhc3QnKXtcblx0XHRcdFx0XHRcdFx0ZWxlPWVsZS5wYXJlbnRFbGVtZW50Lmxhc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdFx0XHR9ZWxzZSBpZihzZWxlY3RvclsxXT09PSdudGgnICYmICBpc0Zpbml0ZShzZWxlY3RvclszXSkpe1xuXG5cdFx0XHRcdFx0XHRcdGVsZT1lbGUucGFyZW50RWxlbWVudC5jaGlsZHJlbjsvL1twYXJzZUludChzZWxlY3RvclszXSldO1xuXHRcdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcdGVsZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yWzFdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vLS0tLS0tLWVuZCBlbGVtZW50IHByb2Nlc3NvciBcblx0XHRcdFx0XHRcdC8vaWYgaXQgaGFzIGluZGV4IGZvciBjaGlsZCBub3RlIDw+WzFdXG5cdFx0XHRcdFx0XHRcblxuXHRcdFx0XHRcdFx0aWYoaXNGaW5pdGUoc2VsZWN0b3JbM10pKXtcblx0XHRcdFx0XHRcdFx0ZWxlPWVsZVtwYXJzZUludChzZWxlY3RvclszXSldO1xuXG5cdFx0XHRcdFx0XHRcdGlmKHNlbGVjdG9yWzRdKXtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYXR0cmlidXRlSGFuZGxlcihlbGUsc2VsZWN0b3JbNF0ucmVwbGFjZSgvXlxcLi8sXCJcIikpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbGU7XG5cdFx0XHRcdFx0XHQvL2ZvciA8PiB3aXRoIG91dCBbMF0gZWcgPHBhcmVudD4uZGF0YVN0b3JlXHRcblx0XHRcdFx0XHRcdCB9ZWxzZSBpZihzZWxlY3Rvcls0XSl7XG5cdFx0XHRcdFx0XHQgXHRyZXR1cm4gYXR0cmlidXRlSGFuZGxlcihlbGUsc2VsZWN0b3JbNF0ucmVwbGFjZSgvXlxcLi8sXCJcIikpO1xuXHRcdFx0XHRcdFx0IH1cblx0XHRcdFx0XHRcdCByZXR1cm4gZWxlO1xuXHRcdFx0XHRcdFx0IH0vL2VuZGlmIHNlbGVjdG9yWzFdXG4gIFx0XHRcdFx0XHRcdFx0XG4gIFx0XHRcdFx0XHRcdH0vL2VuZCBpZiB0ZXN0PC4uLj4gXG4gIFx0XHRcdFx0XHRcbiAgXHRcdCAgICAgICAgICAgIC8vcmV0dXJuIGFzIGl0IGlzXG5cdFx0XHRcdFx0IHJldHVybiAkaW1wbGVFdmVudC52YXJzLmhhc093blByb3BlcnR5KGFyZyk/JGltcGxlRXZlbnQudmFyc1thcmddOnVuZGVmaW5lZDtcblx0XHRcdFx0XHR9ZWxzZXsgLy8gSUYgaXRzIG5vdCBzdHJpbmcgcmV0dXJuIGFzIGl0IGlzLlxuXHRcdFx0XHRcdFx0cmV0dXJuIGFyZztcblx0XHRcdFx0XHR9IC8vIEVuZCBpZiBUeXBlIGNoZWNrXG5cblx0XHRcdFx0fSk7Ly8gRW5kIG9mIGFycmF5IG1hcCBcblx0XHRcdH0vL0VORElGQVJHU1xuXHRcdFx0Ly8gRmluYWxseSByZXR1cm4gbWFwcGVkIGFyZ3VtZW50IGFycmF5O1xuXHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0fVxuXG5mdW5jdGlvbiBhdHRyT2JqZWN0aWZ5KGVsZSwgYXR0cix2YWx1ZSl7XG5cblx0XHQgaWYodmFsdWU9PT0ndmFsdWUnKSByZXR1cm4gJGltcGxlRXZlbnQucGFyc2VKU09OKGVsZS5nZXRBdHRyaWJ1dGUoYXR0cikpO1xuXG5cdFx0bGV0IG9iaj17XG5cdFx0XHRlbGVtZW50OmVsZSxcblx0XHRcdGF0dHJpYnV0ZTphdHRyLFxuXHRcdFx0IHZhbHVlOiRpbXBsZUV2ZW50LnBhcnNlSlNPTihlbGUuZ2V0QXR0cmlidXRlKGF0dHIpKSxcblx0XHRcdGdldCgpe1xuXHRcdFx0XHRyZXR1cm4gdGhpcy52YWx1ZTtcblx0XHRcdFx0Ly9yZXR1cm4gJGltcGxlRXZlbnQucGFyc2VKU09OKHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGUpKTtcblx0XHRcdH0sXG5cdFx0XHRzZXQodmFsdWUpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMuYXR0cmlidXRlLEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG5cdFx0XHRcdC8vIHRoaXMudmFsdWU9dmFsdWU7XG5cdFx0XHR9LFxuXHRcdFx0c2F2ZSgpe1xuXHRcdFx0XHR0aGlzLnNldCh0aGlzLnZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gY29uc29sZS5sb2cob2JqKVxuXHRcdHJldHVybiBvYmo7XG47XG5cdH1cdFxuXG5cdGZ1bmN0aW9uIGF0dHJpYnV0ZUhhbmRsZXIoZWxlLCAkYXJnKXtcblx0XHRcdGlmKGVsZS5oYXNBdHRyaWJ1dGUoJGFyZy5zcGxpdCgnLicpWzBdLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIChlLGEsYik9PiBhK1wiLVwiK2IudG9Mb3dlckNhc2UoKSkpKXtcblx0XHRcdFx0XHQgICBcdFx0cmV0dXJuIGF0dHJPYmplY3RpZnkoZWxlLCRhcmcuc3BsaXQoJy4nKVswXS5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAoZSxhLGIpPT4gYStcIi1cIitiLnRvTG93ZXJDYXNlKCkgKSwkYXJnLnNwbGl0KCcuJylbMV0pXG5cblx0XHRcdFx0XHQgICBcdH1lbHNlIGlmKGVsZS5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUdldCk9PT0kYXJnKXtcblx0XHRcdFx0XHRcdFx0XHRcdGxldCB2YWx1ZT0gZWxlLnZhbHVlP2VsZS52YWx1ZTplbGUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJGltcGxlRXZlbnQucGFyc2VKU09OKHZhbHVlKTtcblxuXHRcdFx0XHRcdFx0XHR9ZWxzZSBpZihlbGUuZ2V0QXR0cmlidXRlKFwibmFtZVwiKT09PSRhcmcpe1xuXHRcdFx0XHRcdFx0XHRcdGxldCB2YWx1ZT1lbGUudmFsdWU/ZWxlLnZhbHVlOmVsZS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJGltcGxlRXZlbnQucGFyc2VKU09OKHZhbHVlKTtcblx0XHRcdFx0XHRcdFx0fWVsc2UgaWYoJGFyZz09PVwidmFsdWVcIil7XG5cdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuICRpbXBsZUV2ZW50LnBhcnNlSlNPTihlbGUudmFsdWUpO1xuXHRcdFx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZygndW5hYmxlIHRvIGZpbmQgYXR0cmlidXRlOicrJGFyZysgXCIgaW4gXCIpXG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coIGVsZSlcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0XHRcdFx0fVxuXHR9XHRcdFx0XHRcdFx0XG4gIFx0XHRcdFx0XHRcdFxuICBcdFx0XHRcdFx0XHQiLCIvL0hhbmRsZSByZXR1cm5zIGZyb20gY2FsbGJhY2sgYW5kIGRlcGxveSB0aGUgZGF0YVxuLy8tLS0tc2NvcGUtLS1nbG9iYWwsIHBhcmVudC1ncmFuZHBhcmVudC1zZWxmXG4vLy0tLS0tLWRhdGF0eXBlLS0tLS0tLVxuXG4gZnVuY3Rpb24gYXBwZW5kRGF0YShlbCxkYXRhKXtcblxuIFx0aWYoIWVsLmhhc0F0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhQXBwZW5kKSkgZWwuaW5uZXJIVE1MPVwiXCI7XG4gXHRcbiBcdGlmKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZGF0YSA9PT0gJ251bWJlcicpe1xuIFx0XHRcbiBcdFx0ZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YSkpO1xuIFx0fWVsc2UgaWYoZGF0YS5ub2RlTmFtZSl7XG4gXHRcdGxldCBodG1sPSRpbXBsZUV2ZW50LnJlbmRlci5jbG9uZUVsZW1lbnQoZGF0YSk7XG4gXHRcdC8vJGltcGxlRXZlbnQuYmVmb3JlQXBwZW5kKClcbiBcdFx0ZWwuYXBwZW5kQ2hpbGQoaHRtbCk7XG4gXHRcdC8vU2ltcGxlRXZlbnQuYWZ0ZXJBcHBlbmQoKVxuIFx0XHQkaW1wbGVFdmVudC51cGRhdGUoaHRtbCk7XG4gIH1lbHNle1xuICBcdHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5cbiAgXG5cbi8vIH1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hbmFnZVJldHVybnMoZWwsJHJldHVybixib29sKXtcblxuLy9pZiBib29sPT09dHJ1ZSBqdXN0IHNlbnQgcmV0dXJuIHRvIHNlbGZcbi8vc2VsZiBjYW4gZW1iZWQgZWl0aGVyIHN0cmluZywgbnVtYmVyLCBodG1sIG9yIGFycmF5XG4gaWYodHlwZW9mICRyZXR1cm4gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiAkcmV0dXJuID09PSAnbnVtYmVyJyB8fCAkcmV0dXJuLm5vZGVOYW1lICl7XG4gIGlmKGJvb2w9PT10cnVlICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygkaW1wbGVFdmVudC5pbml0LiRjbGFzc05hbWUucmVwbGFjZSgnLicsXCJcIikpKXtcbiBcdCAgZWwuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkKT9mYWxzZTphcHBlbmREYXRhKGVsLCRyZXR1cm4pO1xuIFx0cmV0dXJuIDtcbiB9XG59XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdFxuLy9jYXNlLTE6IEhhbmRsZSBTdHJpbmcvbnVtYmVyL2h0bWxlbGVtZW50XG5pZih0eXBlb2YgJHJldHVybiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mICRyZXR1cm4gPT09ICdudW1iZXInIHx8ICRyZXR1cm4ubm9kZU5hbWUgKXtcblx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCRpbXBsZUV2ZW50LmluaXQuJGNsYXNzTmFtZSksZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0Ly9oYXMgW2RhdGEtZmVlZF0sIGl0cyB0aGVyZSBmb3Igb3RoZXIgcHVycG9zZSwgZXhpdFxuXHRcdFx0XHRcdGlmKGUuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkKSB8fCBlLmhhc0F0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhQ29tcG9uZW50KSl7IHJldHVybiBmYWxzZX07XG5cdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGFwcGVuZERhdGEoZSwkcmV0dXJuKTtcblx0XHRcdFx0XHRcdCBcdFx0XHRcdFxuXHRcdFx0XHRcdH0pOy8vRU9GT1Jcblx0cmV0dXJuIHRydWU7XG5cbn1cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0XG4vL2Nhc2UgLTI6IE9iamVjdCB7fVxuaWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRyZXR1cm4pID09PSAnW29iamVjdCBPYmplY3RdJyl7XG5cdC8vU2NvcGUxLiBnbG9iYWxcblx0aWYoJHJldHVybi5oYXNPd25Qcm9wZXJ0eSgnZ2xvYmFsJykgJiYgJHJldHVybi5nbG9iYWwpe1xuXHRcdC8veW91IGNhbiBzZXQgdGhlIGdsb2JhbCBzY29wZSBieSB1c2luZyAkaW1wbGVldmVudC5jb25maWcoJGdsb2JhbCxkb2N1bWVudC5ib2R5KVxuXHRcdCRpbXBsZUV2ZW50Lm1hbmFnZVJldHVybnMoJGltcGxlRXZlbnQuaW5pdC4kZ2xvYmFsLCRyZXR1cm4uZ2xvYmFsKTtcblx0fSBcblx0Ly9TY29wZTI6Z3JhbmQgcGFyZW50XG5cdGlmKCRyZXR1cm4uaGFzT3duUHJvcGVydHkoJ2dyYW5kUGFyZW50JykgJiYgJHJldHVybi5ncmFuZFBhcmVudCl7XG5cdFx0JGltcGxlRXZlbnQubWFuYWdlUmV0dXJucyhlbC5wYXJlbnROb2RlLnBhcmVudE5vZGUsJHJldHVybi5ncmFuZFBhcmVudCk7XG5cdFx0Ly9kZWxldGUgJHJldHVybi5ncmFuZFBhcmVudDtcblx0fVxuXHQvL1Njb3BlIDM6IHBhcmVudFxuXHRpZigkcmV0dXJuLmhhc093blByb3BlcnR5KCdwYXJlbnQnKSAmJiAkcmV0dXJuLnBhcmVudCl7XG5cdFx0XG5cdFx0JGltcGxlRXZlbnQubWFuYWdlUmV0dXJucyhlbC5wYXJlbnROb2RlLCRyZXR1cm4ucGFyZW50KTtcblx0fVxuXHQvL1Njb3BlIDQ6c2VsZlxuXHRpZigkcmV0dXJuLmhhc093blByb3BlcnR5KCdzZWxmJykgJiYgJHJldHVybi5zZWxmKXtcblx0XHQkaW1wbGVFdmVudC5tYW5hZ2VSZXR1cm5zKGVsLCRyZXR1cm4uc2VsZik7XG5cdFx0Ly9kZWxldGUgJHJldHVybi5zZWxmO1xuXHR9XG5cblxuXHQvL3Njb3BlIDU6IHNlbGYgd2l0aCB7a2V5OnZhbHVlfVxuXG5cdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgkaW1wbGVFdmVudC5pbml0LiRjbGFzc05hbWUrXCJbXCIrJGltcGxlRXZlbnQuaW5pdC4kZGF0YUZlZWQrXCJdXCIpLGZ1bmN0aW9uKGUpe1xuXHRcdFx0XG5cdFx0XHRcdFx0XHRcdGxldCBrZXk9ZS5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUZlZWQpLnRyaW0oKTtcblx0XHRcdFx0XHRcdFx0bGV0IHZhbHVlPW51bGw7XG5cdFx0XHRcdFx0XHRcdGlmKGtleSl7XG5cdFx0XHRcdFx0XHRcdFx0Ly9oYW5kbGUgbmVzdGVkIGtleXMgaS5lIGRhdGEucGVyc29uLm5hbWUuZmlyc3RuYW1lXG5cdFx0XHRcdFx0XHRcdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0XHRcdFx0XHRcdGxldCBmZWVkPWtleS5zcGxpdCgnLicpO1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly9pZiByZXR1cm4gaGFzIG5vIGtleVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoISAkcmV0dXJuLmhhc093blByb3BlcnR5KGZlZWRbMF0pKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHQvL1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYoZmVlZC5sZW5ndGgpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZihmZWVkLmxlbmd0aD09MSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU9ICRyZXR1cm5ba2V5XTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fWVsc2UgaWYoZmVlZC5sZW5ndGg+MSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGV0IHJlc3VsdD0kcmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZvcih2YXIgaj0wOyBqPGZlZWQubGVuZ3RoOyBqKyspe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYocmVzdWx0W2ZlZWRbal1dKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0PXJlc3VsdFtmZWVkW2pdXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiQ2Fubm90IGZpbmQ6XCIgKyBrZXkgKyBcIiBpbiAgdGhlIHJldHVybiBcIiArSlNPTi5zdHJpbmdpZnkoJHJldHVybikpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU9cmVzdWx0O1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0aWYodmFsdWUpe1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYoYXBwZW5kRGF0YShlLHZhbHVlKT09PWZhbHNlKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIk9ubHkgU3RyaW5nICwgTnVtYmVyIGFuZCBIdG1sIEVsZW1lbnQgIGNhbiBiZSBlbWJlZGVkOyBDYW5ub3QgZW1iZWQgXCIrdmFsdWUgKyBcImZvciBcIitrZXkgKyBcImluIDogXCIrIGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSsgXCIgSHRtbCBFbGVtZW50XCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhlKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdCB9Ly9FbmQgb2YgVmFsdWVcblx0XHRcdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiTWFrZSBzdXJlIHlvdSBoYXZlIDpcIiArICRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkICsgXCIgYXR0cmlidXRlIHRvIGhhbmRsZSBnaXZlbiByZXR1cm5cIiArICRyZXR1cm4gKVxuXHRcdFx0XHRcdFx0XHR9Ly9lbmQgb2Yga2V5XG5cdFx0XHRcdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHRcblx0XHQgfSk7Ly9FTkRPRkZPUkVBQ0hMT09wXG5cblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tdGhpcyBpcyBsYXN0IGJlY2F1c2UgaXQgbmVlZCBvdCBvdmVyd3JpdGUgYW55IG90aGVyIHJldHVyblxuXHQvL1Njb3BlIDY6cmV0dXJuVG8gc3BlZGlmaWMgZWxlbWVudCBcblx0aWYoJHJldHVybi5oYXNPd25Qcm9wZXJ0eSgncmV0dXJuVG8nKSAmJiAkcmV0dXJuLnJldHVyblRvKXtcblx0XHQvL3JldHVyblRvIGJ5ZGVmYXVsdCBcImVsXCIga2V5IGlzIHVzZWQgdG8gZmluZCBlbGVtZW50LCBidXQgeW91IGNhbiBjaGFuZ2UgYnkgJGltcGxlRXZlbnQuY29uZmlnKFwiJHJldHVyblRvXCIsXCJlbGVtZW50XCIpO1xuXHRcdGlmKCRyZXR1cm4ucmV0dXJuVG9bJGltcGxlRXZlbnQuaW5pdC4kcmV0dXJuVG9dICYmICAkcmV0dXJuLnJldHVyblRvWyRpbXBsZUV2ZW50LmluaXQuJHJldHVyblRvXS5ub2RlTmFtZSl7XG5cdFx0XHQkaW1wbGVFdmVudC5tYW5hZ2VSZXR1cm5zKCRyZXR1cm4ucmV0dXJuVG9bJGltcGxlRXZlbnQuaW5pdC4kcmV0dXJuVG9dLCRyZXR1cm4ucmV0dXJuVG8uZGF0YSwgdHJ1ZSk7XG5cdFx0fWVsc2V7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRXJyb3JAcmV0dXJuVG8gOiBFbGVtZW50IG5vdCBmb3VuZDpQbGVhc2UgZ2l2ZSByZXR1cm5Uby5cIiskaW1wbGVFdmVudC5pbml0LiRyZXR1cm5UbyArIFwiIGEgdmFsaWQgaHRtbCBlbGVtZW50XCIpO1xuXHRcdH1cdFxuXHR9XG5cdC8vcmV0dXJuVG9NYW55IFxuXHRpZigkcmV0dXJuLmhhc093blByb3BlcnR5KCdyZXR1cm5Ub01hbnknKSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoJHJldHVybi5yZXR1cm5Ub01hbnkpID09PSAnW29iamVjdCBBcnJheV0nKXtcblxuXHRcdCRyZXR1cm4ucmV0dXJuVG9NYW55LmZvckVhY2goKGUsaSk9Pntcblx0XHQgaWYoZVskaW1wbGVFdmVudC5pbml0LiRyZXR1cm5Ub10gJiYgIGVbJGltcGxlRXZlbnQuaW5pdC4kcmV0dXJuVG9dLm5vZGVOYW1lKXtcblx0XHQgXHQkaW1wbGVFdmVudC5tYW5hZ2VSZXR1cm5zKGVbJGltcGxlRXZlbnQuaW5pdC4kcmV0dXJuVG9dLGUuZGF0YSx0cnVlKTtcblx0XHQgfWVsc2V7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRXJyb3JAcmV0dXJuVG9NYW55IDogRWxlbWVudCBub3QgZm91bmQgQCBhcnJheS1pbmRleCBcIiAraStcIjpQbGVhc2UgZ2l2ZSBcIiskaW1wbGVFdmVudC5pbml0LiRyZXR1cm5UbyArIFwiIGEgdmFsaWQgaHRtbCBlbGVtZW50IGF0IGluZGV4IFwiKyBpKTtcblx0XHRcdH1cdFxuXHRcdCBcblx0XHR9KVxuXHR9XG5cblx0cmV0dXJuO1xuXG59Ly9FT09CSkVDVENBU0UyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdFxuXG5cbi8vY2FzZSAtMzogQXJyYXkvLyRpbXBsZUV2ZW50LmluaXQuJGRhdGFDb21wb25lbnQgaG9sZHMgcXVlcnkgc2VsZWN0b3IgZS5nICNsaSBcblxuaWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRyZXR1cm4pID09PSAnW29iamVjdCBBcnJheV0nKXtcblxuXHRpZihib29sPT10cnVlKXtcblx0XHRcblx0XHRsZXQgdGVtcGxhdGVFbGVtZW50PW51bGw7Ly90ZW1wbGF0ZVxuXHRcdGlmKGVsLmhhc0F0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhVGVtcGxhdGUpKXtcblx0XHRcdGxldCBodG1sVGVtcGxhdGU9ZWwuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFUZW1wbGF0ZSk7XG5cdFx0XHR0ZW1wbGF0ZUVsZW1lbnQ9JGltcGxlRXZlbnQuaHRtbChodG1sVGVtcGxhdGUpO1xuXG5cdFx0fWVsc2UgaWYoZWwuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFDb21wb25lbnQpKXtcblx0XHRcdGxldCB0ZW1wbGF0ZVNvdXJjZT1lbC5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUNvbXBvbmVudCk7XG5cdFx0XHR0ZW1wbGF0ZUVsZW1lbnQ9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0ZW1wbGF0ZVNvdXJjZSk7XHRcblx0XHR9XG5cblx0XHRpZih0ZW1wbGF0ZUVsZW1lbnQgJiYgdGVtcGxhdGVFbGVtZW50Lm5vZGVOYW1lKXtcblx0XHRcdGlmKCFlbC5oYXNBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUFwcGVuZCkpe1xuXHRcdFx0XHRcdGVsLmlubmVySFRNTD1cIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHRhcHBlbmRBcnJheShlbCwkcmV0dXJuLHRlbXBsYXRlRWxlbWVudCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0XG5cdH1cblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tb2xkLS0tLS0tXG5cdC8vaWYgZWxlbWVudCBoYXMgY29tcG9uZW50IGFzIHRlbWxhdGVcblx0Ly9jYXNlIGlmIGVsZW10IGhhdmUgZGF0YS10ZW1wbGF0ZVxuXHRsZXQgdGVtcGxhdGVFbGVtZW50PW51bGw7Ly90ZW1wbGF0ZVxuXHRsZXQgZT1udWxsO1xuXHRpZihlbC5xdWVyeVNlbGVjdG9yKCdbJyskaW1wbGVFdmVudC5pbml0LiRkYXRhVGVtcGxhdGUrJ10nKSl7XG5cdFx0bGV0IGh0bWxUZW1wbGF0ZT1lbC5xdWVyeVNlbGVjdG9yKCdbJyskaW1wbGVFdmVudC5pbml0LiRkYXRhVGVtcGxhdGUrJ10nKS5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YVRlbXBsYXRlKTtcblx0XHR0ZW1wbGF0ZUVsZW1lbnQ9JGltcGxlRXZlbnQuaHRtbChodG1sVGVtcGxhdGUpO1xuXHRcdGlmKCF0ZW1wbGF0ZUVsZW1lbnQpe1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlBsZWFzZSBwcm92aWRlIHZhbGlkIGh0bWwgRWxlbWVudCBlLmcgPGxpPjwvbGk+OyAgUHJvdmlkZWQgOi1cIiAraHRtbFRlbXBsYXRlICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGU9ZWwucXVlcnlTZWxlY3RvcignWycrJGltcGxlRXZlbnQuaW5pdC4kZGF0YVRlbXBsYXRlKyddJyk7XG5cdH1lbHNlIGlmKGVsLnF1ZXJ5U2VsZWN0b3IoJ1snKyRpbXBsZUV2ZW50LmluaXQuJGRhdGFDb21wb25lbnQrJ10nKSl7XG5cdFx0bGV0IHRlbXBsYXRlU291cmNlPWVsLnF1ZXJ5U2VsZWN0b3IoJ1snKyRpbXBsZUV2ZW50LmluaXQuJGRhdGFDb21wb25lbnQrJ10nKS5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUNvbXBvbmVudCk7XG5cdFx0dGVtcGxhdGVFbGVtZW50PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGVtcGxhdGVTb3VyY2UpO1xuXHRcdGlmKCF0ZW1wbGF0ZUVsZW1lbnQpe1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlBsZWFzZSBwcm92aWRlIHZhbGlkIHF1ZXJ5U2VsZWN0b3I6ICBQcm92aWRlZCA6LVwiICt0ZW1wbGF0ZVNvdXJjZSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGU9ZWwucXVlcnlTZWxlY3RvcignWycrJGltcGxlRXZlbnQuaW5pdC4kZGF0YUNvbXBvbmVudCsnXScpO1xuXHR9ZWxzZSBpZihlbC5xdWVyeVNlbGVjdG9yKCdbJyskaW1wbGVFdmVudC5pbml0LiRkYXRhRm9yRWFjaCsnXScpKXtcblx0XHRlPWVsLnF1ZXJ5U2VsZWN0b3IoJ1snKyRpbXBsZUV2ZW50LmluaXQuJGRhdGFGb3JFYWNoKyddJykucGFyZW50Tm9kZTtcblx0XHR0ZW1wbGF0ZUVsZW1lbnQ9ZWwucXVlcnlTZWxlY3RvcignWycrJGltcGxlRXZlbnQuaW5pdC4kZGF0YUZvckVhY2grJ10nKTtcblx0XHRcblxuXHR9ZWxzZXtcblx0XHQvL05lZWQgZGF0YS10ZW1wbGF0ZSBvciBkYXRhLWNvbXBvbmVudFxuXHRcdGNvbnNvbGUuaW5mbyhcIkFycmF5IHJldHVybnMgbmVlZCBbXCIrJGltcGxlRXZlbnQuaW5pdC4kZGF0YVRlbXBsYXRlK1wiXSBvciBbXCIrJGltcGxlRXZlbnQuaW5pdC4kZGF0YUNvbXBvbmVudCtcIl0gaG9sZGVyOiBObyBzdWNoIGhvbGRlciBmb3VuZCBcIik7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0XG5cdFx0XHRcdGlmKCFlLmhhc0F0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhQXBwZW5kKSl7XG5cdFx0XHRcdFx0ZS5pbm5lckhUTUw9XCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL2xvb3BzIGl0ZW0gYW5kIGFwcGVuZHNcblx0XHRcdFx0YXBwZW5kQXJyYXkoZSwkcmV0dXJuLHRlbXBsYXRlRWxlbWVudCk7XG5cblx0XHRcdFx0XG5cdFx0XG5cdH0vL0VORE9GLU9iamVjdC10eXBlLUFycmF5XG5cblx0XG5cbn0vL0VPbWFuYWdlUkVUVVJOU1xuXG5cblxuZnVuY3Rpb24gYXBwZW5kQXJyYXkoZWwsJHJldHVybix0ZW1wbGF0ZSl7XG5cdFx0ICBmb3IodmFyIGk9MDsgaTwkcmV0dXJuLmxlbmd0aDtpKyspe1xuXHRcdFx0XHRcdGxldCBjbG9uZUNvbXBvbmVudD0kaW1wbGVFdmVudC5yZW5kZXIuY2xvbmVFbGVtZW50KHRlbXBsYXRlKTtcblx0XHRcdFx0XHQvL2dpdmluZyBjbG9uZSBlbGVtZW50IHVuaXF1ZSBpZFxuXHRcdFx0XHRcdGlmKGNsb25lQ29tcG9uZW50LmlkKSBjbG9uZUNvbXBvbmVudC5pZD1jbG9uZUNvbXBvbmVudC5pZCtcIl9cIitpO1xuXHRcdFx0XHRcdGNsb25lQ29tcG9uZW50LnNldEF0dHJpYnV0ZShcImluZGV4XCIsIGkpO1xuXHRcdFx0XHRcdGVsLmFwcGVuZENoaWxkKGNsb25lQ29tcG9uZW50KTtcblx0XHRcdFx0XHQvL2NoZWNrIGlmIGl0cyBzdGFuZGxvbmUgaS5lIHNpbmdsZSBlbGVtZW50IHdpdGhvdXQgY2hpbGRzIGUuZyA8bGkgaWQ9XCJsaVwiIGNsYXNzPVwicmV0dXJuXCI+PC9saT5cblx0XHRcdFx0XHRpZighY2xvbmVDb21wb25lbnQuY2hpbGRFbGVtZW50Q291bnQpe1xuXHRcdFx0XHRcdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0XHRcdFx0aWYodHlwZW9mICRyZXR1cm5baV0gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiAkcmV0dXJuW2ldID09PSAnbnVtYmVyJyB8fCAkcmV0dXJuW2ldLm5vZGVOYW1lICl7XG5cdFx0XHRcdFx0XHRcdGlmKGNsb25lQ29tcG9uZW50Lmhhc0F0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhRmVlZCkpeyByZXR1cm4gZmFsc2V9O1xuXG5cdFx0XHRcdFx0XHRcdGFwcGVuZERhdGEoY2xvbmVDb21wb25lbnQsJHJldHVybltpXSk7XHRcblxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdCRpbXBsZUV2ZW50Lm1hbmFnZVJldHVybnMoY2xvbmVDb21wb25lbnQsJHJldHVybltpXSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0JGltcGxlRXZlbnQudXBkYXRlKGNsb25lQ29tcG9uZW50KTtcblx0XHRcdFx0fS8vZW5kIG9mIGZvciBsb29wXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsImV4cG9ydCBsZXQgY29yZT17XG4vLy0tLS0tLS0tLS0tLS0tLWRldmVsb3BlciBhbmQgZGVidWdcblx0bG9nOmZ1bmN0aW9uKGluZm8pe1xuXHRcdGNvbnNvbGUubG9nKGluZm8pO1xuXHR9LFxuXHRsb2dFdmVudDpmdW5jdGlvbihldmVudCl7XG5cdFx0Y29uc29sZS5sb2coZXZlbnQudHlwZSxcIlxcblwiLGV2ZW50KTtcblx0fSxcblx0bG9nRnVuYzpmdW5jdGlvbihjYWxsYmFja05hbWUsYXJnMSxhcmcyLGFyZzMsYXJnNCxhcmc1KXtcblx0XHRjYWxsYmFja05hbWU9Y2FsbGJhY2tOYW1lLnRyaW0oKTtcblx0XHRpZigkaW1wbGVFdmVudC5jYWxsYmFja3MuaGFzT3duUHJvcGVydHkoY2FsbGJhY2tOYW1lKSl7XG5cdFx0XHRjb25zb2xlLmxvZygkaW1wbGVFdmVudC5jYWxsYmFja3NbY2FsbGJhY2tOYW1lXShldmVudCxhcmcxLGFyZzIsYXJnMyxhcmc0LGFyZzUpKTtcblx0XHR9ZWxzZSBpZihjb3JlLmhhc093blByb3BlcnR5KGNhbGxiYWNrTmFtZSkpe1xuXHRcdFx0Y29uc29sZS5sb2coY29yZVtjYWxsYmFja05hbWVdKGV2ZW50LGFyZzEsYXJnMixhcmczLGFyZzQsYXJnNSkpO1xuXHRcdH1cblx0XHRcblx0XHRcblx0fSxcblx0cmV0dXJuOmZ1bmN0aW9uKGEsYixlKXtcblx0XHRpZihpc0Zpbml0ZShlKSl7XG5cdFx0XHQvL2EgaXMgdGltZVxuXHRcdFx0YT1iO1xuXHRcdFx0ZT17dHlwZTpcImludGVydmFsL3RpbWVvdXRcIn07XG5cdFx0fVxuXG5cdFx0aWYoYSl7XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9ZWxzZXtcblxuXHRcdFx0Y29uc29sZS53YXJuKFwiUmV0dXJuaW5nIGVtcHR5IHN0cmluZyAgb24gXCIgKyBlLnR5cGUpO1xuXHRcdFx0cmV0dXJuIFwiIFwiO1xuXHRcdH1cblx0XHRcblx0fSxcblx0cmV0dXJuVG86ZnVuY3Rpb24oaWQsYSxiLGUpe1xuXHRcdFxuXHRcdGlmKGlzRmluaXRlKGUpKXtcblx0XHRcdC8vYSBpcyB0aW1lXG5cdFx0XHRpZD1hO1xuXHRcdFx0YT1iO1xuXHRcdFx0ZT17dHlwZTpcImludGVydmFsL3RpbWVvdXRcIn07XG5cblx0XHR9XG5cdFx0aWYoIGEgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKXtcblx0XHRcdGE9YS5yZXBsYWNlKC9cXC9zL2csXCIgXCIpLnRyaW0oKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHJldHVyblRvOntcblx0XHRcdFx0XHRlbDpkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksXG5cdFx0XHRcdFx0ZGF0YTphXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ZWxzZXtcblx0XHRcdGNvbnNvbGUud2FybihcIlJldHVybmluZyBlbXB0eSBzdHJpbmcgIG9uIFwiICsgZS50eXBlKTtcblx0XHRcdHJldHVybiBcIiBcIjtcblx0XHR9XG5cblx0fSxcblx0Ly9vbmV2ZW50IHdoZW4gY2FsbGluZyB0aW1lb3V0IGZ1bmN0aW9uIFxuXHR0aW1lb3V0OmZ1bmN0aW9uKGEsYixlKXtcblx0XHRcdGlmKCFpc0Zpbml0ZShiKSl7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwicGxlYXNlIFByb3ZpZGUgVGltZSBpbiBtczsgZm9yIHRpbWVvdXQgZnVuY3Rpb25cIik7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZigkaW1wbGVFdmVudC5jb3JlLmhhc093blByb3BlcnR5KGEpKXtcblx0XHRcdFx0bGV0IHRpbWVyPXNldFRpbWVvdXQoJGltcGxlRXZlbnQuY29yZVthXS5iaW5kKHRoaXMpLCBiKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0fWVsc2UgaWYoJGltcGxlRXZlbnQuY2FsbGJhY2tzLmhhc093blByb3BlcnR5KGEpKXtcblx0XHRcdFx0XHRsZXQgdGltZXI9c2V0VGltZW91dCgkaW1wbGVFdmVudC5jYWxsYmFja3NbYV0uYmluZCh0aGlzLFt0aW1lcixiXSksIGUpO1xuXHRcdFx0XHRcdFxuXG5cdFx0XHRcdC8vY2FzZSAzOiBubyBjYWxsYmFjayBpcyBkZWZpbmVcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkNhbid0IEZvdW5kIE1ldGhvZDpcIithK1wiICxQbGVhc2UgUmVnaXN0ZXIgZXZlbnQgaGFuZGxlciB1c2luZyAnJGltcGxlRXZlbnQuYWRkKCknIG1ldGhvZD9cIik7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRcdH1cdFxuXG5cblx0XHR9LFxuXG5cdFx0aW50ZXJ2YWw6ZnVuY3Rpb24oYSxiLGUpe1xuXHRcdFx0aWYoIWlzRmluaXRlKGIpKXtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJwbGVhc2UgUHJvdmlkZSBUaW1lIGluIG1zOyBmb3IgaW50ZXJ2YWwgZnVuY3Rpb25cIik7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXHRcdFx0aWYoJGltcGxlRXZlbnQuY29yZS5oYXNPd25Qcm9wZXJ0eShhKSl7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwid293XCIpO1xuXHRcdFx0XHRsZXQgaW50ZXJ2YWw9c2V0SW50ZXJ2YWwoJGltcGxlRXZlbnQuY29yZVthXS5iaW5kKHRoaXMsW2ludGVydmFsLGJdKSwgZSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1lbHNlIGlmKCRpbXBsZUV2ZW50LmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShhKSl7XG5cdFx0XHRcdFx0bGV0IGludGVydmFsPXNldEludGVydmFsKCRpbXBsZUV2ZW50LmNhbGxiYWNrc1thXS5iaW5kKHRoaXMsW2ludGVydmFsLGJdKSwgZSk7XG5cdFx0XHRcdFx0XG5cblx0XHRcdFx0Ly9jYXNlIDM6IG5vIGNhbGxiYWNrIGlzIGRlZmluZVxuXHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiQ2FuJ3QgRm91bmQgTWV0aG9kOlwiK2ErXCIgLFBsZWFzZSBSZWdpc3RlciBldmVudCBoYW5kbGVyIHVzaW5nICckaW1wbGVFdmVudC5hZGQoKScgbWV0aG9kP1wiKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVx0XG5cblxuXHRcdH0sXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRjbG9zZTpmdW5jdGlvbihlbGUsYm9vbCl7XG5cdFx0bGV0IGVsPWlkLm5vZGVUeXBlP2lkOihpZD09XCJwYXJlbnRcIik/dGhpcy5wYXJlbnROb2RlOmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblx0XHRpZihlbCl7XG5cdFx0XHRpZihlbC5zdHlsZS5kaXNwbGF5PT1cIm5vbmVcIikge3JldHVybiBmYWxzZX07XG5cblx0XHRcdGlmKGJvb2w9PT10cnVlKXtcblx0XHRcdFx0bGV0IHJlc3VsdD1jb25maXJtKCdBcmUgeW91IHN1cmUgd2FudCB0byBjbG9zZT8nKTtcblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiByZXN1bHQ/KGVsLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpOmZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0ZWwuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtcblx0XHR9ZWxzZXtcblx0XHRcdGNvbnNvbGUud2FybihcImNsb3NlIGVycm9yOi1DYW5ub3QgRmluZCBFbGVtZW50IHdpdGggaWQ6XCIraWQpO1xuXHRcdH1cblxuXHR9LFxuXHRvcGVuQ2xvc2U6ZnVuY3Rpb24oaWQsYm9vbCl7XG5cdFx0bGV0IGVsPWlkLm5vZGVUeXBlP2lkOihpZD09XCJwYXJlbnRcIik/dGhpcy5wYXJlbnROb2RlOmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblx0XHRpZihlbCl7XG5cdFx0XHRpZihlbC5zdHlsZS5kaXNwbGF5PT1cIm5vbmVcIikge1xuXHRcdFx0XHRlbC5zdHlsZS5kaXNwbGF5PVwiaW5pdGlhbFwiO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2V9O1xuXG5cdFx0XHRpZihib29sPT09dHJ1ZSl7XG5cdFx0XHRcdGxldCByZXN1bHQ9Y29uZmlybSgnQXJlIHlvdSBzdXJlIHdhbnQgdG8gY2xvc2U/Jyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0PyhlbC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiKTpmYWxzZTtcblx0XHRcdH1cblx0XHRcdGVsLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7XG5cdFx0fWVsc2V7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJvcGVuQ2xvc2UgZXJyb3I6LUNhbm5vdCBGaW5kIEVsZW1lbnQgdG8gY2xvc2U6XCIraWQpO1xuXHRcdH1cblxuXHR9LFxuXHRcblxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1jb3JlLS0tLS0tLVxuXHR0eXBld3JpdGVyOmZ1bmN0aW9uKGEsYil7XG5cdFx0XHQvL2lmIGE9PT10cnVlIHRoZSBjaG5hZ2UgZXZlbnQgdG8ga2V5dXBcblx0XHQvL2lmKHRoaXMuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFHZXQpKXtcblx0XHRcdFxuXG5cdFx0XHRcdFx0Ly8gbGV0IGxhYmVsPSRpbXBsZUV2ZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLHtzdHlsZTpcImZvbnQtd2VpZ2h0OmJvbGQ7bWFyZ2luOjBweCA1cHg7YmFja2dyb3VuZDojY2NjXCIsfSk7XG5cdFx0XHRcdFx0bGV0IGlucHV0PSRpbXBsZUV2ZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLHtcblx0XHRcdFx0XHRcdHN0eWxlOlwib3V0bGluZTpub25lOyBib3JkZXI6bm9uZTtmb250LXN0eWxlOml0YWxpYztwYWRkaW5nOjBweDttYXJnaW46MHB4O3dpZHRoOjFyZW07Zm9udDppbmhlcml0O1wiLFxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI6XCJUeXBlV3JpdGVyXCJcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHQvLyBsYWJlbC5pbm5lclRleHQ9dGhpcy5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUdldCk7XG5cdFx0XHRcdFx0Ly8gaW5wdXQudmFsdWU9dGhpcy5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcblxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFxuXHRcdFx0XG5cdFx0XHRsZXQgX3RoaXM9dGhpcztcblx0XHRcdC8vY29uc29sZS5sb2codGhpcyk7XG5cdFx0XHRpbnB1dC5vbmNsaWNrPWZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1x0XG5cdFx0XHR9O1xuXHRcdFx0XHRcdFx0XG5cdFx0XHQgdGhpcy5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCI7XG5cdFx0XHQgXG5cdFx0XHQgaW5wdXQudmFsdWU9dGhpcy52YWx1ZT90aGlzLnZhbHVlOnRoaXMuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XG5cblx0XHRcdHRoaXMuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuXHRcdFx0XG5cdFx0XHRcdGlucHV0Lm9ua2V5dXA9ZnVuY3Rpb24oZXYpe1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGV2LndoaWNoPT04KXtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHRoaXMucHJldmlvdXNTaWJsaW5nKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdC8vfVxuXHRcdFx0XHRfdGhpcy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpO1xuXHRcdFx0XHQkaW1wbGVFdmVudC5tYW5hZ2VSZXR1cm5zKF90aGlzLHRoaXMudmFsdWUsdHJ1ZSk7XG5cdFx0XHRcdGlucHV0LnZhbHVlPVwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdGlucHV0Lm9uY2hhbmdlPWZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnB1dCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5wdXQub25ibHVyPWZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnB1dCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5wdXQuZm9jdXMoKTtcblx0XHQvL31cblx0XHRcblx0XG5cblx0fSxcblx0XG5cdGRhdGFDaGFuZ2VyOmZ1bmN0aW9uKGEsYil7XG5cdFx0XHQvL2lmIGE9PT10cnVlIHRoZSBjaG5hZ2UgZXZlbnQgdG8ga2V5dXBcblx0XHRpZih0aGlzLmhhc0F0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhR2V0KSl7XG5cdFx0XHRcblx0XHRcdFx0bGV0IGZvcm09JGltcGxlRXZlbnQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG5cdFx0XHRcdHN0eWxlOlwicGFkZGluZzo1cHg7Ym9yZGVyOjFweCBzb2xpZCAjY2NjO2JhY2tncm91bmQ6I2NjYztib3JkZXItcmFkaXVzOjVweDtwb3N0aW9uOmFic29sdXRlO3otaW5kZXg6MTIzNDU2Nzg5OTg2NTQ7XCJcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0bGV0IGxhYmVsPSRpbXBsZUV2ZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLHtzdHlsZTpcImZvbnQtd2VpZ2h0OmJvbGQ7bWFyZ2luOjBweCA1cHg7YmFja2dyb3VuZDojY2NjXCIsfSk7XG5cdFx0XHRcdFx0bGV0IGlucHV0PSRpbXBsZUV2ZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLHtzdHlsZTpcIm91dGxpbmU6bm9uZTsgYm9yZGVyOm5vbmU7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2VlZTtcIn0pO1xuXHRcdFx0XHRcdGxhYmVsLmlubmVyVGV4dD10aGlzLmdldEF0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhR2V0KTtcblx0XHRcdFx0XHRpbnB1dC52YWx1ZT10aGlzLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpO1xuXG5cdFx0XHRcdFx0Zm9ybS5hcHBlbmRDaGlsZChsYWJlbCk7XG5cdFx0XHRcdFx0Zm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7XG5cdFx0XHRcdFx0Zm9ybS5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCI7XG5cdFx0XHRcdFx0Zm9ybS5zdHlsZS56SW5kZXg9MTIzNDU2Nzg5ODc2NjQ0O1xuXHRcdFx0XHRcdGZvcm0uc3R5bGUudG9wPVwiMTAwJVwiO1xuXHRcdFx0XHRcdGZvcm0uc3R5bGUub3BhY2l0eT1cIjAuOVwiO1xuXHRcdFx0XHRcdC8ve2Zvcm06Zm9ybSxsYWJlbDpsYWJlbCxpbnB1dDppbnB1dH07XG5cdFx0XHRcblx0XHRcdGxldCBfdGhpcz10aGlzO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyh0aGlzKTtcblx0XHRcdGZvcm0ub25jbGljaz1mdW5jdGlvbihlKXtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcdFxuXHRcdFx0fTtcblx0XHRcdFx0XHRcdCAvL1xuXHRcdFx0IHRoaXMuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiO1xuXHRcdFx0IGxhYmVsLmlubmVyVGV4dD10aGlzLmdldEF0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhR2V0KTtcblx0XHRcdCBpbnB1dC52YWx1ZT10aGlzLnZhbHVlP3RoaXMudmFsdWU6dGhpcy5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcblxuXHRcdFx0dGhpcy5hcHBlbmRDaGlsZChmb3JtKTtcblx0XHRcdGlmKGE9PT10cnVlKXtcblx0XHRcdFx0aW5wdXQub25rZXl1cD1mdW5jdGlvbigpe1xuXHRcdFx0XHRcblx0XHRcdFx0X3RoaXMuc2V0QXR0cmlidXRlKFwidmFsdWVcIix0aGlzLnZhbHVlKTtcblx0XHRcdFx0JGltcGxlRXZlbnQubWFuYWdlUmV0dXJucyhfdGhpcyx0aGlzLnZhbHVlKVxuXG5cdFx0XHRcdGlucHV0Lm9uY2hhbmdlPWZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0Zm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGZvcm0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XG5cdFx0XHR9XG5cdFx0fWVsc2V7XG5cblx0XHRcblx0XHRcdGlucHV0Lm9uY2hhbmdlPWZ1bmN0aW9uKCl7XG5cdFx0XHRcdFxuXHRcdFx0XHRfdGhpcy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLHRoaXMudmFsdWUpO1xuXHRcdFx0XHQkaW1wbGVFdmVudC5tYW5hZ2VSZXR1cm5zKF90aGlzLHRoaXMudmFsdWUpXG5cblx0XHRcdFx0Zm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGZvcm0pO1xuXG5cdFx0XHRcdC8vcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XG5cdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHR9LFxuXHRjYXJvdXNlbDpmdW5jdGlvbihhLGIpe1xuXHRcdGxldCBpbWFnZXM9dGhpcy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImltZ1wiKTtcblx0XHRpZighdGhpcy5oYXNBdHRyaWJ1dGUoXCJpbmRleFwiKSl7dGhpcy5zZXRBdHRyaWJ1dGUoXCJpbmRleFwiLDApO31cblx0XHRsZXQgaW5kZXg9cGFyc2VJbnQodGhpcy5nZXRBdHRyaWJ1dGUoJ2luZGV4JykpO1xuXG5cdFx0Zm9yKGxldCBpPTA7aTxpbWFnZXMubGVuZ3RoO2krKyl7XG5cdFx0XHRpbWFnZXNbaV0uc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtcblx0XHR9XG5cblx0XHRpbmRleCsrO1xuXHRcdGlmKGluZGV4PmltYWdlcy5sZW5ndGgpe2luZGV4PTF9XG5cdFx0XHRpbWFnZXNbaW5kZXgtMV0uc3R5bGUuZGlzcGxheT1cImJsb2NrXCI7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoXCJpbmRleFwiLGluZGV4KTtcblx0XHQgICAgXG5cdH0sXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1jbGFzcy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRhZGRDbGFzc05hbWU6ZnVuY3Rpb24oYSxpZCl7XG5cdFx0bGV0IGVsPWlkLm5vZGVUeXBlP2lkOihpZD09XCJwYXJlbnRcIik/dGhpcy5wYXJlbnROb2RlOmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblx0XHRsZXQgZWxlPXRoaXM7XG5cdFx0aWYoaWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKXtcblx0XHRcdGVsZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cdFx0fVxuXHRcdC8vIGlmKEFycmF5LmlzQXJyYXkoYSkpeyBhLn1cblx0XHRlbGUuY2xhc3NMaXN0LmFkZChhKTtcblxuXG5cdH0sXG5cdHJlbW92ZUNsYXNzTmFtZTpmdW5jdGlvbihhLGlkKXtcblx0XHRsZXQgZWxlPXRoaXM7XG5cdFx0aWYoaWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKXtcblx0XHRcdGVsZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cdFx0fVxuXHRcdGVsZS5jbGFzc0xpc3QucmVtb3ZlKGEpO1xuXHR9LFxuXHR0b2dnbGVDbGFzc05hbWU6ZnVuY3Rpb24oYSxpZCl7XG5cdFx0bGV0IGVsZT10aGlzO1xuXHRcdGlmKGlkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSl7XG5cdFx0XHRlbGU9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXHRcdH1cblx0XHRlbGUuY2xhc3NMaXN0LnRvZ2dsZShhKTtcblx0fSxcblx0XG5cdGNzczpmdW5jdGlvbihwcm9wZXJ0eSx2YWx1ZSxpZCxlKXtcblx0XHR0aGlzLnN0eWxlLnRyYW5zaXRpb249XCJhbGwgMC4zNXNcIjtcblx0XHRpZihhcmd1bWVudHMubGVuZ3RoPT0zKXtcblx0XHRcdHRoaXMuc3R5bGVbcHJvcGVydHldPXZhbHVlO1xuXG5cdFx0fWVsc2UgaWYoYXJndW1lbnRzLmxlbmd0aD00ICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSl7XG5cdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuc3R5bGUudHJhbnNpdGlvbj1cImFsbCAwLjM1c1wiO1xuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnN0eWxlW3Byb3BlcnR5XT12YWx1ZTtcblxuXHRcdH1lbHNle1xuXHRcdFx0Y29uc29sZS53YXJuKFwiU29tZXRoaW5nIFdyb25nIHdpdGggYXJndW1lbnRzIHlvdSBwcm92aWRlZCwgdW5hYmxlIHRvIGFwcHkgc3R5bGUvY3NzIG9uIFwiICsgZS50eXBlKTtcblx0XHR9XG5cblx0fSxcblx0XG5cdFx0dmFsaWRhdGU6e1xuXHRcdFx0ZW1haWw6e1xuXHRcdFx0XHR0ZXN0Oi9eKFthLXpBLVowLTlfXFwtXFwuXSspQChbYS16QS1aMC05X1xcLVxcLl0rKVxcLihbYS16QS1aXXsyLDV9KSQvLFxuXHRcdFx0XHRzdWNjZXNzOlwiWW91IGhhdmUgcHJvdmlkZWQgVmFsaWQgZW1haWwgSWRcIixcblx0XHRcdFx0ZmFpbDpcIlBsZWFzZSBwcm92aWRlIFZhbGlkIEVtYWlsIGFkZHJlc3NcIixcblx0XHRcdH0sXG5cdFx0XHRudW1iZXI6e1xuXHRcdFx0XHR0ZXN0Oi9eXFxkKyQvLFxuXHRcdFx0XHRzdWNjZXNzOlwiXCIsXG5cdFx0XHRcdGZhaWw6XCJQbGVhc2UgcHJvdmlkZSBudW1iZXIgb25seVwiLFxuXHRcdFx0fSwgXG5cdFx0XHRyZXF1aXJlZDp7XG5cdFx0XHRcdHRlc3Q6L1xcUysvLFxuXHRcdFx0XHRzdWNjZXNzOlwiXCIsXG5cdFx0XHRcdGZhaWw6XCJUaGlzIGZpZWxkIGNhbnQgYmUgZW1wdHlcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XG5cdFx0XG59O1xuXG5cblxuXG5cblxuXG5cbiIsIlxuaW1wb3J0IHtpbml0fSBmcm9tICcuL2luaXQuanMnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gXCIuL3JlbmRlci5qc1wiO1xuaW1wb3J0IGV2ZW50TWFuYWdlciBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IGNhbGxiYWNrSGFuZGxlciBmcm9tIFwiLi9jYWxsYmFjay5qc1wiO1xuaW1wb3J0IGFyZ3VtZW50c0hhbmRsZXIgZnJvbSBcIi4vYXJndW1lbnRzSGFuZGxlci5qc1wiO1xuaW1wb3J0ICBtYW5hZ2VSZXR1cm5zIGZyb20gXCIuL3JldHVybi5qc1wiO1xuaW1wb3J0ICBnZXREYXRhIGZyb20gXCIuL3JldHJpdmUuanNcIjtcbmltcG9ydCAgc2V0RGF0YSBmcm9tIFwiLi9hc3NpZ24uanNcIjtcbmltcG9ydCB7Y29yZX0gZnJvbSAnLi9jb3JlLmpzJztcbmltcG9ydCBkYXRhU3RvcmUgZnJvbSBcIi4vc3RvcmUuanNcIjtcbi8vIGltcG9ydCBEYXRhc3RvcmUgZnJvbSAnLi9kYXRhU3RvcmUuanMnO1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XG5cdGNvbnN0ICRpbXBsZUV2ZW50PXt9O1xuXG5cbi8vcHJvY2Vzc29yc1xuXHQvL1Jlc3BvbmlzYmxlIGZvciBiaW5kaW5nIGV2ZW50IHRvIGVsZW1lbnQgd2l0aCBjb3Jlc3Nwb25kaW5nIGNhbGxiYWNrcyBldmVudE1hbmFnZXIoZWwsZXZlbnRMaXN0LGludm9rZSlcblx0JGltcGxlRXZlbnQuZXZlbnRNYW5hZ2VyPWV2ZW50TWFuYWdlcjsvLyBldmVuaGFuZGxlciBjYWxsIGNhbGxiYWNraGFuZGxlcyBjYWxscyBtYW5hZ2UgcmV0dXJuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0Ly9IYW5kbGUgY2FsbGJhY2sgLCBjaGVjayBmb3IgY2FsbGJhY2sgZGF0YSBcblx0Ly8uICAgIGNhbGxiYWNrSGFuZGxlcihlbCxjYWxsYmFjayxhcmdzLGUpe1xuXHQkaW1wbGVFdmVudC5jYWxsYmFja0hhbmRsZXI9Y2FsbGJhY2tIYW5kbGVyO1xuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBoYW5kbGVzIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQgdG8gY2FsbGJhY2sgZnVuY3Rpb24gaW4gZXZlbnQgYXR0cmlidXRlIG9mIGVsZW1lbnRcblx0JGltcGxlRXZlbnQuYXJndW1lbnRzSGFuZGxlcj1hcmd1bWVudHNIYW5kbGVyO1xuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly9IYW5kbGUgdGhlIHJldHVybnMgZnJvbSBjYWxsYmFjayB3aGVuIGV2ZW50IG9jY3VycywgaWYgY2FsbGJhY2sgaGFzIGEgcmV0dXJuXG5cdC8vICAgICAgICAgICBtYW5hZ2VSZXR1cm5zKGVsLnBhcmVudE5vZGUsJHJldHVybik7XG5cdCAkaW1wbGVFdmVudC5tYW5hZ2VSZXR1cm5zPW1hbmFnZVJldHVybnM7XG5cdFxuXHQvL1Jlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgaHRtbCB0byB0aGUgZG9jdW1lbnQsIHdpdGggYXBwcm9wcHJpYXRlIHJldHVybnNcblx0ICRpbXBsZUV2ZW50LnJlbmRlcj1yZW5kZXI7XG4vL0hlbHBlclxuXHQvL0RPQzotJGltcGxFdmVudC5nZXREYXRlKGVsKTsgd2lsbCBnZXQgZGF0YSBmcm9tIGNoaWxkIGVsZW1lbnRzIHdoaWNoIGhhdmUgbmFtZSBvciBkYXRhLWdldCBhdHRyaWJ1dGUgXG5cdC8vYW5kIHJldHVybnMgaW4ge30gd2l0aCBrZXkgYW5kIHZhbHVlIHBhaXJcbiAgICAkaW1wbGVFdmVudC5nZXREYXRhPWdldERhdGE7XG4gICAgLy9ET0M6LSRpbXBsZUV2ZW50LnNldERhdGEoKVxuXHQkaW1wbGVFdmVudC5zZXREYXRhPXNldERhdGE7XG5cdC8vICRpbXBsZUV2ZW50LmdldERhdGFTdG9yZT1nZXREYXRhU3RvcmU7XG5cdC8vICRpbXBsZUV2ZW50LnNldERhdGFTdG9yZT1zZXREYXRhU3RvcmU7XG5cdCRpbXBsZUV2ZW50LmRhdGFTdG9yZT1kYXRhU3RvcmU7XHRcblxuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHRcbi8vQ29udGFpbmVyIG9yIGhvbGRlcnNcblx0Ly9jb25hdGluZXIgdG8gaG9sZCBjYWxsYmFja3Mgb3IgZXZlbnQgaGFuZGxlcnMgc3VwcGxpZWQgYnkgdXNlciB1c2luZyAkaW1wbGVFdmVudC5hZGQoKSwgbWV0aG9kXG5cdCRpbXBsZUV2ZW50LmNhbGxiYWNrcz17fTtcblxuXG5cdC8vIGNhbGxiYWNrcyBjb25hdGluZXIgZm9yIG5vdGF0aW9uIGkuZSB1c2VyLmdldEZ1bGxOYW1lIHVzaW5nICRpbXBsZUV2ZW50LmFkZEluKCd1c2VyJywnZ2V0RnVsbE5hbWUnLCBmdW5jdGlvbigpe30pXG5cdCRpbXBsZUV2ZW50LmluQ2FsbGJhY2tzPXt9O1xuXG5cdC8vJGltcGxlIEV2ZW50IG5hdGl2ZSBDb2xsZWN0aW9uIG9mIGNhbGxiYWNrc1xuXHQkaW1wbGVFdmVudC5jb3JlPWNvcmU7XG5cdC8vQXBwbGljYXRpb24gaW5pdGlsaXphdGlvbiBhbmQgY29uZmlnIGRhdGEsIGNhbiBiZSBtb2RpZmllZCB1c2luZyAkaW1wbGVFdmVudC5jb25maWcoKSwgbWV0aG9kXG5cdCRpbXBsZUV2ZW50LmluaXQ9aW5pdDtcblx0Ly8kaW1wbGUgRVZlbnQgVmFyaWFibGVzIFxuXHQkaW1wbGVFdmVudC52YXJzPXt9O1xuXHQvL0pTT04gUGFyc2Vcblx0JGltcGxlRXZlbnQucGFyc2VKU09OPWZ1bmN0aW9uKGRhdGEpe1xuXG5cdFx0dHJ5e1xuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0fSBjYXRjaChlKXtcblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblx0fTtcblx0Ly9TaW1wbGUgY3VzdG9tIGV2ZW50IGhhbmRsZXJcblx0JGltcGxlRXZlbnQuZmlyZT1mdW5jdGlvbihlbCxtZXRob2Qpey8vJGltcGxlRXZlbnQuZmlyZShlbGVtZW50LFwiYWRkKCxhcjEsYXJnMilcIilcblx0XHRpZihlbCAmJiBlbC5ub2RlTmFtZSl7XG5cdFx0XHRsZXQgW2FyZ3MsY2FsbGJhY2tdPVtbXSwgbnVsbF07XG5cdFx0XHRbLGNhbGxiYWNrLGFyZ3NdPS9bXFxzXSooW1xcdy1cXC5dKykoWyhdW14pXSpbKV0pPy8uZXhlYyhtZXRob2QpO1xuXHRcdFx0aWYoY2FsbGJhY2spe1xuXHRcdFx0XHRpZihhcmdzKXtcblx0XHRcdFx0XHRhcmdzPWFyZ3MucmVwbGFjZSgvWygpXS9nLFwiXCIpLnNwbGl0KC9bLF0vKTtcblx0XHRcdFx0XHRcdGlmKCRpbXBsZUV2ZW50LmluaXQuJHJlc2VydmVFdmVudEFyZ3VtZW50PT09dHJ1ZSkgYXJncy5zaGlmdCgpO1xuXHRcdFx0XHR9IGVsc2V7XG5cdFx0XHRcdFx0YXJncz1bXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdCRpbXBsZUV2ZW50LmNhbGxiYWNrSGFuZGxlcihlbCxjYWxsYmFjayxhcmdzLG51bGwpO1xuXG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlByb3ZpZGUgdmFsaWQgbWV0aG9kLCBQcm92aWRlZCBcIiArIGNhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9ZWxzZXtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQcm92aWRlIEh0bWwgRWxlbWVudCwgUHJvdmlkZWQgXCIgKyBlbCk7XG5cdFx0fVxuXG5cdH07XG5cdCRpbXBsZUV2ZW50Lmludm9rZT1mdW5jdGlvbihlbCxldmVudCl7Ly8kaW1wbGVFdmVudC5maXJlKGVsZW1lbnQsXCJhZGQoLGFyMSxhcmcyKVwiKVxuXHQvLyBpZiBldmVudCBpcyBwcm92aWRlZCB0aWdnZXIgdGhhdCBldmVudCAsIGVsc2UgZmluZCBpbnZva2UgYW5kIGV4ZWN1dGVcblx0IGxldCBpbnZva2U9ZXZlbnQ/ZXZlbnQ6J2ludm9rZSc7XG5cdFx0aWYoZWwgJiYgZWwubm9kZU5hbWUgJiYgZWwuaGFzQXR0cmlidXRlKHRoaXMuaW5pdC4kZXZlbnQpKXtcblxuXHRcdFx0bGV0IGV2ZW50QXR0cmlidXRlPWVsLmdldEF0dHJpYnV0ZSh0aGlzLmluaXQuJGV2ZW50KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGV2ZW50QXR0cmlidXRlLnRyaW0oKSl7XG5cdFx0XHRcdFx0aWYodGhpcy5pbml0LiR1c2VBcnJvdz09PXRydWUpe1xuXHRcdFx0XHRcdFx0bGV0IHJlbWFpbnM9ZXZlbnRBdHRyaWJ1dGUucmVwbGFjZSgkaW1wbGVFdmVudC5pbml0LiRzZXBlcmF0b3JBcnJvd0dsb2JhbCxcIlwiKTtcblxuXHRcdFx0XHRcdFx0aWYocmVtYWlucy5yZXBsYWNlKC9bLDtdL2csXCJcIikudHJpbSgpKXtcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkludmFsaWQgc3ludGF4IGRlZmluYXRpb246J1wiK3JlbWFpbnMsZWwpO1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCIgTXVzdCBwcm92aWRlZCBhdGxlYXN0IGV2ZW50bmFtZSBhbmQgY2FsbGJhY2sgIGluIGFycm93IGZ1bmN0aW9uIGZvcm1hdCAnZXZlbnQ9PmNhbGxiYWNrKCxhcmcxLGFyMiknIHNlcGVyYXRlZCBieSAnLCcgZm9yIG11bHRpcGxlIGVudHJ5XCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFxuXHRcdFx0XHRcdFx0dGhpcy5ldmVudE1hbmFnZXIoZWwsIGV2ZW50QXR0cmlidXRlLm1hdGNoKHRoaXMuaW5pdC4kc2VwZXJhdG9yQXJyb3dHbG9iYWwpLGludm9rZSk7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHR0aGlzLmV2ZW50TWFuYWdlcihlbCxldmVudEF0dHJpYnV0ZS5zcGxpdCgvXFxzKy8pLGludm9rZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHR9XG5cblxuXG5cblx0XHRcdFxuXG5cdH07XG5cdC8vJGltcGxlRXZuZXQgbG9jYWwgcmV0dXJuXG5cdCRpbXBsZUV2ZW50LnJldHVybj1mdW5jdGlvbihlbCwkcmV0dXJuKXtcblx0XHRyZXR1cm4gdGhpcy5tYW5hZ2VSZXR1cm5zKGVsLnBhcmVudE5vZGUsJHJldHVybik7XG5cdH07XG5cdC8vREFUQS1GRUVEIFJFU0VUIE9SIFJFVFVSTiBSRVNFVFxuXHQkaW1wbGVFdmVudC5yZXNldD1mdW5jdGlvbihlbGUsYm9vbCl7XG5cdFx0bGV0IGVsPWVsZS5wYXJlbnROb2RlO1xuXHRcdGlmKGVsLm5vZGVUeXBlKXtcblx0XHRcdGlmKGJvb2w9PT10cnVlKXtcblx0XHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCh0aGlzLmluaXQuJGNsYXNzTmFtZStcIltcIit0aGlzLmluaXQuJGRhdGFGZWVkK1wiXVwiKS5mb3JFYWNoKChlKT0+e2UuaW5uZXJIVE1MPScnfSk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCh0aGlzLmluaXQuJGNsYXNzTmFtZSkuZm9yRWFjaCgoZSk9PntlLmlubmVySFRNTD0nJ30pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fVxuXHR9O1xuXHQvL3RvIHN0cmluZyBpZGVudGlmaWVyXG5cdCRpbXBsZUV2ZW50LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIFwiT2JqZWN0ICRpbXBsZUV2ZW50XCI7fTtcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL0hlbHBlciBNZXRob2RzXG5cdCRpbXBsZUV2ZW50Lm1ldGhvZD1mdW5jdGlvbihjYWxsYmFjayxiaW5kKXtcblx0XHRcdFx0dmFyIGRhdGE9Y2FsbGJhY2suc3BsaXQoL1xcLi8pO1xuXHRcdFx0XHRcdFx0XHRpZihkYXRhLmxlbmd0aD09PTIpe1xuXHRcdFx0XHRcdFx0XHRcdGlmKHRoaXMuaW5DYWxsYmFja3MuaGFzT3duUHJvcGVydHkoZGF0YVswXSkpe1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYodGhpcy5pbkNhbGxiYWNrc1tkYXRhWzBdXS5oYXNPd25Qcm9wZXJ0eShkYXRhWzFdKSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBiaW5kP3RoaXMuaW5DYWxsYmFja3NbZGF0YVswXV1bZGF0YVsxXV0uYmluZChiaW5kKTp0aGlzLmluQ2FsbGJhY2tzW2RhdGFbMF1dW2RhdGFbMV1dO1xuXHRcdFx0XHRcdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBGb3VuZCBNZXRob2Q6XCIrZGF0YVsxXStcImluIFwiKyBkYXRhWzBdK1wiT2JqZWN0IDogcmVmLT5cIitjYWxsYmFjaytcIiAsUGxlYXNlIFJlZ2lzdGVyIGV2ZW50IGhhbmRsZXIgdXNpbmcgJyRpbXBsZUV2ZW50LmFkZEluKFwiK2RhdGFbMF0rXCIsIC4uLi4pJyBtZXRob2Q/XCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBGb3VuZCBPYmplY3Q6J1wiICtkYXRhWzBdKyBcIicgaW4gJ1wiKyBjYWxsYmFjaytcIicgLEZvciAnLicgbm90YXRpb24sIHVzZSAgJyRpbXBsZUV2ZW50LmFkZEluKCknIG1ldGhvZD9cIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XG5cblx0XHRcdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLUVuZCBmb3IgZG90IG5vdGFpb25cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmKHRoaXMuY29yZS5oYXNPd25Qcm9wZXJ0eShjYWxsYmFjaykpe1xuXHRcdFx0XHRcdFx0XHRcdCByZXR1cm4gYmluZD90aGlzLmNvcmVbY2FsbGJhY2tdLmJpbmQoYmluZCk6dGhpcy5jb3JlW2NhbGxiYWNrXTtcblx0XHRcdFx0ICBcdFx0XHR9ZWxzZSBpZih0aGlzLmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShjYWxsYmFjaykpe1xuXHRcdFx0XHQgIFx0XHRcdFx0cmV0dXJuICBiaW5kP3RoaXMuY2FsbGJhY2tzW2NhbGxiYWNrXS5iaW5kKGJpbmQpOnRoaXMuY2FsbGJhY2tzW2NhbGxiYWNrXTtcblx0XHRcdFx0ICBcdFx0XHR9ZWxzZXtcblx0XHRcdFx0ICBcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBGb3VuZCBNZXRob2Q6XCIrY2FsbGJhY2srXCIgLFBsZWFzZSBSZWdpc3RlciBldmVudCBoYW5kbGVyIHVzaW5nICckaW1wbGVFdmVudC5hZGQoKScgbWV0aG9kP1wiKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdCAgXHRcdFx0fVxuXHR9O1xuXHQkaW1wbGVFdmVudC5hZGRJbj1mdW5jdGlvbihuYW1lLGEsYil7XG5cdFx0bGV0IF90aGlzQ2FsbGJhY2tzPW51bGw7XG5cdFx0aWYodGhpcy5pbkNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSl7XG5cdFx0XHRfdGhpc0NhbGxiYWNrcz10aGlzLmluQ2FsbGJhY2tzW25hbWVdO1xuXHRcdH1lbHNle1xuXHRcdCBfdGhpc0NhbGxiYWNrcz10aGlzLmluQ2FsbGJhY2tzW25hbWVdPXt9O1xuXHRcdH1cblx0XHRcblx0XHRcblx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpe1xuXHRcdFx0XHQvL2l0cyBvYmplY3QgcGF0dGVyPXtuYW1lOmNhbGxhYmNrfVxuXHRcdFx0XHRmb3IgKCB2YXIga2V5cyBpbiBhKXtcblx0XHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYVtrZXlzXSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpe1xuXHRcdFx0XHRcdFx0X3RoaXNDYWxsYmFja3Nba2V5c109YVtrZXlzXTtcblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQbGVhc2UgcHJvdmlkZSB2YWxpZCBjYWxsYmFjayBmdW5jdGlvbiBmb3IgOlwiICsga2V5cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSBpZigoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJykpe1xuXHRcdFx0XHQvL3BhdGVybiAobmFtZSwgbWV0aG9kKVx0XG5cdFx0XHRcdF90aGlzQ2FsbGJhY2tzW2FdPWI7XG5cblx0XHRcdH1lbHNle1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBhZGQoXCIrYStcIiwgXCIrYitcIikgOiBTdXBwbHkgbWV0aG9kIG5hbWUgYW5kIGNhbGxiYWNrXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyAvL0luaXRpYWxpemUgcXVlcnkgYW5kIGV2ZW50IGF0dGFjaG1lbnRcblx0XHRcdGlmKCF0aGlzLmluaXRpYXRlKXtcblx0XHRcdHRoaXMubGF1bmNoKCk7XG5cblx0XHRcdHRoaXMuaW5pdGlhdGU9dHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFxuXG5cdH07XG5cblx0XG5cdC8vQ292ZXJ0IGh0bWwgc3RyaW5nIGluIGh0bWwuIFwiPGxpPlwiXG5cdCRpbXBsZUV2ZW50LmFzSFRNTD1mdW5jdGlvbihzdHJpbmcpe1xuXHRcdHZhciBlbGU9dGhpcy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRlbGUuaW5uZXJIVE1MPXN0cmluZztcblx0XHQgcmV0dXJuIHRoaXMucmVuZGVyLmNsb25lRWxlbWVudChlbGUpLmZpcnN0RWxlbWVudENoaWxkO1xuXHR9O1xuXHQkaW1wbGVFdmVudC5odG1sPWZ1bmN0aW9uKHN0cmluZyl7XG5cdFx0cmV0dXJuIHRoaXMuYXNIVE1MKHN0cmluZyk7XG5cdH1cblx0Ly9jcmVhdGUgZWxlbWVudCBlLmcgJGltcGxlRXZlbnQuY3JlYXRlRWxlbWVudChcImgxXCIse2lkOlwiaDFcIiwgY2xhc3M6XCJvbmUgdHdvIFwiLCB0ZXh0OlwiSSBhbSBhIHRpdGxlXCJ9KTtcblx0Ly91c2VkIGluIHJlbmRlclxuXHQkaW1wbGVFdmVudC5jcmVhdGVFbGVtZW50PWZ1bmN0aW9uKHRhZywgYXR0cil7XG5cdFx0dmFyIGVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuXHRcdFx0Zm9yICh2YXIga2V5cyBpbiBhdHRyKXtcblx0XHRcdFx0aWYoa2V5cz09XCJ0ZXh0XCIpe1xuXHRcdFx0XHRcdGVsZW1lbnQuaW5uZXJUZXh0PWF0dHJba2V5c107XG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleXMsYXR0cltrZXlzXSk7XG5cdFx0XHRcdH1cblx0XHQgICAgICAgIFxuXHRcdCAgICAgIH1cblx0XHQgcmV0dXJuIGVsZW1lbnQ7XG5cdH07XG5cdC8vICRpbXBsZUV2ZW50Lm5vdGlmeT1mdW5jdGlvbihNZXNzYWdlKXtcblx0Ly8gXHQvLyB2YXIgc3Q9c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHQvLyBcdC8vIFx0aWYoJGltcGxlRXZlbnQuaW5pdC4kbm90aSlcblx0Ly8gXHQvLyB9LDMwMDApXG5cblx0Ly8gfTtcblx0Ly8gJGltcGxlRXZlbnQuYWxlcnQ9ZnVuY3Rpb24oKXtcblxuXHQvLyB9O1xuXHQvLyAkaW1wbGVFdmVudC5lcnJvcj1mdW5jdGlvbihlbCwkcmV0dXJuKXtcblx0Ly8gXHRyZXR1cm4gJGltcGxlRXZlbnQubWFuYWdlUmV0dXJucyhlbCwkcmV0dXJuKTtcblx0Ly8gfTtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly9SZXR1cm4ge30gd2l0aCBrZXkgYW5kIHZhbHVlLCB3aGVyZSBrZXkgaXMgbmFtZSBvciBkYXRhLWdldCwgYW5kIHZhbHVlIGlzIHZhbHVlPVwiXCIgb3IgZWwudmFsdWVcblx0XG5cdFxuXHQvL1ZhbGlkYXRpb24gIGNoZWNrIGFuZCByZWZlcmVuY2UgY2hlY2sgdG8gY2FsbGJhY2sgcHJvdmlkZSBieSB1c2VyIFxuXHQvL3RoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5ICRpbXBsZUV2ZW50LmdldERhdGEoKTsgd2hpY2ggcGFzc2VzIGUsIG5hbWUsIHZhbHVlIHRvIHRoaXMgZnVuY3Rpb25cblx0Ly9vbmx5IGFwcGxpY2FibGUgdG8gdXNlciBpbnB1dCBub3QgYXBwbGljYWJsZSB0byBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcblx0JGltcGxlRXZlbnQudmFsaWRhdGU9ZnVuY3Rpb24oZWwsbmFtZSwgdmFsdWUpey8vZT1ldmVudCwgbmFtZT1uYW1lIGF0dHJpYnV0ZSB2YWx1ZSBlLmcgbmFtZSwgZW1haWxcblx0XHRcdCAgaWYodGhpcy5jb3JlLnZhbGlkYXRlLmhhc093blByb3BlcnR5KG5hbWUpKXt9XG5cdFx0XHR9O1xuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0XG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vRW5kIG9mIEhlbHBlciBNZXRob2RzXG4gJGltcGxlRXZlbnQuaW5pdGlhdGU9bnVsbDtcblxuLy9SZWdpc3RlciB5b3VyIGNhbGxiYWNrIHRocm91Z2ggLmFkZCgpIG9yIC4gcmVnaXN0ZXIoKTtcblx0XHQkaW1wbGVFdmVudC5hZGQ9ZnVuY3Rpb24oYSxiKXtcblx0XHRcblxuXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSAnW29iamVjdCBPYmplY3RdJyl7XG5cdFx0XHRcdC8vaXRzIG9iamVjdCBwYXR0ZXI9e25hbWU6Y2FsbGFiY2t9XG5cdFx0XHRcdGZvciAoIHZhciBrZXlzIGluIGEpe1xuXHRcdFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhW2tleXNdKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyl7XG5cdFx0XHRcdFx0XHR0aGlzLmNhbGxiYWNrc1trZXlzXT1hW2tleXNdO1xuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlBsZWFzZSBwcm92aWRlIHZhbGlkIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciA6XCIgKyBrZXlzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIGlmKChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSl7XG5cdFx0XHRcdC8vcGF0ZXJuIChuYW1lLCBtZXRob2QpXHRcblx0XHRcdFx0dGhpcy5jYWxsYmFja3NbYV09YjtcblxuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIGFkZChcIithK1wiLCBcIitiK1wiKSA6IFN1cHBseSBtZXRob2QgbmFtZSBhbmQgY2FsbGJhY2tcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIC8vSW5pdGlhbGl6ZSBxdWVyeSBhbmQgZXZlbnQgYXR0YWNobWVudFxuXHRcdFx0Ly8gaWYoIXRoaXMuaW5pdGlhdGUpe1xuXHRcdFx0Ly8gdGhpcy5sYXVuY2goKTtcblxuXHRcdFx0Ly8gdGhpcy5pbml0aWF0ZT10cnVlO1xuXHRcdFx0Ly8gfVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQkaW1wbGVFdmVudC5yZWdpc3Rlcj1mdW5jdGlvbihhLGIpe1xuXHRcdHJldHVybiB0aGlzLmFkZChhLGIpO1xuXHR9O1xuXHQkaW1wbGVFdmVudC4kYWRkPWZ1bmN0aW9uKCl7XG5cdFx0aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSAnW29iamVjdCBPYmplY3RdJyl7XG5cdFx0XHRcdC8vaXRzIG9iamVjdCBwYXR0ZXI9e3ZhcmlhYmxlOidkYXRhJ31cblx0XHRcdFx0Zm9yICggdmFyIGtleXMgaW4gYSl7XG5cdFx0XHRcdFx0dGhpcy52YXJzW2tleXNdPWFba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2UgaWYoKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gJ1tvYmplY3QgU3RyaW5nXScpKXtcblx0XHRcdFx0Ly9wYXRlcm4gKCdpZCcsIFwiMTIzXCIpXHRcblx0XHRcdFx0dGhpcy52YXJzW2FdPWI7XG5cblx0XHRcdH1lbHNle1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBhZGQoXCIrYStcIiwgXCIrYitcIikgOiBTdXBwbHkgdmFpbGQgYXJndW1lbnRzXCIpO1xuXHRcdFx0fVxuXG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXHQkaW1wbGVFdmVudC5hZGRWYXI9ZnVuY3Rpb24oYSxiICl7XG5cdFx0cmV0dXJuIHRoaXMuJGFkZChhLGIpO1xuXHR9O1xuXG5cblxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcblx0Ly9UaGlzIHdpbGwgdXBkYXRlICRpbXBsZUV2ZW50IG9yIHJlZnJlc2ggJGltcGxlRXZlbnQgb24gc3BlY2lmaWVkIGVsZW1lbnQuXG5cblx0JGltcGxlRXZlbnQudXBkYXRlPWZ1bmN0aW9uKGVsKXsgdGhpcy5sYXVuY2goZWwpfTtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvL0FsbG93cyB0byBjb25naWYgdGhlIGFwcGxpY2F0aW9uIGUuZywgJGltcGxlRWxlbWVudC5jb25maWcoJyRyb290JywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpKTtcblx0JGltcGxlRXZlbnQuY29uZmlnPWZ1bmN0aW9uKGEsYil7XG5cdFx0Ly9pZiB7fSBpcyBwYXNzZWRcblx0XHRpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKXtcblx0XHRcdFx0Ly9pdHMgb2JqZWN0IHBhdHRlcj17bmFtZTpjYWxsYWJja31cblx0XHRcdFx0Zm9yICh2YXIga2V5cyBpbiBhKXtcblx0XHRcdFx0XHRpZih0aGlzLmluaXQuaGFzT3duUHJvcGVydHkoa2V5cykpe1xuXHRcdFx0XHRcdFx0dGhpcy5pbml0W2tleXNdPWFba2V5c107XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVW52YWxpZCBDb25maWcgUHJvcGVydHkgOlwiICsga2V5cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZXtcblxuXHRcdFx0XHRpZih0aGlzLmluaXQuaGFzT3duUHJvcGVydHkoYSkpe1xuXHRcdFx0XHRcdFx0dGhpcy5pbml0W2FdPWI7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVW52YWxpZCBDb25maWcgUHJvcGVydHkgOlwiICsgYSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0fSBcblx0XHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdC8vTGF1Y2hlZCB0aGUgQXBwbGljYXRpb25cblx0JGltcGxlRXZlbnQubGF1bmNoPWZ1bmN0aW9uKGVsKXtcblx0XHQvL2ZpbmQgdGhlIGVsZW1lbnRzIHdpdGggZXZlbnQgYXR0cmlidXRlIGFuZCBhdHRhY2ggYSBoYW5kbGVyIGFuZCBsaXN0ZW5lclxuXHRcdFx0dmFyIGVsZW1lbnQ9ZWwgfHwgdGhpcy5pbml0LiRyb290O1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZWxlbWVudCk7XG5cdFx0XHQvL2lmIGVsIGhhcyBhbnkgZXZlbnQgXG5cdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS1cdFx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdCBpZihlbGVtZW50IT1kb2N1bWVudCAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZXZlbnQnKSl7XG5cdFx0XHQgXHRcblx0XHRcdCBcdGxldCBldmVudEF0dHJpYnV0ZT1lbGVtZW50LmdldEF0dHJpYnV0ZSgnZXZlbnQnKS50cmltKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihldmVudEF0dHJpYnV0ZSl7XG5cdFx0XHRcdFx0aWYodGhpcy5pbml0LiR1c2VBcnJvdz09PXRydWUpe1xuXHRcdFx0XHRcdFx0bGV0IHJlbWFpbnM9ZXZlbnRBdHRyaWJ1dGUucmVwbGFjZSgkaW1wbGVFdmVudC5pbml0LiRzZXBlcmF0b3JBcnJvd0dsb2JhbCxcIlwiKTtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2cocmVtYWlucyk7XG5cdFx0XHRcdFx0XHRpZihyZW1haW5zLnJlcGxhY2UoL1ssO10vZyxcIlwiKS50cmltKCkpe1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiSW52YWxpZCBzeW50YXggZGVmaW5hdGlvbjonXCIrcmVtYWlucyxlbGVtZW50KTtcblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiIE11c3QgcHJvdmlkZWQgYXRsZWFzdCBldmVudG5hbWUgYW5kIGNhbGxiYWNrICBpbiBhcnJvdyBmdW5jdGlvbiBmb3JtYXQgJ2V2ZW50PT5jYWxsYmFjaygsYXJnMSxhcjIpJyBzZXBlcmF0ZWQgYnkgJywnIGZvciBtdWx0aXBsZSBlbnRyeVwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMuZXZlbnRNYW5hZ2VyKGVsZW1lbnQsIGV2ZW50QXR0cmlidXRlLm1hdGNoKHRoaXMuaW5pdC4kc2VwZXJhdG9yQXJyb3dHbG9iYWwpKTtcblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdHRoaXMuZXZlbnRNYW5hZ2VyKGVsZW1lbnQsZXZlbnRBdHRyaWJ1dGUuc3BsaXQoL1xccysvKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHQgfS8vZW5kIG9mIHNlbGYgb3Igcm9vdCBlbCBldmVudCBtYW5nZW1lbnRcblx0XHRcdCAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0bGV0IGVsZW1lbnRzPWVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2V2ZW50XScpO1xuXHRcdFx0XG5cdFx0XHQgZm9yKGxldCBpPTA7IGk8ZWxlbWVudHMubGVuZ3RoOyBpKyspe1xuXHRcdFx0IFx0XG5cdFx0XHRcdGxldCBldmVudEF0dHJpYnV0ZT1lbGVtZW50c1tpXS5nZXRBdHRyaWJ1dGUoJ2V2ZW50Jyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihldmVudEF0dHJpYnV0ZS50cmltKCkpe1xuXHRcdFx0XHRcdGlmKHRoaXMuaW5pdC4kdXNlQXJyb3c9PT10cnVlKXtcblx0XHRcdFx0XHRcdGxldCByZW1haW5zPWV2ZW50QXR0cmlidXRlLnJlcGxhY2UoJGltcGxlRXZlbnQuaW5pdC4kc2VwZXJhdG9yQXJyb3dHbG9iYWwsXCJcIik7XG5cblx0XHRcdFx0XHRcdGlmKHJlbWFpbnMucmVwbGFjZSgvWyw7XS9nLFwiXCIpLnRyaW0oKSl7XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIHN5bnRheCBkZWZpbmF0aW9uOidcIityZW1haW5zLGVsZW1lbnRzW2ldKTtcblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiIE11c3QgcHJvdmlkZWQgYXRsZWFzdCBldmVudG5hbWUgYW5kIGNhbGxiYWNrICBpbiBhcnJvdyBmdW5jdGlvbiBmb3JtYXQgJ2V2ZW50PT5jYWxsYmFjaygsYXJnMSxhcjIpJyBzZXBlcmF0ZWQgYnkgJywnIGZvciBtdWx0aXBsZSBlbnRyeVwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMuZXZlbnRNYW5hZ2VyKGVsZW1lbnRzW2ldLCBldmVudEF0dHJpYnV0ZS5tYXRjaCh0aGlzLmluaXQuJHNlcGVyYXRvckFycm93R2xvYmFsKSk7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHR0aGlzLmV2ZW50TWFuYWdlcihlbGVtZW50c1tpXSxldmVudEF0dHJpYnV0ZS5zcGxpdCgvXFxzKy8pKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdH1cblx0fTtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG5cblx0Ly9hdHRhY2ggJGltcGxFdmVudCB0byBXaW5kb3cgYWZ0ZXIgY2hlY2tpbmcgZm9yIG5hbWVzcGFjZSBjb2xsaXNpb24gYW5kIGR1cGxpY2F0ZSBpbXBsZW1lbnRhdGlvbiBvZiBsaWJyYXJ5XG5cdGlmKHdpbmRvdy4kaW1wbGVFdmVudCl7XG5cdFx0aWYod2luZG93LiRpbXBsZUV2ZW50LnRvU3RyaW5nKCk9PT1cIk9iamVjdCAkaW1wbGVFdmVudFwiKXtcblx0XHRcdGNvbnNvbGUud2FybihcIkR1cGxpY2F0ZSAkaW1wbGVFdmVudCBsaWJhcmF5IEZvdW5kISBNYWtlIHN1cmUgeW91IGFyZSBub3QgaW1wb3J0aW5nICRpbXBsZUV2ZW50IG1vcmUgdGhhbiBvbmUgdGltZS4gXCIpO1xuXHRcdH1lbHNle1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIiRpbXBsZUV2ZW50IG5hbWUgaXMgYWxyZWFkeSB1c2VkLCBQbGVhc2UgRG9udCBhc3NpZ24gJyRpbXBsZUV2ZW50JyB0byBhbnkgdmFyaWJhbGUsIGZ1bmN0aW9uIG9yIG9iamVjdHMuIFBsZWFzZSBmcmVlICcgJGltcGxlRXZlbnQnIG5hbWVzcGFjZSBmcm9tIGdsb2JhbCBzY29wZS5cIik7XG5cdFx0fVxuXHR9ZWxzZXtcblx0XHR3aW5kb3cuJGltcGxlRXZlbnQ9JGltcGxlRXZlbnQ7XG5cblx0XHRcdC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbihldmVudCkge1xuICAgLy8gIFx0XHRcdHdpbmRvdy4kaW1wbGVFdmVudC5sYXVuY2goKTtcbiAgXHQvLyBcdFx0fSk7XG5cdH1cblxuIiwiLy9FdmVudCBIYW5kbGVyXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV2ZW50TWFuYWdlcihlbCxldmVudExpc3QsaW52b2tlKXtcblx0XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUZPUiBFQUNIIEVWRU5UIERBVEEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0XHRcdFx0XHQvLyBcbi8vZXZlbnQgbGlzdCBpcyB0aGUgbGlzdCBvZiBldmVudHMgbGlrZSBbY2xpY2tfc29tZWZ1bmMsZGJsX3NvbWVPdGhlcmZ1bmNdXG5cdC8vZm9yIGVhY2ggZXZlbnRzIGluIGV2ZW50TGlzdFxuXHRcdGZvcihsZXQgaT0wOyBpPGV2ZW50TGlzdC5sZW5ndGg7aSsrKXtcblxuXHRcdFx0aWYoIWV2ZW50TGlzdFtpXS50cmltKCkpIHJldHVybiBmYWxzZTtcblx0XHRcdC8vd3JhcGluZyBpbiBzZWxmIGludm9raW5nIGZ1bmN0aW9uIHRvIHNvbHZlIGV2ZW50IGFzeW5jIGlzc3VlXG5cdFx0XHQoZnVuY3Rpb24oKXtcblx0XHRcdFx0bGV0IFtldmVudCxhcmdzLGNhbGxiYWNrXT1bbnVsbCwgW10sIG51bGxdO1xuXHRcdFx0XHQvL1xuXHRcdFx0XHRpZigkaW1wbGVFdmVudC5pbml0LiR1c2VBcnJvdz09PXRydWUpe1xuXHRcdFx0XHRcdGlmKCRpbXBsZUV2ZW50LmluaXQuJHNlcGVyYXRvckFycm93LnRlc3QoZXZlbnRMaXN0W2ldKSl7XG5cdFx0XHRcdFx0XHQgWyxldmVudCxjYWxsYmFjayxhcmdzXT0kaW1wbGVFdmVudC5pbml0LiRzZXBlcmF0b3JBcnJvdy5leGVjKGV2ZW50TGlzdFtpXSk7XG5cdFx0XHRcdFx0XHRpZihhcmdzICYmIGFyZ3MucmVwbGFjZSgvXlsoXXxbKV0kL2csXCJcIikudHJpbSgpICl7XG5cdFx0XHRcdFx0XHRcdGFyZ3M9YXJncy5yZXBsYWNlKC9eWyhdfFspXSQvZyxcIlwiKS50cmltKCkuc3BsaXQoL1ssXS8pO1xuXHRcdFx0XHRcdFx0XHQvL2lmIGZyaXN0IGFydWdlbnQgaXMgcmVzZXJ2ZWQgZm9yIGV2ZW50IG9iamVjdCxcblx0XHRcdFx0XHRcdFx0Ly8gaWYoJGltcGxlRXZlbnQuaW5pdC4kcmVzZXJ2ZUV2ZW50QXJndW1lbnQ9PT10cnVlKSBhcmdzLnNoaWZ0KCk7XG5cdFx0XHRcdFx0XHR9IGVsc2V7XG5cdFx0XHRcdFx0XHRcdGFyZ3M9W107XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblxuXHRcdFx0XHRcdFx0aWYoIWV2ZW50IHx8ICFjYWxsYmFjayl7XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkluc3VmZmljaWVudCBBZ3J1bWVudHM6J1wiKyArXCInIE11c3QgcHJvdmlkZWQgYXRsZWFzdCBldmVudG5hbWUgYW5kIGNhbGxiYWNrICBvciBldmVudCBhdHRyaWJ1dGUgZm9ybWF0IGlzIG5vdCB1bmRlcnN0b29kOnVzZWQgc2VwZXJhdG9yIGlzIFwiKyRpbXBsZUV2ZW50LmluaXQuJHNlcGVyYXRvckFycm93KTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiSW5zdWZmaWNpZW50IEFncnVtZW50czonXCIrICtcIicgTXVzdCBwcm92aWRlZCBhdGxlYXN0IGV2ZW50bmFtZSBhbmQgY2FsbGJhY2sgIG9yIGV2ZW50IGF0dHJpYnV0ZSBmb3JtYXQgaXMgbm90IHVuZGVyc3Rvb2Q6dXNlZCBzZXBlcmF0b3IgaXMgXCIrJGltcGxlRXZlbnQuaW5pdC4kc2VwZXJhdG9yQXJyb3cpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHQgIGRhdGE9ZXZlbnRMaXN0W2ldLnNwbGl0KCRpbXBsZUV2ZW50LmluaXQuJHNlcGVyYXRvcik7XG5cblx0XHRcdFx0Ly9jaGVjayBldmVudCBkYXRhIGhhcyBhdGxlYXN0IGV2ZW50bmFtZSBhbmQgY2FsbGJhY2tcblx0XHRcdFx0XHRpZihkYXRhLmxlbmd0aDwyKXtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkluc3VmZmljaWVudCBBZ3J1bWVudHM6IE11c3QgcHJvdmlkZWQgYXRsZWFzdCBldmVudG5hbWUgYW5kIGNhbGxiYWNrICBvciBldmVudCBhdHRyaWJ1dGUgZm9ybWF0IGlzIG5vdCB1bmRlcnN0b29kOnVzZWQgc2VwZXJhdG9yIGlzIFwiKyRpbXBsZUV2ZW50LmluaXQuJHNlcGVyYXRvcik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCBldmVudD1kYXRhWzBdO1xuXHRcdFx0XHRcdCBjYWxsYmFjaz1kYXRhWzFdO1xuXHRcdFx0XHRcdGFyZ3M9ZGF0YS5zbGljZSgyKTtcdFxuXHRcdFx0XHR9XG4vLy0tLS0tLS0tLS0tLS0tLS0taW5jYXNlIG9mIGludm9rZSBjYWxsLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHRcdGlmKGludm9rZSl7XG5cdFx0XHRcdFx0aWYoZXZlbnQ9PT1pbnZva2Upe1xuXHRcdFx0XHRcdFx0JGltcGxlRXZlbnQuY2FsbGJhY2tIYW5kbGVyKGVsLGNhbGxiYWNrLGFyZ3MsaW52b2tlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cdFx0XHRcdFxuXG4vLy0tLS0tLS0tLS0tLS1GaW5hbGx5IEhhbmRsZSBFdmVudHMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdC8vIFxuXHRcdFx0XHQvLy0tLS0tLS0tLS0tY3VzdG9uIGV2ZW50ICdjYWxsJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy9cblx0XHRcdFx0ICAgaWYgKGV2ZW50PT09J2ludm9rZScpIHJldHVybjtcblx0XHRcdFx0XHRpZihldmVudD09J2NhbGwnKXtcblx0XHRcdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0XHRcdFx0JGltcGxlRXZlbnQuY2FsbGJhY2tIYW5kbGVyKGVsLGNhbGxiYWNrLGFyZ3MsZSlcblx0XHRcdFx0XHRcdFx0fSk7Ly9lbmQgb2Ygd2luZG93IGxvYWQgZXZlbnRcdFx0XG5cdFx0XHRcdFx0XHRyZXR1cm4gO1xuXHRcdFx0XHRcdH0vL0VORE9GLURBVEE9PWNhbGxcblxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUludGVydmFsIGFuZCBUaW1lIG91dC0tLS0tLS0tLS0tLS0tLy9cblx0XHRcdFx0XHRpZihldmVudC5tYXRjaCgvdGltZW91dHxpbnRlcnZhbC8pKXtcblx0XHRcdFx0XHRcdC8vaGFuZGxlIHNldCBpbnRlcnZhbCBhbmQgVGltZW91dFxuXHRcdFx0XHQgIFx0XHQvL2UuZyBldmVudD1cInRpbWVvdXRfY2FsbGJhY2tfdF9hcmcyX2FyZzNcIi8vdGltZSB3aWxsIGJlIGFncjFcblx0XHRcdFx0ICBcdFx0aWYoaXNGaW5pdGUoYXJnc1swXSkpe1xuXHRcdFx0XHQgIFx0XHRcdGxldCB0aW1lPWFyZ3NbMF07XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhhcmdzLnNoaWZ0KCkpO1xuXHRcdFx0XHQgIFx0XHRcdGlmKGV2ZW50PT1cImludGVydmFsXCIpe1xuXHRcdFx0XHQgIFx0XHRcdFx0XG5cdFx0XHRcdCAgXHRcdFx0XHR2YXIgaW50ZXJ2YWw9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcblx0XHRcdFx0ICBcdFx0XHRcdFx0Ly9JdCBjaGVjayBldmVyeSB0aW1lIGJhZCBmb3IgcGVyZm9ybWFuY2UuLmJ1dCBzdGlsbFxuXHRcdFx0XHRcblx0XHRcdFx0ICBcdFx0XHRcdFx0JGltcGxlRXZlbnQuY2FsbGJhY2tIYW5kbGVyKGVsLGNhbGxiYWNrLGFyZ3MsaW50ZXJ2YWwpXG5cdFx0XHRcdFx0XHRcdFx0fSwgdGltZSk7XG5cblxuXHRcdFx0XHQgIFx0XHRcdH1lbHNlIHsvL3RpbWVvdXRcblx0XHRcdFx0ICBcdFx0XHRcdHZhciB0aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuXHRcdFx0XHQgIFx0XHRcdFx0XHRcblx0XHRcdFx0ICBcdFx0XHRcdFx0JGltcGxlRXZlbnQuY2FsbGJhY2tIYW5kbGVyKGVsLGNhbGxiYWNrLGFyZ3MsdGltZW91dClcblxuXHRcdFx0XHRcdFx0XHRcdH0sIHRpbWUpO1xuXHRcdFx0XHQgIFx0XHRcdH1cblxuXG5cdFx0XHRcdCAgXHRcdH1lbHNle1xuXHRcdFx0XHQgIFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJwbGVhc2UgUHJvdmlkZSBUaW1lIGluIG1zOyBmb3IgaW50ZXJ2YWwvdGltZW91dCBldmVudFwiKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHQgIFx0XHR9XG5cdFx0XHRcdC8vQURERVZFTlRMSVNURU5FUlxuXHRcdFx0XHRcdH1lbHNle1xuXG5cdFx0ICBcdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LGZ1bmN0aW9uIGYoZSl7XG5cdFx0ICBcdFx0XHRcdC8vVGhlIGNvZGUgYmVsb3cgd2lsbCBleGVjdXRlIGV2ZXJ5IHRpbWUgLCBldmVudCBpcyB0cmlnZ2VyZWRcblx0XHQgIFx0XHRcdFx0Ly9zdG9yZSBjYWxsYmFjayByZWZlcmVuY2Ugc28gdGhhdCB3ZSBjYW4gZGV0YWNoIGxpc3RlbmVyXG5cdFx0ICBcdFx0XHRcdFx0XG5cdFx0ICBcdFx0XHRcdFx0XHQgXG5cdFx0ICBcdFx0XHRcdFx0ZS5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKCl7XG5cblx0XHRcdCAgXHRcdFx0XHRcdGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy50eXBlLCBmKTtcblx0XHRcdCAgXHRcdFx0XHR9O1xuXHRcdFx0ICBcdFx0XHRcdFxuXHRcdCAgXHRcdFx0XHRcblx0XHRcdCAgXHRcdFx0XHRcblx0XHRcdCAgXHRcdFx0XHQvLy0tLS0tLS0tLS0tLUFkZCBldmVudCBvYmplY3QgdG8gYmVnaW5pbmcgb2YgYXJ1Z3VtbmV0LS0tLS0tXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBhcmdzLnVuc2hpZnQoXCJES0ZEU0hGS0hTREZLXCIpO1xuXHRcdFx0XHRcdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0ICBcdFx0XHRcdFxuXG5cdFx0XHQgIFx0XHRcdFx0ICRpbXBsZUV2ZW50LmNhbGxiYWNrSGFuZGxlcihlbCxjYWxsYmFjayxhcmdzLGUpO1xuXHRcdFx0ICBcdFx0XHRcdC8vICRpbXBsZUV2ZW50LmNhbGxiYWNrSGFuZGxlcihlbCxjYWxsYmFjaywkaW1wbGVFdmVudC5hcmd1bWVudHNIYW5kbGVyKGVsLGFyZ3MpLnB1c2goZSksZSk7XG5cblx0XHQgIFx0XHRcdH0sLy9FbmRPRkFkZEV2ZW50SGFuZGxlclxuXHRcdCAgXHRcdFx0ZmFsc2UpO1xuXG5cblxuXG5cblx0XHRcdFx0ICB9Ly9lb2Vsc2VcdFxuXG5cdFx0Ly8gXHRcdCAgaWYoZWwuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGV2ZW50T25jZSkpe1xuXHRcdC8vIFx0ZWwucmVtb3ZlQXR0cmlidXRlKCdldmVudCcpO1xuXHRcdC8vIFx0Y29uc29sZS5sb2coZWwpO1xuXHRcdC8vIH1cblx0XHRcdH0pKCk7Ly9FTkRDT2x1c3VyZVx0ICBcblx0XHR9Oy8vZW8gZm9yIGxvb3BcblxuXHRcdFxuXG59Ly9FT01BSU5cdFx0XG5cdFx0XHRcdCAgXHRcdFx0XG5cdCIsIi8vSGFuZGxlIENhbGwgQkFDS1MgRm9yIEVWRU5UXG5cdGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbGxiYWNrSGFuZGxlcihlbCxjYWxsYmFjayxhcmdzLGUpe1xuXHRcdFx0XHRcdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLUNoZWNrIGZvciBjYWxsYmFjay0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tZm9yIGRvdCBub3RhdGlvbi0tLS0tLS0tLS1cblxuXHRcdFx0XHRcdFx0XHRsZXQgZGF0YT1jYWxsYmFjay5zcGxpdCgvXFwuLyk7XG5cdFx0XHRcdFx0XHRcdGlmKGRhdGEubGVuZ3RoPT09Mil7XG5cdFx0XHRcdFx0XHRcdFx0aWYoJGltcGxlRXZlbnQuaW5DYWxsYmFja3MuaGFzT3duUHJvcGVydHkoZGF0YVswXSkpe1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYoJGltcGxlRXZlbnQuaW5DYWxsYmFja3NbZGF0YVswXV0uaGFzT3duUHJvcGVydHkoZGF0YVsxXSkpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjYWxsYmFjaz0gJGltcGxlRXZlbnQuaW5DYWxsYmFja3NbZGF0YVswXV1bZGF0YVsxXV07XG5cdFx0XHRcdFx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkNhbid0IEZvdW5kIE1ldGhvZDpcIitkYXRhWzFdK1wiaW4gXCIrIGRhdGFbMF0rXCJPYmplY3QgOiByZWYtPlwiK2NhbGxiYWNrK1wiICxQbGVhc2UgUmVnaXN0ZXIgZXZlbnQgaGFuZGxlciB1c2luZyAnJGltcGxlRXZlbnQuYWRkSW4oXCIrZGF0YVswXStcIiwgLi4uLiknIG1ldGhvZD9cIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiQ2FuJ3QgRm91bmQgT2JqZWN0OidcIiArZGF0YVswXSsgXCInIGluICdcIisgY2FsbGJhY2srXCInICxGb3IgJy4nIG5vdGF0aW9uLCB1c2UgICckaW1wbGVFdmVudC5hZGRJbigpJyBtZXRob2Q/XCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFxuXG5cdFx0XHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS1FbmQgZm9yIGRvdCBub3RhaW9uXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZigkaW1wbGVFdmVudC5jb3JlLmhhc093blByb3BlcnR5KGNhbGxiYWNrKSl7XG5cdFx0XHRcdFx0XHRcdFx0IGNhbGxiYWNrPSRpbXBsZUV2ZW50LmNvcmVbY2FsbGJhY2tdO1xuXHRcdFx0XHQgIFx0XHRcdH1lbHNlIGlmKCRpbXBsZUV2ZW50LmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShjYWxsYmFjaykpe1xuXHRcdFx0XHQgIFx0XHRcdFx0Y2FsbGJhY2s9JGltcGxlRXZlbnQuY2FsbGJhY2tzW2NhbGxiYWNrXTtcblx0XHRcdFx0ICBcdFx0XHR9ZWxzZXtcblx0XHRcdFx0ICBcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBGb3VuZCBNZXRob2Q6XCIrY2FsbGJhY2srXCIgLFBsZWFzZSBSZWdpc3RlciBldmVudCBoYW5kbGVyIHVzaW5nICckaW1wbGVFdmVudC5hZGQoKScgbWV0aG9kP1wiKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdCAgXHRcdFx0fVxuXHRcdFx0XHQgIFx0Ly8tLS0tLS0tLS0tLS1jYWxsYmFjayBlbmRcblx0XHRcdFx0ICBcdFx0XHRcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdC8vLS0tLS0tLS0tLUFyZ3VtZW50cy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gIGxldCAkYXJncz1hcmdzLmxlbmd0aD8kaW1wbGVFdmVudC5hcmd1bWVudHNIYW5kbGVyKGVsLGFyZ3MpOmFyZ3M7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBsZXQgJGFyZ3M9YXJncztcblx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdFx0bGV0ICRhcmdzPSRpbXBsZUV2ZW50LmFyZ3VtZW50c0hhbmRsZXIoZWwsYXJncyk7XG5cdFx0XHRcdFx0XHRcdFx0XHQvL2FkZHMgZXZlbnQgYXMgZmlyc3QgYXJndW1lbnRzIGluIGFyZ3VtZW50IGFycmF5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyRhcmdzLnVuc2hpZnQoZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHQkYXJncy5wdXNoKGUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaW52b2tlIGNhbGxiYWNrIHdpdGggZ2l2ZW4gYXJndW1lbnRzIGFuZCBhc3NpZ24gdGhpcyB0byBjdXJyZW50IGVsZW1udFxuXHRcdFx0XHRcdFx0XHRcdFx0bGV0ICRyZXR1cm49Y2FsbGJhY2suYXBwbHkoZWwsJGFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLUVuZCBvZiBBcmd1bWVudHMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tUkVUVVJOIDotSWYgaXQgaGFzIHJldHVybiB0aGUgaGFuZGxlIHJldHVybi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdFxuXHRcdFx0XHRcdFx0XHQgaWYoJHJldHVybiB8fCB0eXBlb2YgJHJldHVybiA9PT0gXCJzdHJpbmdcIiB8fHR5cGVvZiAkcmV0dXJuID09PSBcIm51bWJlclwiKXsvL2ZvciBcIlwiIFwiICAgXCJcblx0XHRcdFx0XHRcdFx0XHQvLyBpZigkcmV0dXJuICl7Ly9mb3IgXCJcIiBcIiAgIFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0IFxuXHRcdFx0XHRcdFx0XHRcdCAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLWRhdGEtZmlsdGVyLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoZWwuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFGaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGV0IGZpbHRlcj1lbC5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUZpbHRlcik7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYoJGltcGxlRXZlbnQuY29yZS5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkcmV0dXJuPSRpbXBsZUV2ZW50LmNvcmVbZmlsdGVyXS5jYWxsKGVsLCRyZXR1cm4pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmKCRpbXBsZUV2ZW50LmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkcmV0dXJuPSRpbXBsZUV2ZW50LmNhbGxiYWNrc1tmaWx0ZXJdLmNhbGwoZWwsJHJldHVybik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gYXBwbHkgZmlsdGVyIFwiICtmaWx0ZXIgK1wiOiBNaXNzaW5nIGZpbHRlciBtZXRob2RcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBpZighJHJldHVybiAmJiB0eXBlb2YgJHJldHVybiAhPT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFx0Y29uc29sZS5lcnJvcihcIkVycm9yIGluIFwiKyRpbXBsZUV2ZW50LmluaXQuJGRhdGFGaWx0ZXIrXCIgTXVzdCByZXR1cm4gdmFsdWUgd2l0aCB2YWxpZCBkYXRhIHR5cGU7IGNoZWNrIHJldHVybiBmcm9tICdcIitmaWx0ZXIrIFwiJyBtZXRob2RcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyB9XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdH0vL0VORElmREFUQUZJTFRFUlxuXG5cblxuXHRcdFx0XHRcdFx0XHQvLy0tLS0tLS0tLS1GaW5hbGx5IHByb2NjZXNzIHRoZSByZXR1cm4gdG8gZW1iZWQgaW4gZG9jdW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9CeSBkZWZhdXQgLCBnaXZlIHRoZSBzY29wZSBvZiBwYXJlbnQgTm9kZVxuXHRcdFx0XHRcdFx0XHRcdCRpbXBsZUV2ZW50Lm1hbmFnZVJldHVybnMoZWwucGFyZW50Tm9kZSwkcmV0dXJuKTtcblxuXHRcdFx0XHRcdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRcdFx0XHRcdH0vL0VORElGUkVUVVJOXG5cblxuXHRcdFx0XHRcdFx0Ly8tLS0tLS0tLS0tLS1TZXQgdGhpcyBlbCggdHJhbnNmZXIgdmFsdWUgZnJvbSB0byBhbm90aGVyKWRhdGEtdmFsdWUgdG8gYW5vdGhlciBlbC9zXHRcdFxuXHRcdFx0XHRcdFx0aWYoZWwuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFTZXQpKXtcblx0XHRcdFx0XHRcdFx0XHR2YXIgYXJyeT0kaW1wbGVFdmVudC5nZXREYXRhKGVsLHRydWUpOy8vIHRydWUgcmV0dXJucyBba2V5LCB2YWx1ZV1cblx0XHRcdFx0XHRcdFx0XHRpZihBcnJheS5pc0FycmF5KGFycnkpKXtcblx0XHRcdFx0XHRcdFx0XHRcdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFTZXQpKSxmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZS5zZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUdldCwgYXJyeVswXSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGFycnlbMV0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblxuXG5cdFx0XHRcdFx0fTtcblxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4iLCIvL3JldHJpdmUgZGF0YSBmcm9tIERvbSwgdmFsaWRhdGUgZGF0YS5cblxuLy9SZXR1cm4ge30gd2l0aCBrZXkgYW5kIHZhbHVlLCB3aGVyZSBrZXkgaXMgbmFtZSBvciBkYXRhLWdldCwgYW5kIHZhbHVlIGlzIHZhbHVlPVwiXCIgb3IgZWwudmFsdWVcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERhdGEoZWwsYm9vbCl7XG5cdFx0Ly9Db250YWluZXIgZm9yIEtleSB2YWx1ZSBwYWlyXG5cdFx0XHR2YXIgcmVzdWx0PXt9O1xuXG5cdFx0XHR2YXIga2V5PWVsLmhhc0F0dHJpYnV0ZShcIm5hbWVcIik/ZWwuZ2V0QXR0cmlidXRlKCduYW1lJyk6ZWwuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFHZXQpO1xuXHRcdFx0XG5cdFx0XHRpZihrZXkpe1xuXHRcdFx0XHRsZXQgdmFsdWU9bnVsbDtcblx0XHRcdFx0aWYoZWwudmFsdWUgfHwgZWwudmFsdWU9PT1cIlwiKXtcblx0XHRcdFx0XHR2YWx1ZT1lbC52YWx1ZTtcblx0XHRcdFx0fWVsc2UgaWYoZWwuaGFzQXR0cmlidXRlKCd2YWx1ZScpKXtcblx0XHRcdFx0XHR2YWx1ZT1lbC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG5cblx0XHRcdFx0fVxuXHRcdFx0XHQvL3ZhciB2YWx1ZT1lbC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJyk/ZWwuZ2V0QXR0cmlidXRlKCd2YWx1ZScpOmVsLnZhbHVlO1xuXHRcdFx0XHRpZih2YWx1ZT09PVwiXCIgfHwgdmFsdWUpe1xuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tJGltcGxlRXZlbnQuaW5pdC4kZGF0YUZpbHRlci0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0XHRcdFx0XHRpZihlbC5oYXNBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUZpbHRlcikpe1xuXHRcdFx0XHRcdFx0XHR2YXIgZmlsdGVyPWVsLmdldEF0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhRmlsdGVyKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmKCRpbXBsZUV2ZW50LmNvcmUuaGFzT3duUHJvcGVydHkoZmlsdGVyKSl7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZT0kaW1wbGVFdmVudC5jb3JlW2ZpbHRlcl0uY2FsbChlbCx2YWx1ZSk7XG5cblx0XHRcdFx0XHRcdFx0XHR9ZWxzZSBpZigkaW1wbGVFdmVudC5jYWxsYmFja3MuaGFzT3duUHJvcGVydHkoZmlsdGVyKSl7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZT0kaW1wbGVFdmVudC5jYWxsYmFja3NbZmlsdGVyXS5jYWxsKGVsLHZhbHVlKTtcblx0XHRcdFx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gYXBwbHkgZmlsdGVyXCIgK2ZpbHRlciArXCI6IE1pc3NpbmcgZmlsdGVyIG1ldGhvZFwiKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRpZighdmFsdWUpe1xuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBcIiskaW1wbGVFdmVudC5pbml0LiRkYXRhRmlsdGVyK1wiOiBNdXN0IHJldHVybiB2YWx1ZSB3aXRoIHZhbGlkIGRhdGEgdHlwZTsgY2hlY2sgcmV0dXJuIGZyb20gJ1wiK2ZpbHRlcisgXCInIG1ldGhvZFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHR9XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0fS8vRU5ESWZEQVRBRklMVEVSXG5cdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdH0vL0VORElGVkFMVUVcblxuXHRcdFx0XHQvL0lmIFNpbmdsZSBkYXRhIGlzIGFza2VkIGEgY3VycmVudCBlbGVtZW50XG5cdFx0XHRcdGlmKGJvb2w9PXRydWUpIHJldHVybiBba2V5LCB2YWx1ZV07XG5cblx0XHRcdFx0aWYoZWwuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFWYWxpZGF0ZSkpe1xuXHRcdFx0XHRcdHZhciB2YWxpZGF0ZT1lbC5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YVZhbGlkYXRlKTtcblx0XHRcdFx0XHRpZigkaW1wbGVFdmVudC5jYWxsYmFja3MuaGFzT3duUHJvcGVydHkodmFsaWRhdGUpKXtcblx0XHRcdFx0XHRcdGlmKCEkaW1wbGVFdmVudC5jYWxsYmFja3NbdmFsaWRhdGVdLmNhbGwoZWwsa2V5LHZhbHVlKSl7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5oYXNFcnJvcj10cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIkVycm9yIGluIFwiICsgJGltcGxlRXZlbnQuaW5pdC4kZGF0YVZhbGlkYXRlICsgXCIgdW5hYmxlIHRvIGZpbmQgY2FsbGJhY2sgOlwiK3ZhbGlkYXRlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHRba2V5XT12YWx1ZTtcblxuXHRcdFx0fS8vRU5EIE9GIElGIEtFWVxuXHRcdFx0XHRcblxuXHRcdFx0Ly8gfS8vZW5kIG9mIGNoZWNrIGZvciBzZWxmIGRhdGEtZ2V0XG5cdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHQvL1JldHJpdmUgZGF0YSBmcm9tIGNoaWxkIGVsZW1lbnRzIGlzIGhhcyBhbnlcblx0XHRcdGlmKGVsLmNoaWxkRWxlbWVudENvdW50KXtcblx0XHRcdFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdbJyskaW1wbGVFdmVudC5pbml0LiRkYXRhR2V0KyddLCBbbmFtZV0nKSxmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIga2V5PWUuaGFzQXR0cmlidXRlKFwibmFtZVwiKT9lLmdldEF0dHJpYnV0ZSgnbmFtZScpOmUuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFHZXQpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoa2V5KXtcblx0XHRcdFx0XHRsZXQgdmFsdWU9bnVsbDtcblx0XHRcdFx0XHRpZihlLnZhbHVlIHx8IGUudmFsdWU9PT1cIlwiKXtcblx0XHRcdFx0XHRcdHZhbHVlPWUudmFsdWU7XG5cdFx0XHRcdFx0fWVsc2UgaWYoZS5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpe1xuXHRcdFx0XHRcdFx0dmFsdWU9ZS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvL3ZhciB2YWx1ZT1lLmhhc0F0dHJpYnV0ZSgndmFsdWUnKT9lLmdldEF0dHJpYnV0ZSgndmFsdWUnKTplLnZhbHVlO1xuXHRcdFx0XHRcdGlmKHZhbHVlPT09XCJcIiB8fCB2YWx1ZSl7XG5cdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLSRpbXBsZUV2ZW50LmluaXQuJGRhdGFGaWx0ZXItLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0XHRcdFx0XHRpZihlLmhhc0F0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhRmlsdGVyKSl7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGZpbHRlcj1lLmdldEF0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhRmlsdGVyKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoJGltcGxlRXZlbnQuY29yZS5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU9JGltcGxlRXZlbnQuY29yZVtmaWx0ZXJdLmNhbGwoZSx2YWx1ZSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmKCRpbXBsZUV2ZW50LmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU9JGltcGxlRXZlbnQuY2FsbGJhY2tzW2ZpbHRlcl0uY2FsbChlLHZhbHVlKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGFwcGx5IGZpbHRlclwiICtmaWx0ZXIgK1wiOiBNaXNzaW5nIGZpbHRlciBtZXRob2RcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmKCF2YWx1ZSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gXCIrICRpbXBsZUV2ZW50LmluaXQuJGRhdGFGaWx0ZXIrXCIgOiBNdXN0IHJldHVybiB2YWx1ZSB3aXRoIHZhbGlkIGRhdGEgdHlwZTsgY2hlY2sgcmV0dXJuIGZyb20gJ1wiK2ZpbHRlcisgXCInIG1ldGhvZFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0fS8vRU5ESWZEQVRBRklMVEVSXG5cdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR9Ly9FTkRJRlZBTFVFXG5cdFx0XHRcdFx0aWYoZS5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YVZhbGlkYXRlKSl7XG5cdFx0XHRcdFx0XHR2YXIgdmFsaWRhdGU9ZS5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YVZhbGlkYXRlKTtcblx0XHRcdFx0XHRcdGlmKCRpbXBsZUV2ZW50LmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eSh2YWxpZGF0ZSkpe1xuXHRcdFx0XHRcdFx0XHR2YXIgaXNWYWxpZD0kaW1wbGVFdmVudC5jYWxsYmFja3NbdmFsaWRhdGVdLmNhbGwoZSxrZXksdmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRpZihBcnJheS5pc0FycmF5KGlzVmFsaWQpKXtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC52YWxpZGF0ZT1bXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZihpc1ZhbGlkPT09ZmFsc2Upe1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5oYXNFcnJvcj10cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gXCIgKyRpbXBsZUV2ZW50LmluaXQuJGRhdGFWYWxpZGF0ZSsgXCIgdW5hYmxlIHRvIGZpbmQgY2FsbGJhY2sgOlwiK3ZhbGlkYXRlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXN1bHRba2V5XT12YWx1ZTtcblx0XHRcdFx0fS8vRU5EIE9GIElGIEtFWVxuXG5cdFx0XHRcdFxuXHRcdFx0fSk7XG5cdH0vL0VORElGQ0hJTERDT1VOVFxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fTsvL2VuZCBvZiBnZXREYXRhKCk7XHRcdFxuXG4iLCIvL3JldHJpdmUgZGF0YSBmcm9tIERvbSwgdmFsaWRhdGUgZGF0YS5cblxuLy9SZXR1cm4ge30gd2l0aCBrZXkgYW5kIHZhbHVlLCB3aGVyZSBrZXkgaXMgbmFtZSBvciBkYXRhLWdldCwgYW5kIHZhbHVlIGlzIHZhbHVlPVwiXCIgb3IgZWwudmFsdWVcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldERhdGEoZWwsb2JqKXtcblx0XHQvL0NvbnRhaW5lciBmb3IgS2V5IHZhbHVlIHBhaXJcblxuXG5cdFx0XHRsZXQga2V5PWVsLmhhc0F0dHJpYnV0ZShcIm5hbWVcIik/ZWwuZ2V0QXR0cmlidXRlKCduYW1lJyk6ZWwuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFHZXQpO1xuXHRcdFx0XG5cdFx0XHRpZihvYmouaGFzT3duUHJvcGVydHkoa2V5KSl7XG5cdFx0XHRcdGlmKGVsLmhhc0F0dHJpYnV0ZSgndmFsdWUnKSl7XG5cdFx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKCd2YWx1ZScsIG9ialtrZXldKTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0ZWwudmFsdWU9b2JqW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXG5cdFx0XHQvLyB9Ly9lbmQgb2YgY2hlY2sgZm9yIHNlbGYgc2V0RGF0YVxuXHRcdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0Ly9SZXRyaXZlIGRhdGEgZnJvbSBjaGlsZCBlbGVtZW50cyBpcyBoYXMgYW55XG5cdFx0XHRpZihlbC5jaGlsZEVsZW1lbnRDb3VudCl7XG5cdFx0XHRcdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnWycrJGltcGxlRXZlbnQuaW5pdC4kZGF0YUdldCsnXSwgW25hbWVdJyksZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0bGV0IGtleT1lLmhhc0F0dHJpYnV0ZShcIm5hbWVcIik/ZS5nZXRBdHRyaWJ1dGUoJ25hbWUnKTplLmdldEF0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhR2V0KTtcblx0XHRcdFx0XHRpZihvYmouaGFzT3duUHJvcGVydHkoa2V5KSl7XG5cdFx0XHRcdFx0XHRpZihlLnZhbHVlIHx8IGUudmFsdWU9PT1cIlwiKXtcblx0XHRcdFx0XHRcdFx0ZS52YWx1ZT1vYmpba2V5XTtcblx0XHRcdFx0XHRcdH1lbHNlIGlmKGUuaGFzQXR0cmlidXRlKCd2YWx1ZScpKXtcblx0XHRcdFx0XHRcdFx0ZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJyxvYmpba2V5XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fS8vRU5ESUZDSElMRENPVU5UXG5cdFx0XG5cdH07Ly9lbmQgb2YgZ2V0RGF0YSgpO1x0XHRcblxuIiwiLy9EYXRhLWJhc2UgaW4gSnNvbiBmb3JtYXRcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGFzdG9yZShlbCwgX2RlZmF1bHQpeyBcblx0bGV0IHN0b3JlPXt9O1xuXHRpZihlbCAmJiBlbC5ub2RlTmFtZSl7XG5cdFx0XHQvL2lmIGl0cyBoYXMgZGF0YS1zdG9yZVxuXHRcdFx0aWYoZWwuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFTdG9yZSkpe1xuXHRcdFx0XHRsZXQgZGF0YT1lbC5nZXRBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YVN0b3JlKS50cmltKCk7XG5cdFx0XHRcdHRyeXtcblx0XHRcdFx0XHRzdG9yZT1KU09OLnBhcnNlKGRhdGEpXG5cdFx0XHRcdH0gY2F0Y2goZSl7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlBsZWFzZSBQcm92aWRlIFZhbGlkIEpTT04gZGF0YTogUHJvdmlkZWQ6IFwiK2RhdGEpO1xuXG5cdFx0XHRcdFx0aWYoX2RlZmF1bHQpe1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiVXNpbmcgZGVmYXVsdCBkYXRhU3RvcmUgaW5zdGVhZCBcIik7XG5cdFx0XHRcdFx0XHQgc3RvcmU9X2RlZmF1bHQ7XG5cdFx0XHRcdFx0XHQgZWwuc2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFTdG9yZSwgSlNPTi5zdHJpbmdpZnkoc3RvcmUpKTtcblxuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0aWYoX2RlZmF1bHQpe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIlVzaW5nIGRlZmF1bHQgZGF0YVN0b3JlIGluc3RlYWQgXCIpO1xuXHRcdFx0XHRcdFx0IHN0b3JlPV9kZWZhdWx0O1xuXHRcdFx0XHRcdFx0IGVsLnNldEF0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhU3RvcmUsIEpTT04uc3RyaW5naWZ5KHN0b3JlKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1lbHNle1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlBsZWFzZSBQcm92aWRlICBIVE1MIGVsZW1lbnQgYXMgYW4gYXJndW1lbnRzXCIpO1xuXG5cdFx0fVxuXG5cdHJldHVybiB7XG5cdFx0c3RvcmU6c3RvcmUsXG5cdFx0Z2V0OmZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnN0b3JlO30sXG5cdFx0c2V0OmZ1bmN0aW9uKCl7IGVsLnNldEF0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhU3RvcmUsIEpTT04uc3RyaW5naWZ5KHRoaXMuc3RvcmUpKX0sXG5cdH1cbn07XG5cblx0Il0sInNvdXJjZVJvb3QiOiIifQ==