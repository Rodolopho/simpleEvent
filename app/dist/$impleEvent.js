!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);let i={$useArrow:!0,$event:"event",$eventOnce:"event-once",$useVar:!0,$seperatorArrow:/([a-z]+)[\s]*[=][>][\s]*([\w-\.]+)([(][^)]*[)])?/,$seperatorArrowGlobal:new RegExp(/([a-z]+)[\s]*[=][>][\s]*([\w-\.]+)([(][^)]*[)])?/,"g"),$reserveEventArgument:!0,$seperator:/[:]/g,$className:".return",$dataFeed:"data-feed",$dataGet:"data-get",$dataTemplate:"data-template",$dataComponent:"data-component",$dataFilter:"data-filter",$dataValidate:"data-validate",$dataSet:"data-set",$dataStore:"data-store",$dataAppend:"data-append",$returnTo:"el",$root:document,$global:document,$defaultTemplate:'<li class="return-list-item"></li>'};var r={id:0,list:{},cloneElement:function(e){return this.obj2Html(this.html2Obj(e,{},1))},html2Obj:function(e,t,n){if(t[n]={},3==e.nodeType)e.nodeValue.trim()&&(t[n].isText=!0,t[n].text=e.nodeValue);else if(8==e.nodeType);else{t[n].tagName=e.nodeName.toLowerCase(),t[n].attributes={};for(var i=0;i<e.attributes.length;i++)e.attributes.length,t[n].attributes[e.attributes[i].name]=e.attributes[i].value;if(e.hasChildNodes){t[n].hasChild=!0,t[n].childCount=e.childNodes.length;for(var r=0;r<t[n].childCount;r++)e.childNodes[r]&&this.html2Obj(e.childNodes[r],t[n],r+1)}}return t},obj2Html:function(e,t){if(t){for(var n=1;n<=e.childCount;n++)if(e[n].isText){var i=document.createTextNode(e[n].text);t.appendChild(i)}else if(e[n].tagName){(i=$impleEvent.createElement(e[n].tagName,e[n].attributes)).id&&(i.id=i.id+n),t.appendChild(i),this.obj2Html(e[n],i)}}else t=$impleEvent.createElement(e[1].tagName,e[1].attributes),this.obj2Html(e[1],t);return t},to:function(e,t,n){e.hasAttribute("render-id")||(this.id=this.id+1,e.setAttribute("render-id",this.id),this.list[this.id]={obj:this.html2Obj(t,{},1)});var i=e.getAttribute("render-id"),r=this.list[i].obj;this.obj2Html(r,!1);Array.prototype.forEach.call(n,(function(t){var n=$impleEvent.render.obj2Html(r,!1);e.appendChild(n),$impleEvent.manageReturns(n,t),$impleEvent.update(n)}))}};function l(e,t){if(e.hasAttribute(t.split(".")[0].replace(/([a-z])([A-Z])/g,(e,t,n)=>t+"-"+n.toLowerCase())))return function(e,t,n){return"value"===n?$impleEvent.parseJSON(e.getAttribute(t)):{element:e,attribute:t,value:$impleEvent.parseJSON(e.getAttribute(t)),get(){return this.value},set(e){this.element.setAttribute(this.attribute,JSON.stringify(e))},save(){this.set(this.value)}}}(e,t.split(".")[0].replace(/([a-z])([A-Z])/g,(e,t,n)=>t+"-"+n.toLowerCase()),t.split(".")[1]);if(e.getAttribute($impleEvent.init.$dataGet)===t){let t=e.value?e.value:e.getAttribute("value");return $impleEvent.parseJSON(t)}if(e.getAttribute("name")===t){let t=e.value?e.value:e.getAttribute("value");return $impleEvent.parseJSON(t)}return"value"===t?$impleEvent.parseJSON(e.value):(console.log("unable to find attribute:"+t+" in "),console.log(e),null)}function o(e,t){if(e.hasAttribute($impleEvent.init.$dataAppend)||(e.innerHTML=""),"string"==typeof t||"number"==typeof t)e.appendChild(document.createTextNode(t));else{if(!t.nodeName)return!1;{let n=$impleEvent.render.cloneElement(t);e.appendChild(n),$impleEvent.update(n)}}}function s(e,t,n){for(var i=0;i<t.length;i++){let r=$impleEvent.render.cloneElement(n);if(r.id&&(r.id=r.id+"_"+i),r.setAttribute("index",i),e.appendChild(r),r.childElementCount)$impleEvent.manageReturns(r,t[i]);else if("string"==typeof t[i]||"number"==typeof t[i]||t[i].nodeName){if(r.hasAttribute($impleEvent.init.$dataFeed))return!1;o(r,t[i])}$impleEvent.update(r)}}let u={log:function(e){console.log(e)},logEvent:function(e){console.log(e.type,"\n",e)},logFunc:function(e,t,n,i,r,a){e=e.trim(),$impleEvent.callbacks.hasOwnProperty(e)?console.log($impleEvent.callbacks[e](event,t,n,i,r,a)):u.hasOwnProperty(e)&&console.log(u[e](event,t,n,i,r,a))},return:function(e,t,n){return isFinite(n)&&(e=t,n={type:"interval/timeout"}),e||(console.warn("Returning empty string  on "+n.type)," ")},returnTo:function(e,t,n,i){return isFinite(i)&&(e=t,t=n,i={type:"interval/timeout"}),t&&document.getElementById(e)?(t=t.replace(/\/s/g," ").trim(),{returnTo:{el:document.getElementById(e),data:t}}):(console.warn("Returning empty string  on "+i.type)," ")},timeout:function(e,t,n){if(!isFinite(t))return console.log("please Provide Time in ms; for timeout function"),!1;if($impleEvent.core.hasOwnProperty(e)){setTimeout($impleEvent.core[e].bind(this),t)}else{if(!$impleEvent.callbacks.hasOwnProperty(e))return console.error("Can't Found Method:"+e+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;{let i=setTimeout($impleEvent.callbacks[e].bind(this,[i,t]),n)}}},interval:function(e,t,n){if(!isFinite(t))return console.log("please Provide Time in ms; for interval function"),!1;if($impleEvent.core.hasOwnProperty(e)){console.log("wow");let i=setInterval($impleEvent.core[e].bind(this,[i,t]),n)}else{if(!$impleEvent.callbacks.hasOwnProperty(e))return console.error("Can't Found Method:"+e+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;{let i=setInterval($impleEvent.callbacks[e].bind(this,[i,t]),n)}}},close:function(e,t){let n=id.nodeType?id:"parent"==id?this.parentNode:document.getElementById(id);if(n){if("none"==n.style.display)return!1;if(!0===t){return!!confirm("Are you sure want to close?")&&(n.style.display="none")}n.style.display="none"}else console.warn("close error:-Cannot Find Element with id:"+id)},openClose:function(e,t){let n=e.nodeType?e:"parent"==e?this.parentNode:document.getElementById(e);if(n){if("none"==n.style.display)return n.style.display="initial",!1;if(!0===t){return!!confirm("Are you sure want to close?")&&(n.style.display="none")}n.style.display="none"}else console.warn("openClose error:-Cannot Find Element to close:"+e)},typewriter:function(e,t){let n=$impleEvent.createElement("input",{style:"outline:none; border:none;font-style:italic;padding:0px;margin:0px;width:1rem;font:inherit;",placeholder:"TypeWriter"}),i=this;n.onclick=function(e){e.stopPropagation()},this.style.position="relative",n.value=this.value?this.value:this.getAttribute("value"),this.appendChild(n),n.onkeyup=function(e){8!=e.which?(i.setAttribute("value",""),$impleEvent.manageReturns(i,this.value,!0),n.value=""):console.log(this.previousSibling)},n.onchange=function(){n.parentNode.removeChild(n)},n.onblur=function(){n.parentNode.removeChild(n)},n.focus()},dataChanger:function(e,t){if(this.hasAttribute($impleEvent.init.$dataGet)){let t=$impleEvent.createElement("div",{style:"padding:5px;border:1px solid #ccc;background:#ccc;border-radius:5px;postion:absolute;z-index:12345678998654;"}),n=$impleEvent.createElement("label",{style:"font-weight:bold;margin:0px 5px;background:#ccc"}),i=$impleEvent.createElement("input",{style:"outline:none; border:none;border-bottom:1px solid #eee;"});n.innerText=this.getAttribute($impleEvent.init.$dataGet),i.value=this.getAttribute("value"),t.appendChild(n),t.appendChild(i),t.style.position="absolute",t.style.zIndex=0x7048861b0fa4,t.style.top="100%",t.style.opacity="0.9";let r=this;t.onclick=function(e){e.stopPropagation()},this.style.position="relative",n.innerText=this.getAttribute($impleEvent.init.$dataGet),i.value=this.value?this.value:this.getAttribute("value"),this.appendChild(t),!0===e?i.onkeyup=function(){r.setAttribute("value",this.value),$impleEvent.manageReturns(r,this.value),i.onchange=function(){t.parentNode.removeChild(t)}}:i.onchange=function(){r.setAttribute("value",this.value),$impleEvent.manageReturns(r,this.value),t.parentNode.removeChild(t)}}},carousel:function(e,t){let n=this.getElementsByTagName("img");this.hasAttribute("index")||this.setAttribute("index",0);let i=parseInt(this.getAttribute("index"));for(let e=0;e<n.length;e++)n[e].style.display="none";i++,i>n.length&&(i=1),n[i-1].style.display="block",this.setAttribute("index",i)},addClassName:function(e,t){t.nodeType||("parent"==t?this.parentNode:document.getElementById(t));let n=this;t&&document.getElementById(t)&&(n=document.getElementById(t)),n.classList.add(e)},removeClassName:function(e,t){let n=this;t&&document.getElementById(t)&&(n=document.getElementById(t)),n.classList.remove(e)},toggleClassName:function(e,t){let n=this;t&&document.getElementById(t)&&(n=document.getElementById(t)),n.classList.toggle(e)},css:function(e,t,n,i){this.style.transition="all 0.35s",3==arguments.length?this.style[e]=t:(arguments.length=document.getElementById(n))?(document.getElementById(n).style.transition="all 0.35s",document.getElementById(n).style[e]=t):console.warn("Something Wrong with arguments you provided, unable to appy style/css on "+i.type)},validate:{email:{test:/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/,success:"You have provided Valid email Id",fail:"Please provide Valid Email address"},number:{test:/^\d+$/,success:"",fail:"Please provide number only"},required:{test:/\S+/,success:"",fail:"This field cant be empty"}}};const c={eventManager:function(e,t,n){for(let i=0;i<t.length;i++){if(!t[i].trim())return!1;!function(){let[r,a,l]=[null,[],null];if(!0===$impleEvent.init.$useArrow){if(!$impleEvent.init.$seperatorArrow.test(t[i]))return console.warn("Insufficient Agruments:'NaN"+$impleEvent.init.$seperatorArrow),!1;if([,r,l,a]=$impleEvent.init.$seperatorArrow.exec(t[i]),a=a&&a.replace(/^[(]|[)]$/g,"").trim()?a.replace(/^[(]|[)]$/g,"").trim().split(/[,]/):[],!r||!l)return console.warn("Insufficient Agruments:'NaN"+$impleEvent.init.$seperatorArrow),!1}else{if(data=t[i].split($impleEvent.init.$seperator),data.length<2)return console.warn("Insufficient Agruments: Must provided atleast eventname and callback  or event attribute format is not understood:used seperator is "+$impleEvent.init.$seperator),!1;r=data[0],l=data[1],a=data.slice(2)}if(n)r===n&&$impleEvent.callbackHandler(e,l,a,n);else if("invoke"!==r)if("call"!=r)if(r.match(/timeout|interval/)){if(!isFinite(a[0]))return console.error("please Provide Time in ms; for interval/timeout event"),!1;{let t=a[0];if(console.log(a.shift()),"interval"==r)var o=setInterval((function(){$impleEvent.callbackHandler(e,l,a,o)}),t);else var s=setTimeout((function(){$impleEvent.callbackHandler(e,l,a,s)}),t)}}else e.addEventListener(r,(function t(n){n.removeEventListener=function(){e.removeEventListener(this.type,t)},$impleEvent.callbackHandler(e,l,a,n)}),!1);else window.addEventListener("load",(function(t){$impleEvent.callbackHandler(e,l,a,t)}))}()}},callbackHandler:function(e,t,n,i){let r=t.split(/\./);if(2===r.length){if(!$impleEvent.inCallbacks.hasOwnProperty(r[0]))return console.error("Can't Found Object:'"+r[0]+"' in '"+t+"' ,For '.' notation, use  '$impleEvent.addIn()' method?"),!1;if(!$impleEvent.inCallbacks[r[0]].hasOwnProperty(r[1]))return console.error("Can't Found Method:"+r[1]+"in "+r[0]+"Object : ref->"+t+" ,Please Register event handler using '$impleEvent.addIn("+r[0]+", ....)' method?"),!1;t=$impleEvent.inCallbacks[r[0]][r[1]]}else if($impleEvent.core.hasOwnProperty(t))t=$impleEvent.core[t];else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;t=$impleEvent.callbacks[t]}let a=$impleEvent.argumentsHandler(e,n);a.push(i);let l=t.apply(e,a);if(l||"string"==typeof l||"number"==typeof l){if(e.getAttribute($impleEvent.init.$dataFilter)){let t=e.getAttribute($impleEvent.init.$dataFilter);$impleEvent.core.hasOwnProperty(t)?l=$impleEvent.core[t].call(e,l):$impleEvent.callbacks.hasOwnProperty(t)?l=$impleEvent.callbacks[t].call(e,l):console.error("Unable to apply filter "+t+": Missing filter method")}$impleEvent.manageReturns(e.parentNode,l)}if(e.hasAttribute($impleEvent.init.$dataSet)){var o=$impleEvent.getData(e,!0);Array.isArray(o)&&Array.prototype.forEach.call(document.querySelectorAll(e.getAttribute($impleEvent.init.$dataSet)),(function(e){e.setAttribute($impleEvent.init.$dataGet,o[0]),e.setAttribute("value",o[1])}))}},argumentsHandler:function(e,t){return t&&(t=t.map((function(t){if("string"==typeof t){try{return JSON.parse(t.trim().replace(/^'/,'"').replace(/'$/,'"'))}catch(e){}if(t.match(/^\$+/)){let i=e,r=t.match(/\$/g).length;if(r>1)for(var n=1;n<r&&(i.parentNode&&"HTML"!==i.tagName);n++)i=i.parentNode;let a=t.replace(/^\$+/,"").trim();return a?l(i,a):i}if(/^<.+>/.test(t)){let n=e,i=t.match(/<(.+)>(\[(\d+)\])?(\..+)?/);if(i[1])return n="parent"===i[1]?n.parentNode:"next"===i[1]?n.nextElementSibling:"previous"===i[1]?n.previousElementSibling:"first"===i[1]?n.parentElement.firstElementChild:"last"===i[1]?n.parentElement.lastElementChild:"nth"===i[1]&&isFinite(i[3])?n.parentElement.children:document.querySelectorAll(i[1]),isFinite(i[3])?(n=n[parseInt(i[3])],i[4]?l(n,i[4].replace(/^\./,"")):n):i[4]?l(n,i[4].replace(/^\./,"")):n}return $impleEvent.vars.hasOwnProperty(t)?$impleEvent.vars[t]:void 0}return t}))),t},manageReturns:function(e,t,n){if("string"!=typeof t&&"number"!=typeof t&&!t.nodeName||!0!==n||!e.classList.contains($impleEvent.init.$className.replace(".",""))){if("string"==typeof t||"number"==typeof t||t.nodeName)return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),(function(e){if(e.hasAttribute($impleEvent.init.$dataFeed)||e.hasAttribute($impleEvent.init.$dataComponent))return!1;o(e,t)})),!0;if("[object Object]"===Object.prototype.toString.call(t))return t.hasOwnProperty("global")&&t.global&&$impleEvent.manageReturns($impleEvent.init.$global,t.global),t.hasOwnProperty("grandParent")&&t.grandParent&&$impleEvent.manageReturns(e.parentNode.parentNode,t.grandParent),t.hasOwnProperty("parent")&&t.parent&&$impleEvent.manageReturns(e.parentNode,t.parent),t.hasOwnProperty("self")&&t.self&&$impleEvent.manageReturns(e,t.self),Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className+"["+$impleEvent.init.$dataFeed+"]"),(function(e){let n=e.getAttribute($impleEvent.init.$dataFeed).trim(),i=null;if(n){let a=n.split(".");if(!t.hasOwnProperty(a[0]))return!1;if(a.length)if(1==a.length)i=t[n];else if(a.length>1){let e=t;for(var r=0;r<a.length;r++){if(!e[a[r]]){console.error("Cannot find:"+n+" in  the return "+JSON.stringify(t));break}e=e[a[r]]}i=e}i&&!1===o(e,i)&&(console.error("Only String , Number and Html Element  can be embeded; Cannot embed "+i+"for "+n+"in : "+e.nodeName.toLowerCase()+" Html Element"),console.log(e))}else console.warn("Make sure you have :"+$impleEvent.init.$dataFeed+" attribute to handle given return"+t)})),t.hasOwnProperty("returnTo")&&t.returnTo&&(t.returnTo[$impleEvent.init.$returnTo]&&t.returnTo[$impleEvent.init.$returnTo].nodeName?$impleEvent.manageReturns(t.returnTo[$impleEvent.init.$returnTo],t.returnTo.data,!0):console.error("Error@returnTo : Element not found:Please give returnTo."+$impleEvent.init.$returnTo+" a valid html element")),void(t.hasOwnProperty("returnToMany")&&"[object Array]"===Object.prototype.toString.call(t.returnToMany)&&t.returnToMany.forEach((e,t)=>{e[$impleEvent.init.$returnTo]&&e[$impleEvent.init.$returnTo].nodeName?$impleEvent.manageReturns(e[$impleEvent.init.$returnTo],e.data,!0):console.error("Error@returnToMany : Element not found @ array-index "+t+":Please give "+$impleEvent.init.$returnTo+" a valid html element at index "+t)}));if("[object Array]"===Object.prototype.toString.call(t)){if(1==n){let n=null;if(e.hasAttribute($impleEvent.init.$dataTemplate)){let t=e.getAttribute($impleEvent.init.$dataTemplate);n=$impleEvent.html(t)}else if(e.hasAttribute($impleEvent.init.$dataComponent)){let t=e.getAttribute($impleEvent.init.$dataComponent);n=document.querySelector(t)}if(n&&n.nodeName)return e.hasAttribute($impleEvent.init.$dataAppend)||(e.innerHTML=""),void s(e,t,n)}let i=null,r=null;if(e.querySelector("["+$impleEvent.init.$dataTemplate+"]")){let t=e.querySelector("["+$impleEvent.init.$dataTemplate+"]").getAttribute($impleEvent.init.$dataTemplate);if(i=$impleEvent.html(t),!i)return console.error("Please provide valid html Element e.g <li></li>;  Provided :-"+t),!1;r=e.querySelector("["+$impleEvent.init.$dataTemplate+"]")}else{if(!e.querySelector("["+$impleEvent.init.$dataComponent+"]"))return console.info("Array returns need ["+$impleEvent.init.$dataTemplate+"] or ["+$impleEvent.init.$dataComponent+"] holder: No such holder found "),!1;{let t=e.querySelector("["+$impleEvent.init.$dataComponent+"]").getAttribute($impleEvent.init.$dataComponent);if(i=document.querySelector(t),!i)return console.error("Please provide valid querySelector:  Provided :-"+t),!1;r=e.querySelector("["+$impleEvent.init.$dataComponent+"]")}}r.hasAttribute($impleEvent.init.$dataAppend)||(r.innerHTML=""),s(r,t,i)}}else!e.hasAttribute($impleEvent.init.$dataFeed)&&o(e,t)}};c.render=r,c.getData=function(e,t){var n={},i=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(i){let l=null;if(e.value||""===e.value?l=e.value:e.hasAttribute("value")&&(l=e.getAttribute("value")),(""===l||l)&&e.hasAttribute($impleEvent.init.$dataFilter)){var r=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(r)?l=$impleEvent.core[r].call(e,l):$impleEvent.callbacks.hasOwnProperty(r)?l=$impleEvent.callbacks[r].call(e,l):console.error("Unable to apply filter"+r+": Missing filter method"),!l)return console.error("Error in "+$impleEvent.init.$dataFilter+": Must return value with valid data type; check return from '"+r+"' method"),!1}if(1==t)return[i,l];if(e.getAttribute($impleEvent.init.$dataValidate)){var a=e.getAttribute($impleEvent.init.$dataValidate);$impleEvent.callbacks.hasOwnProperty(a)?$impleEvent.callbacks[a].call(e,i,l)||(n.hasError=!0):console.log("Error in "+$impleEvent.init.$dataValidate+" unable to find callback :"+a)}n[i]=l}return e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),(function(e){var t=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(t){let l=null;if(e.value||""===e.value?l=e.value:e.hasAttribute("value")&&(l=e.getAttribute("value")),(""===l||l)&&e.hasAttribute($impleEvent.init.$dataFilter)){var i=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(i)?l=$impleEvent.core[i].call(e,l):$impleEvent.callbacks.hasOwnProperty(i)?l=$impleEvent.callbacks[i].call(e,l):console.error("Unable to apply filter"+i+": Missing filter method"),!l)return console.error("Error in "+$impleEvent.init.$dataFilter+" : Must return value with valid data type; check return from '"+i+"' method"),!1}if(e.getAttribute($impleEvent.init.$dataValidate)){var r=e.getAttribute($impleEvent.init.$dataValidate);if($impleEvent.callbacks.hasOwnProperty(r)){var a=$impleEvent.callbacks[r].call(e,t,l);Array.isArray(a)&&(n.validate=[]),!1===a&&(n.hasError=!0)}else console.error("Error in "+$impleEvent.init.$dataValidate+" unable to find callback :"+r)}n[t]=l}})),n},c.setData=function(e,t){let n=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);t.hasOwnProperty(n)&&(e.hasAttribute("value")?e.setAttribute("value",t[n]):e.value=t[n]),e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),(function(e){let n=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);t.hasOwnProperty(n)&&(e.value||""===e.value?e.value=t[n]:e.hasAttribute("value")&&e.setAttribute("value",t[n]))}))},c.dataStore=function(e,t){let n={};if(e&&e.nodeName)if(e.hasAttribute($impleEvent.init.$dataStore)){let i=e.getAttribute($impleEvent.init.$dataStore).trim();try{n=JSON.parse(i)}catch(r){if(console.error("Please Provide Valid JSON data: Provided: "+i),!t)return null;console.warn("Using default dataStore instead "),n=t,e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(n))}}else t&&(console.warn("Using default dataStore instead "),n=t,e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(n)));else console.error("Please Provide  HTML element as an arguments");return{store:n,get:function(){return this.store},set:function(){e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(this.store))}}},c.callbacks={},c.inCallbacks={},c.core=u,c.init=i,c.vars={},c.parseJSON=function(e){try{return JSON.parse(e)}catch(t){return e}},c.fire=function(e,t){if(e&&e.nodeName){let[n,i]=[[],null];[,i,n]=/[\s]*([\w-\.]+)([(][^)]*[)])?/.exec(t),i?(n?(n=n.replace(/[()]/g,"").split(/[,]/),!0===c.init.$reserveEventArgument&&n.shift()):n=[],c.callbackHandler(e,i,n,null)):console.error("Provide valid method, Provided "+i)}else console.error("Provide Html Element, Provided "+e)},c.invoke=function(e,t){let n=t||"invoke";if(e&&e.nodeName&&e.hasAttribute(this.init.$event)){let t=e.getAttribute(this.init.$event);if(t.trim())if(!0===this.init.$useArrow){let i=t.replace(c.init.$seperatorArrowGlobal,"");i.replace(/[,;]/g,"").trim()&&(console.error("Invalid syntax defination:'"+i,e),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(e,t.match(this.init.$seperatorArrowGlobal),n)}else this.eventManager(e,t.split(/\s+/),n)}},c.return=function(e,t){return this.manageReturns(e.parentNode,t)},c.reset=function(e,t){let n=e.parentNode;n.nodeType&&(!0===t?n.querySelectorAll(this.init.$className+"["+this.init.$dataFeed+"]").forEach(e=>{e.innerHTML=""}):n.querySelectorAll(this.init.$className).forEach(e=>{e.innerHTML=""}))},c.toString=function(){return"Object $impleEvent"},c.method=function(e,t){var n=e.split(/\./);return 2===n.length?this.inCallbacks.hasOwnProperty(n[0])?this.inCallbacks[n[0]].hasOwnProperty(n[1])?t?this.inCallbacks[n[0]][n[1]].bind(t):this.inCallbacks[n[0]][n[1]]:(console.error("Can't Found Method:"+n[1]+"in "+n[0]+"Object : ref->"+e+" ,Please Register event handler using '$impleEvent.addIn("+n[0]+", ....)' method?"),!1):(console.error("Can't Found Object:'"+n[0]+"' in '"+e+"' ,For '.' notation, use  '$impleEvent.addIn()' method?"),!1):this.core.hasOwnProperty(e)?t?this.core[e].bind(t):this.core[e]:this.callbacks.hasOwnProperty(e)?t?this.callbacks[e].bind(t):this.callbacks[e]:(console.error("Can't Found Method:"+e+" ,Please Register event handler using '$impleEvent.add()' method?"),!1)},c.addIn=function(e,t,n){let i=null;if(i=this.inCallbacks.hasOwnProperty(e)?this.inCallbacks[e]:this.inCallbacks[e]={},"[object Object]"===Object.prototype.toString.call(t))for(var r in t)"[object Function]"===Object.prototype.toString.call(t[r])?i[r]=t[r]:console.error("Please provide valid callback function for :"+r);else"[object String]"===Object.prototype.toString.call(t)&&"[object Function]"===Object.prototype.toString.call(n)?i[t]=n:console.error("Invalid argument supplied to add("+t+", "+n+") : Supply method name and callback");return this.initiate||(this.launch(),this.initiate=!0),this},c.asHTML=function(e){var t=this.createElement("div");return t.innerHTML=e,this.render.cloneElement(t).firstElementChild},c.html=function(e){return this.asHTML(e)},c.createElement=function(e,t){var n=document.createElement(e);for(var i in t)"text"==i?n.innerText=t[i]:n.setAttribute(i,t[i]);return n},c.validate=function(e,t,n){this.core.validate.hasOwnProperty(t)},c.initiate=null,c.add=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)"[object Function]"===Object.prototype.toString.call(e[n])?this.callbacks[n]=e[n]:console.error("Please provide valid callback function for :"+n);else"[object String]"===Object.prototype.toString.call(e)&&"[object Function]"===Object.prototype.toString.call(t)?this.callbacks[e]=t:console.error("Invalid argument supplied to add("+e+", "+t+") : Supply method name and callback");return this},c.register=function(e,t){return this.add(e,t)},c.$add=function(){if("[object Object]"===Object.prototype.toString.call(a))for(var e in a)this.vars[e]=a[key];else"[object String]"===Object.prototype.toString.call(a)?this.vars[a]=b:console.error("Invalid argument supplied to add("+a+", "+b+") : Supply vaild arguments");return this},c.addVar=function(e,t){return this.$add(e,t)},c.update=function(e){this.launch(e)},c.config=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)this.init.hasOwnProperty(n)?this.init[n]=e[n]:console.error("Unvalid Config Property :"+n);else this.init.hasOwnProperty(e)?this.init[e]=t:console.error("Unvalid Config Property :"+e);return this},c.launch=function(e){var t=e||this.init.$root;if(t!=document&&t.hasAttribute("event")){let e=t.getAttribute("event").trim();if(e)if(!0===this.init.$useArrow){let n=e.replace(c.init.$seperatorArrowGlobal,"");n.replace(/[,;]/g,"").trim()&&(console.error("Invalid syntax defination:'"+n,t),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(t,e.match(this.init.$seperatorArrowGlobal))}else this.eventManager(t,e.split(/\s+/))}let n=t.querySelectorAll("[event]");for(let e=0;e<n.length;e++){let t=n[e].getAttribute("event");if(t.trim())if(!0===this.init.$useArrow){let i=t.replace(c.init.$seperatorArrowGlobal,"");i.replace(/[,;]/g,"").trim()&&(console.error("Invalid syntax defination:'"+i,n[e]),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(n[e],t.match(this.init.$seperatorArrowGlobal))}else this.eventManager(n[e],t.split(/\s+/))}},window.$impleEvent?"Object $impleEvent"===window.$impleEvent.toString()?console.warn("Duplicate $impleEvent libaray Found! Make sure you are not importing $impleEvent more than one time. "):console.error("$impleEvent name is already used, Please Dont assign '$impleEvent' to any varibale, function or objects. Please free ' $impleEvent' namespace from global scope."):window.$impleEvent=c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,