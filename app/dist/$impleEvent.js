!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n={$seperator:/[-|_]/g,$className:".return",$dataFeed:"data-feed",$dataGet:"data-get",$dataAppend:"data-append",$notification:null,$returnTo:"el",$root:document,$global:document},i={id:0,list:{},html2Obj:function(e,t,r){if(t[r]={},3==e.nodeType)e.nodeValue.trim()&&(t[r].isText=!0,t[r].text=e.nodeValue);else{t[r].tagName=e.nodeName.toLowerCase(),t[r].attributes={};for(var n=0;n<e.attributes.length;n++)e.attributes.length,t[r].attributes[e.attributes[n].name]=e.attributes[n].value;if(e.hasChildNodes){t[r].hasChild=!0,t[r].childCount=e.childNodes.length;for(var i=0;i<t[r].childCount;i++)e.childNodes[i]&&this.html2Obj(e.childNodes[i],t[r],i+1)}}return t},obj2Html:function(e,t){if(t){for(var r=1;r<=e.childCount;r++)if(e[r].isText){var n=document.createTextNode(e[r].text);t.appendChild(n)}else if(e[r].tagName){n=$impleEvent.createElement(e[r].tagName,e[r].attributes);t.appendChild(n),this.obj2Html(e[r],n)}}else t=$impleEvent.createElement(e[1].tagName,e[1].attributes),this.obj2Html(e[1],t);return t},to:function(e,t,r){e.hasAttribute("render-id")||(this.id=this.id+1,e.setAttribute("render-id",this.id),this.list[this.id]={obj:this.html2Obj(t,{},1)});var n=e.getAttribute("render-id"),i=this.list[n].obj;this.obj2Html(i,!1);Array.prototype.forEach.call(r,function(t){var r=$impleEvent.render.obj2Html(i,!1);e.appendChild(r),$impleEvent.dispatchReturns(r,t),$impleEvent.update(r)})}};const l={callbacks:{},core:{}};l.init=n,l.toString=function(){return"Object $impleEvent"},l.createElement=function(e,t){var r=document.createElement(e);for(var n in t)"text"==n?r.innerText=t[n]:r.setAttribute(n,t[n]);return r},l.getData=function(e){var t={};return Array.prototype.forEach.call(e.querySelectorAll("["+l.init.$dataGet+"], [name]"),function(e){e.hasAttribute("name")?e.getAttribute("name")&&(e.hasAttribute("data-validate")&&!1===l.validate(e,e.getAttribute("name"),e.value)?t.hasError=!0:t[e.getAttribute("name")]=e.value):e.getAttribute(l.init.$dataGet)&&(e.value||""==e.value?t[e.getAttribute(l.init.$dataGet)]=e.value:e.hasAttribute("value")&&(t[e.getAttribute(l.init.$dataGet)]=e.getAttribute("value")))}),t},l.validate=function(e,t,r){var n=e.getAttribute("data-validate");if(l.callbacks[n])return l.callbacks[n](e,t,r)},l.addEventListener=function(e,t,r,n){e.addEventListener(t,function(t){var i=n.slice(2);i.unshift(t);var a=r.apply(this,i);if(a){if(e.hasAttribute("data-filter")){var o=e.getAttribute("data-filter");l.core.hasOwnProperty(o)?a=l.core[o](a):l.callbacks.hasOwnProperty(o)?a=l.callbacks[o](a):console.error("Unable to apply filter"+o+": Missing filter method")}l.dispatchReturns(this,a)}},!1)},l.add=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var r in e)"[object Function]"===Object.prototype.toString.call(e[r])?this.callbacks[r]=e[r]:console.error("Please provide valid callback function for :"+r);else"[object String]"===Object.prototype.toString.call(e)&&"[object Function]"===Object.prototype.toString.call(t)?this.callbacks[e]=t:console.error("Invalid argument supplied to add("+e+", "+t+") : Supply method name and callback");return this},l.update=function(e){this.launch(e)},l.config=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var r in e)this.init.hasOwnProperty(r)?this.init[r]=e[r]:console.error("Unvalid Config Property :"+r);else this.init.hasOwnProperty(e)?this.init[e]=t:console.error("Unvalid Config Property :"+e);return this},l.launch=function(e){for(var t=(e||this.init.$root).querySelectorAll("[event]"),r=0;r<t.length;r++){var n=t[r].getAttribute("event").trim().split(/\s+/);if(!n.length)return!1;this.eventPatcher(t[r],n)}},l.eventPatcher=function(e,t){for(var r=0;r<t.length;r++){var n=t[r].split($impleEvent.init.$seperator);if(n.length<2)return console.warn("Insufficient Agruments: Must provided atleast eventname and callback name or event attribute format is not understood:used seperator is "+$impleEvent.init.$seperator),!1;if(n[0].match(/timeout|interval/))if("interval"==n[0]){if(!isFinite(n[2]))return console.log("please Provide Time in ms; for interval event"),!1;if($impleEvent.core.hasOwnProperty(n[1]))var i=setInterval(function(){var t=n.slice(3);if(t.unshift(i),$return=$impleEvent.core[n[1]].apply(e,t),$return){if(e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(r)?$return=$impleEvent.core[r]($return):$impleEvent.callbacks.hasOwnProperty(r)?$return=$impleEvent.callbacks[r]($return):console.error("Unable to apply filter"+r+": Missing filter method")}$impleEvent.dispatchReturns(e,$return)}},n[2]);else{if(!$impleEvent.callbacks.hasOwnProperty(n[1]))return console.error("Can't Found Method:"+a+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;i=setInterval(function(){var t=n.slice(3);t.unshift(i);var r=$impleEvent.callbacks[n[1]].apply(e,t);if(r){if(e.hasAttribute("data-filter")){var a=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(a)?r=$impleEvent.core[a](r):$impleEvent.callbacks.hasOwnProperty(a)?r=$impleEvent.callbacks[a](r):console.error("Unable to apply filter"+a+": Missing filter method")}$impleEvent.dispatchReturns(e,r)}},n[2])}}else if("timeout"==n[0]){if(!isFinite(n[2]))return console.log("please Provide Time in ms; for timeout event"),!1;if($impleEvent.core.hasOwnProperty(n[1]))var l=setTimeout(function(){var t=n.slice(3);if(t.unshift(l),$return=$impleEvent.core[n[1]].apply(e,t),$return){if(e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(r)?$return=$impleEvent.core[r]($return):$impleEvent.callbacks.hasOwnProperty(r)?$return=$impleEvent.callbacks[r]($return):console.error("Unable to apply filter"+r+": Missing filter method")}$impleEvent.dispatchReturns(e,$return)}},n[2]);else{if(!$impleEvent.callbacks.hasOwnProperty(n[1]))return console.error("Can't Found Method:"+a+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;l=setTimeout(function(){var t=n.slice(3);if(t.unshift(l),$return=$impleEvent.callbacks[n[1]].apply(e,t),$return){if(e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(r)?$return=$impleEvent.core[r]($return):$impleEvent.callbacks.hasOwnProperty(r)?$return=$impleEvent.callbacks[r]($return):console.error("Unable to apply filter"+r+": Missing filter method")}$impleEvent.dispatchReturns(e,$return)}},n[2])}}if($impleEvent.core.hasOwnProperty(n[1]))this.addEventListener(e,n[0],$impleEvent.core[n[1]],n);else{if(!$impleEvent.callbacks.hasOwnProperty(n[1]))return console.error("Can't Found Method:"+n[1]+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;this.addEventListener(e,n[0],$impleEvent.callbacks[n[1]],n)}}},l.dispatchReturns=function(e,t){if("[object String]"===Object.prototype.toString.call(t)||"[object Number]"===Object.prototype.toString.call(t))return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):e.innerHTML=t}),!0;if(t.nodeName)return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t))}),!0;if("[object Object]"===Object.prototype.toString.call(t))"[object Object]"===Object.prototype.toString.call(t.global)&&Array.prototype.forEach.call($impleEvent.init.$global.querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t.global)}),"[object Object]"===Object.prototype.toString.call(t.grandParent)?Array.prototype.forEach.call(e.parentNode.parentNode.querySelectorAll($impleEvent.init.$className),function(e){e.hasAttribute($impleEvent.init.$dataFeed)||$impleEvent.dispatcher(e,t.grandParent)}):t.grandParent&&Array.prototype.forEach.call(e.parentNode.parentNode.querySelectorAll($impleEvent.init.$className),function(e){e.hasAttribute($impleEvent.init.$dataFeed)||$impleEvent.dispatchSingle(e,t.grandParent)}),"[object Object]"===Object.prototype.toString.call(t.parent)?Array.prototype.forEach.call(e.parentNode.querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t.parent)}):t.parent&&Array.prototype.forEach.call(e.parentNode.querySelectorAll($impleEvent.init.$className),function(e){e.hasAttribute($impleEvent.init.$dataFeed)||$impleEvent.dispatchSingle(e,t.parent)}),Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t)}),t.self&&Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){e.hasAttribute($impleEvent.init.$dataFeed)||$impleEvent.dispatchSingle(e,t.self)}),t.returnTo&&t.returnTo[$impleEvent.init.$returnTo]&&("[object Object]"===Object.prototype.toString.call(t.returnTo.data)?Array.prototype.forEach.call(t.returnTo[$impleEvent.init.$returnTo].querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t.returnTo.data)}):"[object Array]"===Object.prototype.toString.call(t.returnTo.data)?this.dispatchReturns(t.returnTo[$impleEvent.init.$returnTo],t.returnTo.data):t.returnTo.data&&Array.prototype.forEach.call(t.returnTo[$impleEvent.init.$returnTo].querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatchSingle(e,t.returnTo.data)}));else if("[object Array]"===Object.prototype.toString.call(t)){if(e.hasAttribute("data-component")&&e.getAttribute("data-component")){var r=document.querySelector(e.getAttribute("data-component"));if(r.nodeName){var n={};n.tagName=r.nodeName.toLowerCase(),n.attributes={};for(var i=0;i<r.attributes.length;i++)r.attributes.length,n.attributes[r.attributes[i].name]=r.attributes[i].value;$impleEvent.render.to(e,r,t,n)}}}else"[object Function]"===Object.prototype.toString.call(t)||console.log(t+" type of cannot be returned")},l.dispatcher=function(e,t){if(e.hasAttribute($impleEvent.init.$dataFeed)){var r=e.getAttribute($impleEvent.init.$dataFeed).trim();if(r){var n=$impleEvent.dataFeedValue(r,t);n&&("[object String]"===Object.prototype.toString.call(n)||"[object Number]"===Object.prototype.toString.call(n)?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(n)):e.innerHTML=n:n.nodeName?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(n):(console.log(n),e.innerHTML="",e.appendChild(n)):(console.error("Only String , Number and Html Element  can be embeded; Cannot embed "+t[r]+"in :"+e.nodeName.toLowerCase()+" Html Element"),console.log(e)))}else console.warn("Make sure you have :"+$impleEvent.init.$dataFeed+" attribute to handle given return"+t)}},l.dispatchSingle=function(e,t){"[object String]"===Object.prototype.toString.call(t)||"[object Number]"===Object.prototype.toString.call(t)?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):e.innerHTML=t:t.nodeName?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t),$impleEvent.update(e)):console.log("Unabel to handle this type of Data:"+t)},l.dispatchArray=function(e,t){},l.dataFeedValue=function(e,t){var r=e.split(".");if(r.length){if(1==r.length)return t[e];if(r.length>1){for(var n=t,i=0;i<r.length;i++){if(!n[r[i]]){console.log("Cannot find:"+e+"in"+t);break}n=n[r[i]]}return n}}},l.render=i,window.$impleEvent?"Object $impleEvent"===window.$impleEvent.toString()?console.warn("Duplicate $impleEvent libaray Found! Make sure you are not importing $impleEvent more than one time. "):console.error("$impleEvent name is already used, Please Dont assign '$impleEvent' to any varibale, function or objects. Please free ' $impleEvent' namespace from global scope."):window.$impleEvent=l}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,