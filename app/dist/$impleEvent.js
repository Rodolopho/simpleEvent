!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(t,n,i){"use strict";i.r(n);let r={$useArrow:!0,$event:"event",$useVar:!0,$seperatorArrow:/([a-z]+)[\s]*[=][>][\s]*([\w-\.]+)([(][^)]*[)])?/,$seperatorArrowGlobal:new RegExp(/([a-z]+)[\s]*[=][>][\s]*([\w-\.]+)([(][^)]*[)])?/,"g"),$reserveEventArgument:!0,$seperator:/[:]/g,$className:".return",$dataFeed:"data-feed",$dataGet:"data-get",$dataComponent:"data-component",$dataFilter:"data-filter",$dataValidate:"data-validate",$dataSet:"data-set",$dataStore:"data-store",$dataAppend:"data-append",$returnTo:"el",$root:document,$global:document};var l={id:0,list:{},cloneElement:function(e){return this.obj2Html(this.html2Obj(e,{},1))},html2Obj:function(e,t,n){if(t[n]={},3==e.nodeType)e.nodeValue.trim()&&(t[n].isText=!0,t[n].text=e.nodeValue);else if(8==e.nodeType);else{t[n].tagName=e.nodeName.toLowerCase(),t[n].attributes={};for(var i=0;i<e.attributes.length;i++)e.attributes.length,t[n].attributes[e.attributes[i].name]=e.attributes[i].value;if(e.hasChildNodes){t[n].hasChild=!0,t[n].childCount=e.childNodes.length;for(var r=0;r<t[n].childCount;r++)e.childNodes[r]&&this.html2Obj(e.childNodes[r],t[n],r+1)}}return t},obj2Html:function(e,t){if(t){for(var n=1;n<=e.childCount;n++)if(e[n].isText){var i=document.createTextNode(e[n].text);t.appendChild(i)}else if(e[n].tagName){(i=$impleEvent.createElement(e[n].tagName,e[n].attributes)).id&&(i.id=i.id+n),t.appendChild(i),this.obj2Html(e[n],i)}}else t=$impleEvent.createElement(e[1].tagName,e[1].attributes),this.obj2Html(e[1],t);return t},to:function(e,t,n){e.hasAttribute("render-id")||(this.id=this.id+1,e.setAttribute("render-id",this.id),this.list[this.id]={obj:this.html2Obj(t,{},1)});var i=e.getAttribute("render-id"),r=this.list[i].obj;this.obj2Html(r,!1);Array.prototype.forEach.call(n,function(t){var n=$impleEvent.render.obj2Html(r,!1);e.appendChild(n),$impleEvent.manageReturns(n,t),$impleEvent.update(n)})}};var o={close:function(e,t,n){var i=t.nodeType?t:"parent"==t?this.parentNode:document.getElementById(t);if(i){if("none"==i.style.display)return!1;if("true"===n){var r=confirm("Are you sure want to close?");return $impleEvent.core.animate.call(this,e,"bounce"),!!r&&(i.style.display="none")}i.style.display="none"}else console.warn("close error:-Cannot Find Element with id:"+t)},log:function(e,t){console.log(t)},logEvent:function(e){console.log(e.type,"\n",e)},logFunc:function(e,t,n,i,r,a,l){t=t.trim(),$impleEvent.callbacks.hasOwnProperty(t)?console.log($impleEvent.callbacks[t](e,n,i,r,a,l)):o.hasOwnProperty(t)&&console.log(o[t](e,n,i,r,a,l))},animate:function(e,t,n,i){var r=n?document.getElementById(n):this;r.classList.add("animated"),r.classList.add(t);let a=setTimeout(function(){r.classList.remove("animated"),r.classList.remove(t),clearTimeout(a)},1e3)},typewriter:function(e,t,n){let i=$impleEvent.createElement("input",{style:"outline:none; border:none;font-style:italic;padding:0px;margin:0px;width:1rem;font:inherit;",placeholder:"TypeWriter"}),r=this;i.onclick=function(e){e.stopPropagation()},this.style.position="relative",i.value=this.value?this.value:this.getAttribute("value"),this.appendChild(i),i.onkeyup=function(e){8!=e.which?(r.setAttribute("value",""),$impleEvent.manageReturns(r,this.value,!0),i.value=""):console.log(this.previousSibling)},i.onchange=function(){i.parentNode.removeChild(i)},i.onblur=function(){i.parentNode.removeChild(i)},i.focus()},dataChanger:function(e,t,n){if(this.hasAttribute($impleEvent.init.$dataGet)){let e=$impleEvent.createElement("div",{style:"padding:5px;border:1px solid #ccc;background:#ccc;border-radius:5px;postion:absolute;z-index:12345678998654;"}),n=$impleEvent.createElement("label",{style:"font-weight:bold;margin:0px 5px;background:#ccc"}),i=$impleEvent.createElement("input",{style:"outline:none; border:none;border-bottom:1px solid #eee;"});n.innerText=this.getAttribute($impleEvent.init.$dataGet),i.value=this.getAttribute("value"),e.appendChild(n),e.appendChild(i),e.style.position="absolute",e.style.zIndex=0x7048861b0fa4,e.style.top="100%",e.style.opacity="0.9";let r=this;e.onclick=function(e){e.stopPropagation()},this.style.position="relative",n.innerText=this.getAttribute($impleEvent.init.$dataGet),i.value=this.value?this.value:this.getAttribute("value"),this.appendChild(e),!0===t?i.onkeyup=function(){r.setAttribute("value",this.value),$impleEvent.manageReturns(r,this.value),i.onchange=function(){e.parentNode.removeChild(e)}}:i.onchange=function(){r.setAttribute("value",this.value),$impleEvent.manageReturns(r,this.value),e.parentNode.removeChild(e)}}},carousel:function(e,t,n){var i=this.getElementsByTagName("img");this.hasAttribute("index")||this.setAttribute("index",0);for(var r=parseInt(this.getAttribute("index")),a=0;a<i.length;a++)i[a].style.display="none";++r>i.length&&(r=1),i[r-1].style.display="block",this.setAttribute("index",r)},addClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.add(t)},removeClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.remove(t)},toggleClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.toggle(t)},css:function(e,t,n,i){this.style.transition="all 0.35s",3==arguments.length?this.style[t]=n:(arguments.length=document.getElementById(i))?(document.getElementById(i).style.transition="all 0.35s",document.getElementById(i).style[t]=n):console.warn("Something Wrong with arguments you provided, unable to appy style/css on "+e.type)},return:function(e,t,n){return isFinite(e)&&(t=n),t?t.replace(/\/s/g," ").trim():(console.warn("Returning empty string  on "+e.type)," ")},returnTo:function(e,t,n,i){return isFinite(e)&&(t=n,n=i,e={type:"interval/timeout"}),n&&document.getElementById(t)?(n=n.replace(/\/s/g," ").trim(),{returnTo:{el:document.getElementById(t),data:{self:n}}}):(console.warn("Returning empty string  on "+e.type)," ")},timeout:function(e,t,n){if(!isFinite(n))return console.log("please Provide Time in ms; for timeout function"),!1;if($impleEvent.core.hasOwnProperty(t))var i=setTimeout($impleEvent.core[t].bind(this),n);else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;i=setTimeout($impleEvent.callbacks[t].bind(this,[e,i]),n)}},interval:function(e,t,n){if(!isFinite(n))return console.log("please Provide Time in ms; for interval function"),!1;if($impleEvent.core.hasOwnProperty(t)){console.log("wow");var i=setInterval($impleEvent.core[t].bind(this,[e,i]),n)}else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;i=setInterval($impleEvent.callbacks[t].bind(this,[e,i]),n)}}};const s={callbacks:{},inCallbacks:{}};s.core=o,s.init=r,s.vars={},s.fire=function(e,t){if(e&&e.nodeName){let[n,i]=[[],null];[,i,n]=/[\s]*([\w-\.]+)([(][^)]*[)])?/.exec(t),i?(n?(n=n.replace(/[()]/g,"").split(/[,]/),!0===s.init.$reserveEventArgument&&n.shift()):n=[],s.callbackHandler(e,i,n,null)):console.error("Provide valid method, Provided "+i)}else console.error("Provide Html Element, Provided "+e)},s.return=function(e,t){return this.manageReturns(e.parentNode,t)},s.reset=function(e,t){let n=e.parentNode;n.nodeType&&(!0===t?n.querySelectorAll(this.init.$className+"["+this.init.$dataFeed+"]").forEach(e=>{e.innerHTML=""}):n.querySelectorAll(this.init.$className).forEach(e=>{e.innerHTML=""}))},s.toString=function(){return"Object $impleEvent"},s.method=function(e,t){var n=e.split(/\./);return 2===n.length?this.inCallbacks.hasOwnProperty(n[0])?this.inCallbacks[n[0]].hasOwnProperty(n[1])?t?this.inCallbacks[n[0]][n[1]].bind(t):this.inCallbacks[n[0]][n[1]]:(console.error("Can't Found Method:"+n[1]+"in "+n[0]+"Object : ref->"+e+" ,Please Register event handler using '$impleEvent.addIn("+n[0]+", ....)' method?"),!1):(console.error("Can't Found Object:'"+n[0]+"' in '"+e+"' ,For '.' notation, use  '$impleEvent.addIn()' method?"),!1):this.core.hasOwnProperty(e)?t?this.core[e].bind(t):this.core[e]:this.callbacks.hasOwnProperty(e)?t?this.callbacks[e].bind(t):this.callbacks[e]:(console.error("Can't Found Method:"+e+" ,Please Register event handler using '$impleEvent.add()' method?"),!1)},s.addIn=function(e,t,n){let i=null;if(i=this.inCallbacks.hasOwnProperty(e)?this.inCallbacks[e]:this.inCallbacks[e]={},"[object Object]"===Object.prototype.toString.call(t))for(var r in t)"[object Function]"===Object.prototype.toString.call(t[r])?i[r]=t[r]:console.error("Please provide valid callback function for :"+r);else"[object String]"===Object.prototype.toString.call(t)&&"[object Function]"===Object.prototype.toString.call(n)?i[t]=n:console.error("Invalid argument supplied to add("+t+", "+n+") : Supply method name and callback");return this.initiate||(this.launch(),this.initiate=!0),this},s.asHTML=function(e){var t=this.createElement("div");return t.innerHTML=e,this.render.cloneElement(t).firstElementChild},s.html=function(e){return this.asHTML(e)},s.createElement=function(e,t){var n=document.createElement(e);for(var i in t)"text"==i?n.innerText=t[i]:n.setAttribute(i,t[i]);return n},s.getData=function(e,t){var n={},i=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(i){let l=null;if(e.value||""===e.value?l=e.value:e.hasAttribute("value")&&(l=e.getAttribute("value")),(""===l||l)&&e.hasAttribute($impleEvent.init.$dataFilter)){var r=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(r)?l=$impleEvent.core[r].call(e,l):$impleEvent.callbacks.hasOwnProperty(r)?l=$impleEvent.callbacks[r].call(e,l):console.error("Unable to apply filter"+r+": Missing filter method"),!l)return console.error("Error in "+$impleEvent.init.$dataFilter+": Must return value with valid data type; check return from '"+r+"' method"),!1}if(1==t)return[i,l];if(e.getAttribute($impleEvent.init.$dataValidate)){var a=e.getAttribute($impleEvent.init.$dataValidate);$impleEvent.callbacks.hasOwnProperty(a)?$impleEvent.callbacks[a].call(e,i,l)||(n.hasError=!0):console.log("Error in "+$impleEvent.init.$dataValidate+" unable to find callback :"+a)}n[i]=l}return e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),function(e){var t=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(t){let l=null;if(e.value||""===e.value?l=e.value:e.hasAttribute("value")&&(l=e.getAttribute("value")),(""===l||l)&&e.hasAttribute($impleEvent.init.$dataFilter)){var i=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(i)?l=$impleEvent.core[i].call(e,l):$impleEvent.callbacks.hasOwnProperty(i)?l=$impleEvent.callbacks[i].call(e,l):console.error("Unable to apply filter"+i+": Missing filter method"),!l)return console.error("Error in "+$impleEvent.init.$dataFilter+" : Must return value with valid data type; check return from '"+i+"' method"),!1}if(e.getAttribute($impleEvent.init.$dataValidate)){var r=e.getAttribute($impleEvent.init.$dataValidate);if($impleEvent.callbacks.hasOwnProperty(r)){var a=$impleEvent.callbacks[r].call(e,t,l);Array.isArray(a)&&(n.validate=[]),!1===a&&(n.hasError=!0)}else console.error("Error in "+$impleEvent.init.$dataValidate+" unable to find callback :"+r)}n[t]=l}}),n},s.setData=function(e,t){let n=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);t.hasOwnProperty(n)&&(e.hasAttribute("value")?e.setAttribute("value",t[n]):e.value=t[n]),e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),function(e){let n=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);t.hasOwnProperty(n)&&(e.value||""===e.value?e.value=t[n]:e.hasAttribute("value")&&e.setAttribute("value",t[n]))})},s.dataStore=function(e,t){let n={};if(e&&e.nodeName)if(e.hasAttribute($impleEvent.init.$dataStore)){let i=e.getAttribute($impleEvent.init.$dataStore).trim();try{n=JSON.parse(i)}catch(r){if(console.error("Please Provide Valid JSON data: Provided "+i),!t)return null;console.warn("Using default dataStore instead "),n=t,e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(n))}}else t&&(console.warn("Using default dataStore instead "),n=t,e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(n)));else console.error("Please Provide  HTML element as an arguments");return{store:n,get:function(){return this.store},set:function(){e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(this.store))}}},s.validate=function(e,t,n){let i=e.getAttribute(s.init.$dataValidate);if(s.callbacks[i])return s.callbacks[i](e,t,n)},s.initiate=null,s.add=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)"[object Function]"===Object.prototype.toString.call(e[n])?this.callbacks[n]=e[n]:console.error("Please provide valid callback function for :"+n);else"[object String]"===Object.prototype.toString.call(e)&&"[object Function]"===Object.prototype.toString.call(t)?this.callbacks[e]=t:console.error("Invalid argument supplied to add("+e+", "+t+") : Supply method name and callback");return this},s.register=function(e,t){return this.add(e,t)},s.$add=function(){if("[object Object]"===Object.prototype.toString.call(a))for(var e in a)this.vars[e]=a[key];else"[object String]"===Object.prototype.toString.call(a)?this.vars[a]=b:console.error("Invalid argument supplied to add("+a+", "+b+") : Supply vaild arguments");return this},s.addVar=function(e,t){return this.$add(e,t)},s.update=function(e){this.launch(e)},s.config=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)this.init.hasOwnProperty(n)?this.init[n]=e[n]:console.error("Unvalid Config Property :"+n);else this.init.hasOwnProperty(e)?this.init[e]=t:console.error("Unvalid Config Property :"+e);return this},s.launch=function(e){var t=e||this.init.$root;if(t!=document&&t.getAttribute("event")){let e=t.getAttribute("event");if(e.trim())if(!0===this.init.$useArrow){let n=e.replace(s.init.$seperatorArrowGlobal,"");n.replace(/,/g,"").trim()&&(console.error("Invalid syntax defination:'"+n,t),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(t,e.match(this.init.$seperatorArrowGlobal))}else this.eventManager(t,e.split(/\s+/))}for(var n=t.querySelectorAll("[event]"),i=0;i<n.length;i++){let e=n[i].getAttribute("event");if(e.trim())if(!0===this.init.$useArrow){let t=e.replace(s.init.$seperatorArrowGlobal,"");t.replace(/,/g,"").trim()&&(console.error("Invalid syntax defination:'"+t,n[i]),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(n[i],e.match(this.init.$seperatorArrowGlobal))}else this.eventManager(n[i],e.split(/\s+/))}},s.eventManager=function(e,t){for(var n=0;n<t.length;n++){if(!t[n].trim())return!1;!function(){let[i,r,a]=[null,[],null];if(!0===$impleEvent.init.$useArrow){if(!$impleEvent.init.$seperatorArrow.test(t[n]))return console.warn("Insufficient Agruments:'NaN"+$impleEvent.init.$seperatorArrow),!1;if([,i,a,r]=$impleEvent.init.$seperatorArrow.exec(t[n]),r?(r=r.replace(/[()]/g,"").split(/[,]/),!0===$impleEvent.init.$reserveEventArgument&&r.shift()):r=[],!i||!a)return console.warn("Insufficient Agruments:'NaN"+$impleEvent.init.$seperatorArrow),!1}else{if(data=t[n].split($impleEvent.init.$seperator),data.length<2)return console.warn("Insufficient Agruments: Must provided atleast eventname and callback  or event attribute format is not understood:used seperator is "+$impleEvent.init.$seperator),!1;i=data[0],a=data[1],r=data.slice(2)}if("call"!=i)if(i.match(/timeout|interval/)){if(!isFinite(r[0]))return console.error("please Provide Time in ms; for interval/timeout event"),!1;{let t=r[0];if("interval"==i)var l=setInterval(function(){$impleEvent.callbackHandler(e,a,r,l)},t);else var o=setTimeout(function(){$impleEvent.callbackHandler(e,a,r,o)},t)}}else e.addEventListener(i,function t(n){n.removeEventListener=function(){e.removeEventListener(this.type,t)},$impleEvent.callbackHandler(e,a,r,n)},!1);else window.addEventListener("load",function(t){$impleEvent.callbackHandler(e,a,r,t)})}()}},s.callbackHandler=function(e,t,n,i){var r=t.split(/\./);if(2===r.length){if(!$impleEvent.inCallbacks.hasOwnProperty(r[0]))return console.error("Can't Found Object:'"+r[0]+"' in '"+t+"' ,For '.' notation, use  '$impleEvent.addIn()' method?"),!1;if(!$impleEvent.inCallbacks[r[0]].hasOwnProperty(r[1]))return console.error("Can't Found Method:"+r[1]+"in "+r[0]+"Object : ref->"+t+" ,Please Register event handler using '$impleEvent.addIn("+r[0]+", ....)' method?"),!1;t=$impleEvent.inCallbacks[r[0]][r[1]]}else if($impleEvent.core.hasOwnProperty(t))t=$impleEvent.core[t];else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;t=$impleEvent.callbacks[t]}let a=function(e,t){return t&&(t=t.map(function(t){let n=t.trim();if(/^[\d]+[\.]?[\d]*$/.test(n))return parseFloat(n);if(/^true$/.test(n))return!0;if(/^false$/.test(n))return!1;if(/^<.+>/.test(n)){let e=n.match(/<(.+)>(\[(\d+)\])?(\..+)?/);if(e[1]){if(isFinite(e[3])){if(e[4]){let t=e[4].substr(1),n=document.querySelectorAll(e[1])[parseInt(e[3])];if(n&&n.hasAttribute(t.replace(".value",""))){if(/(\.value)$/.test(t))return n.getAttribute(t.replace(".value",""));let e={element:n};return e.get=function(){return n.getAttribute(t)},e.set=function(e){n.setAttribute(t,e),this.value=e},e.value=n.getAttribute(t),e}return console.error("Not Found "+e[3]+" child Node or  attribute "+t),null}return document.querySelectorAll(e[1])[parseInt(e[3])]}return document.querySelectorAll(e[1])}}if(n.match(/^#[a-zA-Z0-9-]+/)){let e=n.replace(/^#/,"");if(-1==e.search(/\./))return document.getElementById(e);{let t=e.split(/\./),n=t[1],i=document.getElementById(t[0]);if(i.hasAttribute(n)){if(3===t.length&&"value"==t[2])return i.getAttribute(n);let e={element:i};return e.get=function(){return i.getAttribute(n)},e.set=function(e){i.setAttribute(n,e),this.value=e},e.value=i.getAttribute(n),e}}}if(n.match(/^\$+[a-zA-Z0-9-]+/)){let t=n.replace(/^\$+/,"");if(2==n.match(/^\$+/)[0].length?t&&(e=e.parentNode):3==n.match(/^\$+/)[0].length&&(e=e.parentNode.parentNode),-1!=t.search(/\./)){let n=t.split(/\./);if(e.getAttribute(n[0])&&"value"==n[1])return e.getAttribute(n[0])}else{if(e.hasAttribute(t)){var i={};return i.get=function(){return e.getAttribute(t)},i.set=function(n){e.setAttribute(t,n),this.value=n},i.value=e.getAttribute(t),i}if(e.getAttribute($impleEvent.init.$dataGet)===t)return e.value?e.value:e.getAttribute("value");if(e.getAttribute("name")===t)return e.value?e.value:e.getAttribute("value");if("value"===t)return e.value}}return n.replace(/(^["'])|['"]$/g,"")})),t}(e,n);a.unshift(i);var l=t.apply(e,a);if(l){if(e.getAttribute($impleEvent.init.$dataFilter)){var o=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(o)?l=$impleEvent.core[o].call(e,l):$impleEvent.callbacks.hasOwnProperty(o)?l=$impleEvent.callbacks[o].call(e,l):console.error("Unable to apply filter"+o+": Missing filter method"),!l)return console.error("Error in "+$impleEvent.init.$dataFilter+" Must return value with valid data type; check return from '"+o+"' method"),!1}$impleEvent.manageReturns(e.parentNode,l)}if(e.hasAttribute($impleEvent.init.$dataSet)){var s=$impleEvent.getData(e,!0);Array.isArray(s)&&Array.prototype.forEach.call(document.querySelectorAll(e.getAttribute($impleEvent.init.$dataSet)),function(e){e.setAttribute($impleEvent.init.$dataGet,s[0]),e.setAttribute("value",s[1])})}},s.manageReturns=function(t,n,i){if(!0===i&&t.hasAttribute($impleEvent.init.$classname)){if("string"==typeof n||"number"==typeof n||n.nodeName){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;if(n.nodeName){let t=$impleEvent.render.cloneElement(n);e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t)),$impleEvent.update(t)}else e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(n)):(e.innerHTML="",e.appendChild(document.createTextNode(n)))}}else{if("string"==typeof n||"number"==typeof n||n.nodeName)return Array.prototype.forEach.call(t.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;if(n.nodeName){let t=$impleEvent.render.cloneElement(n);e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t)),$impleEvent.update(t)}else e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(n)):(e.innerHTML="",e.appendChild(document.createTextNode(n)))}),!0;if("[object Object]"===Object.prototype.toString.call(n)&&(n.hasOwnProperty("global")&&n.global&&$impleEvent.manageReturns($impleEvent.init.$global,n.global),n.hasOwnProperty("grandParent")&&n.grandParent&&$impleEvent.manageReturns(t.parentNode.parentNode,n.grandParent),n.hasOwnProperty("parent")&&n.parent&&$impleEvent.manageReturns(t.parentNode,n.parent),n.hasOwnProperty("self")&&n.self&&$impleEvent.manageReturns(t,n.self),Array.prototype.forEach.call(t.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed)){var t=e.getAttribute($impleEvent.init.$dataFeed).trim();if(t){var i=null,r=t.split(".");if(!n.hasOwnProperty(r[0]))return!1;if(r.length)if(1==r.length)i=n[t];else if(r.length>1){for(var a=n,l=0;l<r.length;l++){if(!a[r[l]]){console.error("Cannot find:"+t+" in  the return "+JSON.stringify(n));break}a=a[r[l]]}i=a}if(i)if("string"==typeof i||"number"==typeof i||i.nodeName)if(i.nodeName){let t=$impleEvent.render.cloneElement(i);e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t)),$impleEvent.update(t)}else e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(i)):(e.innerHTML="",e.appendChild(document.createTextNode(i)));else console.error("Only String , Number and Html Element  can be embeded; Cannot embed "+i+"for "+t+"in : "+e.nodeName.toLowerCase()+" Html Element"),console.log(e)}else console.warn("Make sure you have :"+$impleEvent.init.$dataFeed+" attribute to handle given return"+n)}}),n.hasOwnProperty("returnTo")&&n.returnTo&&(n.returnTo[$impleEvent.init.$returnTo]&&n.returnTo[$impleEvent.init.$returnTo].nodeName?$impleEvent.manageReturns(n.returnTo[$impleEvent.init.$returnTo],n.returnTo.data):console.error("returnTo, Element not found:Please give returnTo."+$impleEvent.init.$returnTo+" a valid html element"))),"[object Array]"===Object.prototype.toString.call(n))if(t.querySelector("["+$impleEvent.init.$dataComponent+"]")){let e=t.querySelector("["+$impleEvent.init.$dataComponent+"]"),i=document.querySelector(e.getAttribute($impleEvent.init.$dataComponent));if(i&&i.nodeName){e.hasAttribute($impleEvent.init.$dataAppend)||(e.innerHTML="");for(var r=0;r<n.length;r++){var a=$impleEvent.render.cloneElement(i);if(a.id&&(a.id=a.id+"_"+r),a.setAttribute("index",r),e.appendChild(a),a.childElementCount)$impleEvent.manageReturns(a,n[r]);else if("string"==typeof n[r]||"number"==typeof n[r]||n[r].nodeName){if(a.hasAttribute($impleEvent.init.$dataFeed))return!1;n[r].nodeName?a.hasAttribute($impleEvent.init.$dataAppend)?a.appendChild($impleEvent.render.cloneElement(n[r])):(a.innerHTML="",a.appendChild($impleEvent.render.cloneElement(n[r]))):a.hasAttribute($impleEvent.init.$dataAppend)?a.appendChild(document.createTextNode(n[r])):(a.innerHTML="",a.appendChild(document.createTextNode(n[r])))}$impleEvent.update(a)}}else console.error("Unable to find Element for Templating from querySelector:"+e.getAttribute($impleEvent.init.$dataComponent))}else console.error("Array returns need ["+$impleEvent.init.$dataComponent+"] holder: No such holder found ")}},s.render=l,window.$impleEvent?"Object $impleEvent"===window.$impleEvent.toString()?console.warn("Duplicate $impleEvent libaray Found! Make sure you are not importing $impleEvent more than one time. "):console.error("$impleEvent name is already used, Please Dont assign '$impleEvent' to any varibale, function or objects. Please free ' $impleEvent' namespace from global scope."):window.$impleEvent=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,