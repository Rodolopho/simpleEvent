!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n={$seperator:/[-|_]/g,$className:".return",$dataFeed:"data-feed",$notification:null,$returnTo:"el",$dataGet:"data-get",$dataAppend:"data-append",$root:document,$global:document},i={id:0,list:{},html2Obj:function(e,t,r){if(t[r]={},3==e.nodeType)e.nodeValue.trim()&&(t[r].isText=!0,t[r].text=e.nodeValue);else{t[r].tagName=e.nodeName.toLowerCase(),t[r].attributes={};for(var n=0;n<e.attributes.length;n++)e.attributes.length,t[r].attributes[e.attributes[n].name]=e.attributes[n].value;if(e.hasChildNodes){t[r].hasChild=!0,t[r].childCount=e.childNodes.length;for(var i=0;i<t[r].childCount;i++)e.childNodes[i]&&this.html2Obj(e.childNodes[i],t[r],i+1)}}return t},obj2Html:function(e,t){if(t){for(var r=1;r<=e.childCount;r++)if(e[r].isText){var n=document.createTextNode(e[r].text);t.appendChild(n)}else if(e[r].tagName){n=$impleEvent.createElement(e[r].tagName,e[r].attributes);t.appendChild(n),this.obj2Html(e[r],n)}}else t=$impleEvent.createElement(e[1].tagName,e[1].attributes),this.obj2Html(e[1],t);return t},to:function(e,t,r){e.hasAttribute("render-id")||(this.id=this.id+1,e.setAttribute("render-id",this.id),this.list[this.id]={obj:this.html2Obj(t,{},1)});var n=e.getAttribute("render-id"),i=this.list[n].obj;this.obj2Html(i,!1);Array.prototype.forEach.call(r,function(t){var r=$impleEvent.render.obj2Html(i,!1);e.appendChild(r),$impleEvent.dispatchReturns(r,t),$impleEvent.update(r)})}};const l={callbacks:{},core:{}};l.init=n,l.toString=function(){return"Object $impleEvent"},l.createElement=function(e,t){var r=document.createElement(e);for(var n in t)"text"==n?r.innerText=t[n]:r.setAttribute(n,t[n]);return r},l.getData=function(e){var t={};return Array.prototype.forEach.call(e.querySelectorAll("["+l.init.$dataGet+"], [name]"),function(e){e.hasAttribute("name")?e.getAttribute("name")&&(e.hasAttribute("data-validate")&&!1===l.validate(e,e.getAttribute("name"),e.value)?t.hasError=!0:t[e.getAttribute("name")]=e.value):e.getAttribute(l.init.$dataGet)&&(e.value||""==e.value?t[e.getAttribute(l.init.$dataGet)]=e.value:e.hasAttribute("value")&&(t[e.getAttribute(l.init.$dataGet)]=e.getAttribute("value")))}),t},l.validate=function(e,t,r){var n=e.getAttribute("data-validate");if(l.callbacks[n])return l.callbacks[n](e,t,r)},l.addEventListener=function(e,t,r,n){e.addEventListener(t,function(t){var i=n.slice(2);i.unshift(t);var a=r.apply(this,i);if(a){if(e.hasAttribute("data-filter")){var o=e.getAttribute("data-filter");l.core.hasOwnProperty(o)?a=l.core[o](a):l.callbacks.hasOwnProperty(o)?a=l.callbacks[o](a):console.error("Unable to apply filter"+o+": Missing filter method")}l.dispatchReturns(this,a)}},!1)},l.add=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var r in e)"[object Function]"===Object.prototype.toString.call(e[r])?this.callbacks[r]=e[r]:console.error("Please provide valid callback function for :"+r);else"[object String]"===Object.prototype.toString.call(e)&&"[object Function]"===Object.prototype.toString.call(t)?this.callbacks[e]=t:console.error("Invalid argument supplied to add("+e+", "+t+") : Supply method name and callback");return this},l.update=function(e){this.launch(e)},l.config=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var r in e)this.init.hasOwnProperty(r)?this.init[r]=e[r]:console.error("Unvalid Config Property :"+r);else this.init.hasOwnProperty(e)?this.init[e]=t:console.error("Unvalid Config Property :"+r);return this},l.launch=function(e){for(var t=(e||this.init.$root).querySelectorAll("[event]"),r=0;r<t.length;r++){var n=t[r].getAttribute("event").trim().split(/\s+/);if(!n.length)return!1;this.eventPatcher(t[r],n)}},l.eventPatcher=function(e,t){for(var r=0;r<t.length;r++){var n=t[r].split($impleEvent.init.$seperator);if(n.length<2)return console.warn("Insufficient Agruments: Must provided atleast eventname and callback name or event attribute format is not understood:used seperator is "+$impleEvent.init.$seperator),!1;if(n[0].match(/timeout|interval/))if("interval"==n[0]){if(!isFinite(n[2]))return console.log("please Provide Time in ms; for interval event"),!1;if($impleEvent.core.hasOwnProperty(n[1]))var i=setInterval(function(){var t=n.slice(3);if(t.unshift(i),$return=$impleEvent.core[n[1]].apply(e,t),$return){if(e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(r)?$return=$impleEvent.core[r]($return):$impleEvent.callbacks.hasOwnProperty(r)?$return=$impleEvent.callbacks[r]($return):console.error("Unable to apply filter"+r+": Missing filter method")}$impleEvent.dispatchReturns(e,$return)}},n[2]);else{if(!$impleEvent.callbacks.hasOwnProperty(n[1]))return console.error("Can't Found Method:"+a+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;i=setInterval(function(){var t=n.slice(3);t.unshift(i);var r=$impleEvent.callbacks[n[1]].apply(e,t);if(r){if(e.hasAttribute("data-filter")){var a=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(a)?r=$impleEvent.core[a](r):$impleEvent.callbacks.hasOwnProperty(a)?r=$impleEvent.callbacks[a](r):console.error("Unable to apply filter"+a+": Missing filter method")}$impleEvent.dispatchReturns(e,r)}},n[2])}}else if("timeout"==n[0]){if(!isFinite(n[2]))return console.log("please Provide Time in ms; for timeout event"),!1;if($impleEvent.core.hasOwnProperty(n[1]))var l=setTimeout(function(){var t=n.slice(3);if(t.unshift(l),$return=$impleEvent.core[n[1]].apply(e,t),$return){if(e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(r)?$return=$impleEvent.core[r]($return):$impleEvent.callbacks.hasOwnProperty(r)?$return=$impleEvent.callbacks[r]($return):console.error("Unable to apply filter"+r+": Missing filter method")}$impleEvent.dispatchReturns(e,$return)}},n[2]);else{if(!$impleEvent.callbacks.hasOwnProperty(n[1]))return console.error("Can't Found Method:"+a+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;l=setTimeout(function(){var t=n.slice(3);if(t.unshift(l),$return=$impleEvent.callbacks[n[1]].apply(e,t),$return){if(e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(r)?$return=$impleEvent.core[r]($return):$impleEvent.callbacks.hasOwnProperty(r)?$return=$impleEvent.callbacks[r]($return):console.error("Unable to apply filter"+r+": Missing filter method")}$impleEvent.dispatchReturns(e,$return)}},n[2])}}if($impleEvent.core.hasOwnProperty(n[1]))this.addEventListener(e,n[0],$impleEvent.core[n[1]],n);else{if(!$impleEvent.callbacks.hasOwnProperty(n[1]))return console.error("Can't Found Method:"+n[1]+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;this.addEventListener(e,n[0],$impleEvent.callbacks[n[1]],n)}}},l.dispatchReturns=function(e,t){if("[object String]"===Object.prototype.toString.call(t)||"[object Number]"===Object.prototype.toString.call(t))return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):e.innerHTML=t}),!0;if(t.nodeName)return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t))}),!0;if("[object Object]"===Object.prototype.toString.call(t))"[object Object]"===Object.prototype.toString.call(t.global)&&Array.prototype.forEach.call($impleEvent.init.$global.querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t.global)}),"[object Object]"===Object.prototype.toString.call(t.grandParent)?Array.prototype.forEach.call(e.parentNode.parentNode.querySelectorAll($impleEvent.init.$className),function(e){e.hasAttribute($impleEvent.init.$dataFeed)||$impleEvent.dispatcher(e,t.grandParent)}):t.grandParent&&Array.prototype.forEach.call(e.parentNode.parentNode.querySelectorAll($impleEvent.init.$className),function(e){e.hasAttribute($impleEvent.init.$dataFeed)||$impleEvent.dispatchSingle(e,t.grandParent)}),"[object Object]"===Object.prototype.toString.call(t.parent)?Array.prototype.forEach.call(e.parentNode.querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t.parent)}):t.parent&&Array.prototype.forEach.call(e.parentNode.querySelectorAll($impleEvent.init.$className),function(e){e.hasAttribute($impleEvent.init.$dataFeed)||$impleEvent.dispatchSingle(e,t.parent)}),Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t)}),t.self&&Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){e.hasAttribute($impleEvent.init.$dataFeed)||$impleEvent.dispatchSingle(e,t.self)}),t.returnTo&&t.returnTo[$impleEvent.init.$returnTo]&&("[object Object]"===Object.prototype.toString.call(t.returnTo.data)?Array.prototype.forEach.call(t.returnTo[$impleEvent.init.$returnTo].querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t.returnTo.data)}):"[object Array]"===Object.prototype.toString.call(t.returnTo.data)?this.dispatchReturns(t.returnTo[$impleEvent.init.$returnTo],t.returnTo.data):t.returnTo.data&&Array.prototype.forEach.call(t.returnTo[$impleEvent.init.$returnTo].querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatchSingle(e,t.returnTo.data)}));else if("[object Array]"===Object.prototype.toString.call(t)){if(e.hasAttribute("data-component")&&e.getAttribute("data-component")){var r=document.querySelector(e.getAttribute("data-component"));if(r.nodeName){var n={};n.tagName=r.nodeName.toLowerCase(),n.attributes={};for(var i=0;i<r.attributes.length;i++)r.attributes.length,n.attributes[r.attributes[i].name]=r.attributes[i].value;$impleEvent.render.to(e,r,t,n)}}}else"[object Function]"===Object.prototype.toString.call(t)||console.log(t+" type of cannot be returned")},l.dispatcher=function(e,t){if(e.hasAttribute($impleEvent.init.$dataFeed)){var r=e.getAttribute($impleEvent.init.$dataFeed).trim();if(r){var n=$impleEvent.dataFeedValue(r,t);n&&("[object String]"===Object.prototype.toString.call(n)||"[object Number]"===Object.prototype.toString.call(n)?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(n)):e.innerHTML=n:n.nodeName?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(n):(console.log(n),e.innerHTML="",e.appendChild(n)):(console.error("Only String , Number and Html Element  can be embeded; Cannot embed "+t[r]+"in :"+e.nodeName.toLowerCase()+" Html Element"),console.log(e)))}else console.warn("Make sure you have :"+$impleEvent.init.$dataFeed+" attribute to handle given return"+t)}},l.dispatchSingle=function(e,t){"[object String]"===Object.prototype.toString.call(t)||"[object Number]"===Object.prototype.toString.call(t)?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):e.innerHTML=t:t.nodeName?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t),$impleEvent.update(e)):console.log("Unabel to handle this type of Data:"+t)},l.dispatchArray=function(e,t){},l.dataFeedValue=function(e,t){var r=e.split(".");if(r.length){if(1==r.length)return t[e];if(r.length>1){for(var n=t,i=0;i<r.length;i++){if(!n[r[i]]){console.log("Cannot find:"+e+"in"+t);break}n=n[r[i]]}return n}}},l.render=i,window.$impleEvent?"Object $impleEvent"===window.$impleEvent.toString()?console.warn("Duplicate $impleEvent libaray Found! Make sure you are not importing $impleEvent more than one time. "):console.error("$impleEvent name is already used, Please Dont assign '$impleEvent' to any varibale, function or objects. Please free ' $impleEvent' namespace from global scope."):window.$impleEvent=l}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9pbml0LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcmVuZGVyLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2V2ZW50UGF0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2Rpc3BhdGNoUmV0dXJucy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaW5pdCIsIiRzZXBlcmF0b3IiLCIkY2xhc3NOYW1lIiwiJGRhdGFGZWVkIiwiJG5vdGlmaWNhdGlvbiIsIiRyZXR1cm5UbyIsIiRkYXRhR2V0IiwiJGRhdGFBcHBlbmQiLCIkcm9vdCIsImRvY3VtZW50IiwiJGdsb2JhbCIsInJlbmRlciIsImlkIiwibGlzdCIsImh0bWwyT2JqIiwiZWwiLCJvYmoiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInRyaW0iLCJpc1RleHQiLCJ0ZXh0IiwidGFnTmFtZSIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJhdHRyaWJ1dGVzIiwiaiIsImxlbmd0aCIsImhhc0NoaWxkTm9kZXMiLCJoYXNDaGlsZCIsImNoaWxkQ291bnQiLCJjaGlsZE5vZGVzIiwiayIsInRoaXMiLCJvYmoySHRtbCIsImVsZSIsImNyZWF0ZVRleHROb2RlIiwiYXBwZW5kQ2hpbGQiLCIkaW1wbGVFdmVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0byIsImNvbXBvbmVudCIsIiRyZXR1cm4iLCJoYXNBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJyZW5kZXJJZCIsImdldEF0dHJpYnV0ZSIsIkFycmF5IiwiZm9yRWFjaCIsImUiLCJkaXNwYXRjaFJldHVybnMiLCJ1cGRhdGUiLCJtYWluXyRpbXBsZUV2ZW50IiwiY2FsbGJhY2tzIiwiY29yZSIsInRvU3RyaW5nIiwidGFnIiwiYXR0ciIsImVsZW1lbnQiLCJrZXlzIiwiaW5uZXJUZXh0IiwiZ2V0RGF0YSIsInJlc3VsdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ2YWxpZGF0ZSIsImhhc0Vycm9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiaGFuZGxlciIsImRhdGEiLCJhcmdzIiwic2xpY2UiLCJ1bnNoaWZ0IiwiYXBwbHkiLCJmaWx0ZXIiLCJjb25zb2xlIiwiZXJyb3IiLCJhZGQiLCJhIiwiYiIsImxhdW5jaCIsImNvbmZpZyIsImVsZW1lbnRzIiwiZXZlbnRMaXN0Iiwic3BsaXQiLCJldmVudFBhdGNoZXIiLCJ3YXJuIiwibWF0Y2giLCJpc0Zpbml0ZSIsImxvZyIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ0aW1lciIsInNldFRpbWVvdXQiLCJpbm5lckhUTUwiLCJnbG9iYWwiLCJkaXNwYXRjaGVyIiwiZ3JhbmRQYXJlbnQiLCJwYXJlbnROb2RlIiwiZGlzcGF0Y2hTaW5nbGUiLCJwYXJlbnQiLCJzZWxmIiwicmV0dXJuVG8iLCJxdWVyeVNlbGVjdG9yIiwia2V5IiwiZGF0YUZlZWRWYWx1ZSIsImRpc3BhdGNoQXJyYXkiLCIkYXJyYXkiLCJmZWVkIiwid2luZG93Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFOLEtBTUFaLEVBQUFtQixFQUFBLFNBQUFqQixHQUNBWSxPQUFBQyxlQUFBYixFQUFBLGNBQWlEa0IsT0FBQSxLQUlqRHBCLEVBQUFxQixFQUFBLFNBQUFsQixHQUNBLElBQUFTLEVBQUFULEtBQUFtQixXQUNBLFdBQTJCLE9BQUFuQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBVSxFQUFBQyxHQUFzRCxPQUFBVixPQUFBVyxVQUFBQyxlQUFBbkIsS0FBQWdCLEVBQUFDLElBR3REeEIsRUFBQTJCLEVBQUEsR0FJQTNCLElBQUE0QixFQUFBLHlDQ25FQSxJQUFBQyxHQUVBQyxXQUFBLFNBQ0FDLFdBQUEsVUFDQUMsVUFBQSxZQUNBQyxjQUFBLEtBQ0FDLFVBQUEsS0FDQUMsU0FBQSxXQUNBQyxZQUFBLGNBQ0FDLE1BQUFDLFNBQ0FDLFFBQUFELFVDVkFFLEdBQ0FDLEdBQUEsRUFDQUMsUUFDQUMsU0FBQSxTQUFBQyxFQUFBQyxFQUFBekMsR0FHQSxHQURBeUMsRUFBQXpDLE1BQ0EsR0FBQXdDLEVBQUFFLFNBQ0FGLEVBQUFHLFVBQUFDLFNBRUFILEVBQUF6QyxHQUFBNkMsUUFBQSxFQUNBSixFQUFBekMsR0FBQThDLEtBQUFOLEVBQUFHLGVBRUssQ0FFTEYsRUFBQXpDLEdBQUErQyxRQUFBUCxFQUFBUSxTQUFBQyxjQUNBUixFQUFBekMsR0FBQWtELGNBQ0EsUUFBQUMsRUFBQSxFQUFpQkEsRUFBQVgsRUFBQVUsV0FBQUUsT0FBdUJELElBQ3hDWCxFQUFBVSxXQUFBRSxPQUVBWCxFQUFBekMsR0FBQWtELFdBQUFWLEVBQUFVLFdBQUFDLEdBQUE1QyxNQUFBaUMsRUFBQVUsV0FBQUMsR0FBQW5DLE1BR0EsR0FBQXdCLEVBQUFhLGNBQUEsQ0FDQVosRUFBQXpDLEdBQUFzRCxVQUFBLEVBQ0FiLEVBQUF6QyxHQUFBdUQsV0FBQWYsRUFBQWdCLFdBQUFKLE9BQ0EsUUFBQUssRUFBQSxFQUFtQkEsRUFBQWhCLEVBQUF6QyxHQUFBdUQsV0FBcUJFLElBQ3hDakIsRUFBQWdCLFdBQUFDLElBQ0FDLEtBQUFuQixTQUFBQyxFQUFBZ0IsV0FBQUMsR0FBQWhCLEVBQUF6QyxHQUFBeUQsRUFBQSxJQU9BLE9BQUFoQixHQUdBa0IsU0FBQSxTQUFBbEIsRUFBQUQsR0FDQSxHQUFBQSxHQUdBLFFBQUF4QyxFQUFBLEVBQWdCQSxHQUFBeUMsRUFBQWMsV0FBa0J2RCxJQUVsQyxHQUFBeUMsRUFBQXpDLEdBQUE2QyxPQUFBLENBQ0EsSUFBQWUsRUFBQTFCLFNBQUEyQixlQUFBcEIsRUFBQXpDLEdBQUE4QyxNQUNBTixFQUFBc0IsWUFBQUYsUUFFTSxHQUFBbkIsRUFBQXpDLEdBQUErQyxRQUFBLENBQ05hLEVBQUFHLFlBQUFDLGNBQUF2QixFQUFBekMsR0FBQStDLFFBQUFOLEVBQUF6QyxHQUFBa0QsWUFDQVYsRUFBQXNCLFlBQUFGLEdBRUFGLEtBQUFDLFNBQUFsQixFQUFBekMsR0FBQTRELFNBTUFwQixFQUFBdUIsWUFBQUMsY0FBQXZCLEVBQUEsR0FBQU0sUUFBQU4sRUFBQSxHQUFBUyxZQUNBUSxLQUFBQyxTQUFBbEIsRUFBQSxHQUFBRCxHQUdBLE9BQUFBLEdBSUF5QixHQUFBLFNBQUF6QixFQUFBMEIsRUFBQUMsR0FFQTNCLEVBQUE0QixhQUFBLGVBRUFWLEtBQUFyQixHQUFBcUIsS0FBQXJCLEdBQUEsRUFDQUcsRUFBQTZCLGFBQUEsWUFBQVgsS0FBQXJCLElBQ0FxQixLQUFBcEIsS0FBQW9CLEtBQUFyQixLQUF3QkksSUFBQWlCLEtBQUFuQixTQUFBMkIsS0FBOEIsS0FFdEQsSUFBQUksRUFBQTlCLEVBQUErQixhQUFBLGFBQ0E5QixFQUFBaUIsS0FBQXBCLEtBQUFnQyxHQUFBN0IsSUFDQWlCLEtBQUFDLFNBQUFsQixHQUFBLEdBRUErQixNQUFBbkQsVUFBQW9ELFFBQUF0RSxLQUFBZ0UsRUFBQSxTQUFBTyxHQUNBLElBQUFkLEVBQUFHLFlBQUEzQixPQUFBdUIsU0FBQWxCLEdBQUEsR0FDQUQsRUFBQXNCLFlBQUFGLEdBQ0FHLFlBQUFZLGdCQUFBZixFQUFBYyxHQUNBWCxZQUFBYSxPQUFBaEIsT0MzRUEsTUFBQWlCLEdBRUFDLGFBQ0FDLFNBQ0FGLEVBQUFwRCxPQUNBb0QsRUFBQUcsU0FBQSxXQUFpQyw0QkFHakNILEVBQUFiLGNBQUEsU0FBQWlCLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQWpELFNBQUE4QixjQUFBaUIsR0FDQSxRQUFBRyxLQUFBRixFQUNBLFFBQUFFLEVBQ0FELEVBQUFFLFVBQUFILEVBQUFFLEdBRUFELEVBQUFkLGFBQUFlLEVBQUFGLEVBQUFFLElBSUEsT0FBQUQsR0FHQU4sRUFBQVMsUUFBQSxTQUFBOUMsR0FDQSxJQUFBK0MsS0ErQkEsT0E5QkFmLE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUFxQyxFQUFBZ0QsaUJBQUEsSUFBQVgsRUFBQXBELEtBQUFNLFNBQUEsc0JBQUEyQyxHQUdBQSxFQUFBTixhQUFBLFFBRUFNLEVBQUFILGFBQUEsVUFDQUcsRUFBQU4sYUFBQSxtQkFHQSxJQURBUyxFQUFBWSxTQUFBZixJQUFBSCxhQUFBLFFBQUFHLEVBQUExRCxPQUVBdUUsRUFBQUcsVUFBQSxFQU1BSCxFQUFBYixFQUFBSCxhQUFBLFNBQUFHLEVBQUExRCxPQUlBMEQsRUFBQUgsYUFBQU0sRUFBQXBELEtBQUFNLFlBQ0EyQyxFQUFBMUQsT0FBQSxJQUFBMEQsRUFBQTFELE1BQ0F1RSxFQUFBYixFQUFBSCxhQUFBTSxFQUFBcEQsS0FBQU0sV0FBQTJDLEVBQUExRCxNQUNNMEQsRUFBQU4sYUFBQSxXQUNObUIsRUFBQWIsRUFBQUgsYUFBQU0sRUFBQXBELEtBQUFNLFdBQUEyQyxFQUFBSCxhQUFBLGFBTUFnQixHQUdBVixFQUFBWSxTQUFBLFNBQUFmLEVBQUFuRSxFQUFBUyxHQUNBLElBQUF5RSxFQUFBZixFQUFBSCxhQUFBLGlCQUNBLEdBQUFNLEVBQUFDLFVBQUFXLEdBQ0EsT0FBQVosRUFBQUMsVUFBQVcsR0FBQWYsRUFBQW5FLEVBQUFTLElBSUE2RCxFQUFBYyxpQkFBQSxTQUFBbkQsRUFBQW9ELEVBQUFDLEVBQUFDLEdBQ0F0RCxFQUFBbUQsaUJBQUFDLEVBQUEsU0FBQWxCLEdBRUEsSUFBQXFCLEVBQUFELEVBQUFFLE1BQUEsR0FDQUQsRUFBQUUsUUFBQXZCLEdBRUEsSUFBQVAsRUFBQTBCLEVBQUFLLE1BQUF4QyxLQUFBcUMsR0FDQSxHQUFBNUIsRUFBQSxDQUVBLEdBQUEzQixFQUFBNEIsYUFBQSxnQkFFQSxJQUFBK0IsRUFBQTNELEVBQUErQixhQUFBLGVBQ0FNLEVBQUFFLEtBQUF6RCxlQUFBNkUsR0FDQWhDLEVBQUFVLEVBQUFFLEtBQUFvQixHQUFBaEMsR0FFVVUsRUFBQUMsVUFBQXhELGVBQUE2RSxHQUNWaEMsRUFBQVUsRUFBQUMsVUFBQXFCLEdBQUFoQyxHQUVBaUMsUUFBQUMsTUFBQSx5QkFBQUYsRUFBQSwyQkFHQXRCLEVBQUFGLGdCQUFBakIsS0FBQVMsTUFFTSxJQUtOVSxFQUFBeUIsSUFBQSxTQUFBQyxFQUFBQyxHQUVBLHVCQUFBOUYsT0FBQVcsVUFBQTJELFNBQUE3RSxLQUFBb0csR0FFQSxRQUFBbkIsS0FBQW1CLEVBQ0Esc0JBQUE3RixPQUFBVyxVQUFBMkQsU0FBQTdFLEtBQUFvRyxFQUFBbkIsSUFDQTFCLEtBQUFvQixVQUFBTSxHQUFBbUIsRUFBQW5CLEdBRUFnQixRQUFBQyxNQUFBLCtDQUFBakIsT0FHSSxvQkFBQTFFLE9BQUFXLFVBQUEyRCxTQUFBN0UsS0FBQW9HLElBQUEsc0JBQUE3RixPQUFBVyxVQUFBMkQsU0FBQTdFLEtBQUFxRyxHQUVKOUMsS0FBQW9CLFVBQUF5QixHQUFBQyxFQUdBSixRQUFBQyxNQUFBLG9DQUFBRSxFQUFBLEtBQUFDLEVBQUEsdUNBR0EsT0FBQTlDLE1BR0FtQixFQUFBRCxPQUFBLFNBQUFwQyxHQUFpQ2tCLEtBQUErQyxPQUFBakUsSUFFakNxQyxFQUFBNkIsT0FBQSxTQUFBSCxFQUFBQyxHQUVBLHVCQUFBOUYsT0FBQVcsVUFBQTJELFNBQUE3RSxLQUFBb0csR0FFQSxRQUFBbkIsS0FBQW1CLEVBQ0E3QyxLQUFBakMsS0FBQUgsZUFBQThELEdBQ0ExQixLQUFBakMsS0FBQTJELEdBQUFtQixFQUFBbkIsR0FFQWdCLFFBQUFDLE1BQUEsNEJBQUFqQixRQUtBMUIsS0FBQWpDLEtBQUFILGVBQUFpRixHQUNBN0MsS0FBQWpDLEtBQUE4RSxHQUFBQyxFQUVBSixRQUFBQyxNQUFBLDRCQUFBakIsR0FHQSxPQUFBMUIsTUFHQW1CLEVBQUE0QixPQUFBLFNBQUFqRSxHQUlBLElBRkEsSUFDQW1FLEdBREFuRSxHQUFBa0IsS0FBQWpDLEtBQUFRLE9BQ0F1RCxpQkFBQSxXQUNBeEYsRUFBQSxFQUFnQkEsRUFBQTJHLEVBQUF2RCxPQUFtQnBELElBQUEsQ0FFbkMsSUFBQTRHLEVBQUFELEVBQUEzRyxHQUFBdUUsYUFBQSxTQUFBM0IsT0FBQWlFLE1BQUEsT0FDQSxJQUFBRCxFQUFBeEQsT0FHQSxTQUZBTSxLQUFBb0QsYUFBQUgsRUFBQTNHLEdBQUE0RyxLQVVBL0IsRUFBQWlDLGFDaktBLFNBQUF0RSxFQUFBb0UsR0FFQSxRQUFBNUcsRUFBQSxFQUFjQSxFQUFBNEcsRUFBQXhELE9BQW9CcEQsSUFBQSxDQUNsQyxJQUFBOEYsRUFBQWMsRUFBQTVHLEdBQUE2RyxNQUFBOUMsWUFBQXRDLEtBQUFDLFlBRUEsR0FBQW9FLEVBQUExQyxPQUFBLEVBRUEsT0FEQWdELFFBQUFXLEtBQUEsMklBQUFoRCxZQUFBdEMsS0FBQUMsYUFDQSxFQUdBLEdBQUFvRSxFQUFBLEdBQUFrQixNQUFBLG9CQUNBLGVBQUFsQixFQUFBLElBQ0EsSUFBQW1CLFNBQUFuQixFQUFBLElBRUEsT0FEQU0sUUFBQWMsSUFBQSxrREFDQSxFQUdBLEdBQUFuRCxZQUFBZ0IsS0FBQXpELGVBQUF3RSxFQUFBLElBQ0EsSUFBQXFCLEVBQUFDLFlBQUEsV0FFQSxJQUFBckIsRUFBQUQsRUFBQUUsTUFBQSxHQUlBLEdBSEFELEVBQUFFLFFBQUFrQixHQUVBaEQsUUFBQUosWUFBQWdCLEtBQUFlLEVBQUEsSUFBQUksTUFBQTFELEVBQUF1RCxHQUNBNUIsUUFBQSxDQUVBLEdBQUEzQixFQUFBNEIsYUFBQSxnQkFHQSxJQUFBK0IsRUFBQTNELEVBQUErQixhQUFBLGVBQ0FSLFlBQUFnQixLQUFBekQsZUFBQTZFLEdBQ0FoQyxRQUFBSixZQUFBZ0IsS0FBQW9CLEdBQUFoQyxTQUVnQkosWUFBQWUsVUFBQXhELGVBQUE2RSxHQUNoQmhDLFFBQUFKLFlBQUFlLFVBQUFxQixHQUFBaEMsU0FFQWlDLFFBQUFDLE1BQUEseUJBQUFGLEVBQUEsMkJBS0FwQyxZQUFBWSxnQkFBQW5DLEVBQUEyQixXQUtXMkIsRUFBQSxRQUVGLEtBQUEvQixZQUFBZSxVQUFBeEQsZUFBQXdFLEVBQUEsSUFpQ1QsT0FEQU0sUUFBQUMsTUFBQSxzQkFBQUUsRUFBQSxzRUFDQSxFQWhDQVksRUFBQUMsWUFBQSxXQUVBLElBQUFyQixFQUFBRCxFQUFBRSxNQUFBLEdBQ0FELEVBQUFFLFFBQUFrQixHQUdBLElBQUFoRCxFQUFBSixZQUFBZSxVQUFBZ0IsRUFBQSxJQUFBSSxNQUFBMUQsRUFBQXVELEdBRUEsR0FBQTVCLEVBQUEsQ0FHQSxHQUFBM0IsRUFBQTRCLGFBQUEsZ0JBQ0EsSUFBQStCLEVBQUEzRCxFQUFBK0IsYUFBQSxlQUNBUixZQUFBZ0IsS0FBQXpELGVBQUE2RSxHQUNBaEMsRUFBQUosWUFBQWdCLEtBQUFvQixHQUFBaEMsR0FFZ0JKLFlBQUFlLFVBQUF4RCxlQUFBNkUsR0FDaEJoQyxFQUFBSixZQUFBZSxVQUFBcUIsR0FBQWhDLEdBRUFpQyxRQUFBQyxNQUFBLHlCQUFBRixFQUFBLDJCQUlBcEMsWUFBQVksZ0JBQUFuQyxFQUFBMkIsS0FHVzJCLEVBQUEsVUFZTCxjQUFBQSxFQUFBLElBQ04sSUFBQW1CLFNBQUFuQixFQUFBLElBRUEsT0FEQU0sUUFBQWMsSUFBQSxpREFDQSxFQUdBLEdBQUFuRCxZQUFBZ0IsS0FBQXpELGVBQUF3RSxFQUFBLElBQ0EsSUFBQXVCLEVBQUFDLFdBQUEsV0FFQSxJQUFBdkIsRUFBQUQsRUFBQUUsTUFBQSxHQUlBLEdBSEFELEVBQUFFLFFBQUFvQixHQUVBbEQsUUFBQUosWUFBQWdCLEtBQUFlLEVBQUEsSUFBQUksTUFBQTFELEVBQUF1RCxHQUNBNUIsUUFBQSxDQUVBLEdBQUEzQixFQUFBNEIsYUFBQSxnQkFDQSxJQUFBK0IsRUFBQTNELEVBQUErQixhQUFBLGVBQ0FSLFlBQUFnQixLQUFBekQsZUFBQTZFLEdBQ0FoQyxRQUFBSixZQUFBZ0IsS0FBQW9CLEdBQUFoQyxTQUVnQkosWUFBQWUsVUFBQXhELGVBQUE2RSxHQUNoQmhDLFFBQUFKLFlBQUFlLFVBQUFxQixHQUFBaEMsU0FFQWlDLFFBQUFDLE1BQUEseUJBQUFGLEVBQUEsMkJBSUFwQyxZQUFBWSxnQkFBQW5DLEVBQUEyQixXQUdXMkIsRUFBQSxRQUVILEtBQUEvQixZQUFBZSxVQUFBeEQsZUFBQXdFLEVBQUEsSUErQlIsT0FEQU0sUUFBQUMsTUFBQSxzQkFBQUUsRUFBQSxzRUFDQSxFQTlCQWMsRUFBQUMsV0FBQSxXQUVBLElBQUF2QixFQUFBRCxFQUFBRSxNQUFBLEdBSUEsR0FIQUQsRUFBQUUsUUFBQW9CLEdBRUFsRCxRQUFBSixZQUFBZSxVQUFBZ0IsRUFBQSxJQUFBSSxNQUFBMUQsRUFBQXVELEdBQ0E1QixRQUFBLENBRUEsR0FBQTNCLEVBQUE0QixhQUFBLGdCQUNBLElBQUErQixFQUFBM0QsRUFBQStCLGFBQUEsZUFDQVIsWUFBQWdCLEtBQUF6RCxlQUFBNkUsR0FDQWhDLFFBQUFKLFlBQUFnQixLQUFBb0IsR0FBQWhDLFNBRWdCSixZQUFBZSxVQUFBeEQsZUFBQTZFLEdBQ2hCaEMsUUFBQUosWUFBQWUsVUFBQXFCLEdBQUFoQyxTQUVBaUMsUUFBQUMsTUFBQSx5QkFBQUYsRUFBQSwyQkFLQXBDLFlBQUFZLGdCQUFBbkMsRUFBQTJCLFdBR1cyQixFQUFBLEtBcUJYLEdBQUEvQixZQUFBZ0IsS0FBQXpELGVBQUF3RSxFQUFBLElBQ0FwQyxLQUFBaUMsaUJBQUFuRCxFQUFBc0QsRUFBQSxHQUFBL0IsWUFBQWdCLEtBQUFlLEVBQUEsSUFBQUEsT0FFSyxLQUFBL0IsWUFBQWUsVUFBQXhELGVBQUF3RSxFQUFBLElBT0wsT0FEQU0sUUFBQUMsTUFBQSxzQkFBQVAsRUFBQSx5RUFDQSxFQUxBcEMsS0FBQWlDLGlCQUFBbkQsRUFBQXNELEVBQUEsR0FBQS9CLFlBQUFlLFVBQUFnQixFQUFBLElBQUFBLE1EUEFqQixFQUFBRixnQkVuS0EsU0FBQW5DLEVBQUEyQixHQUVBLHVCQUFBekQsT0FBQVcsVUFBQTJELFNBQUE3RSxLQUFBZ0UsSUFBQSxvQkFBQXpELE9BQUFXLFVBQUEyRCxTQUFBN0UsS0FBQWdFLEdBVUEsT0FSQUssTUFBQW5ELFVBQUFvRCxRQUFBdEUsS0FBQXFDLEVBQUFnRCxpQkFBQXpCLFlBQUF0QyxLQUFBRSxZQUFBLFNBQUErQyxHQUNBLEdBQUFBLEVBQUFOLGFBQUFMLFlBQUF0QyxLQUFBRyxXQUFtRCxTQUNuRDhDLEVBQUFOLGFBQUFMLFlBQUF0QyxLQUFBTyxhQUNBMEMsRUFBQVosWUFBQTVCLFNBQUEyQixlQUFBTSxJQUVBTyxFQUFBNkMsVUFBQXBELEtBR0EsRUFHRSxHQUFBQSxFQUFBbkIsU0FXRixPQVRBd0IsTUFBQW5ELFVBQUFvRCxRQUFBdEUsS0FBQXFDLEVBQUFnRCxpQkFBQXpCLFlBQUF0QyxLQUFBRSxZQUFBLFNBQUErQyxHQUNBLEdBQUFBLEVBQUFOLGFBQUFMLFlBQUF0QyxLQUFBRyxXQUFtRCxTQUNuRDhDLEVBQUFOLGFBQUFMLFlBQUF0QyxLQUFBTyxhQUNBMEMsRUFBQVosWUFBQUssSUFFQU8sRUFBQTZDLFVBQUEsR0FDQTdDLEVBQUFaLFlBQUFLLE9BR0EsRUFFRSx1QkFBQXpELE9BQUFXLFVBQUEyRCxTQUFBN0UsS0FBQWdFLEdBRUYsb0JBQUF6RCxPQUFBVyxVQUFBMkQsU0FBQTdFLEtBQUFnRSxFQUFBcUQsU0FDQWhELE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUE0RCxZQUFBdEMsS0FBQVUsUUFBQXFELGlCQUFBekIsWUFBQXRDLEtBQUFFLFlBQUEsU0FBQStDLEdBQ0FYLFlBQUEwRCxXQUFBL0MsRUFBQVAsRUFBQXFELFVBUUEsb0JBQUE5RyxPQUFBVyxVQUFBMkQsU0FBQTdFLEtBQUFnRSxFQUFBdUQsYUFDQWxELE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUFxQyxFQUFBbUYsc0JBQUFuQyxpQkFBQXpCLFlBQUF0QyxLQUFBRSxZQUFBLFNBQUErQyxHQUNBQSxFQUFBTixhQUFBTCxZQUFBdEMsS0FBQUcsWUFDQW1DLFlBQUEwRCxXQUFBL0MsRUFBQVAsRUFBQXVELGVBSUd2RCxFQUFBdUQsYUFDSGxELE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUFxQyxFQUFBbUYsc0JBQUFuQyxpQkFBQXpCLFlBQUF0QyxLQUFBRSxZQUFBLFNBQUErQyxHQUNBQSxFQUFBTixhQUFBTCxZQUFBdEMsS0FBQUcsWUFDQW1DLFlBQUE2RCxlQUFBbEQsRUFBQVAsRUFBQXVELGVBTUEsb0JBQUFoSCxPQUFBVyxVQUFBMkQsU0FBQTdFLEtBQUFnRSxFQUFBMEQsUUFDQXJELE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUFxQyxFQUFBbUYsV0FBQW5DLGlCQUFBekIsWUFBQXRDLEtBQUFFLFlBQUEsU0FBQStDLEdBQ0FYLFlBQUEwRCxXQUFBL0MsRUFBQVAsRUFBQTBELFVBR0cxRCxFQUFBMEQsUUFDSHJELE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUFxQyxFQUFBbUYsV0FBQW5DLGlCQUFBekIsWUFBQXRDLEtBQUFFLFlBQUEsU0FBQStDLEdBQ0FBLEVBQUFOLGFBQUFMLFlBQUF0QyxLQUFBRyxZQUNBbUMsWUFBQTZELGVBQUFsRCxFQUFBUCxFQUFBMEQsVUFNQXJELE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUFxQyxFQUFBZ0QsaUJBQUF6QixZQUFBdEMsS0FBQUUsWUFBQSxTQUFBK0MsR0FDQVgsWUFBQTBELFdBQUEvQyxFQUFBUCxLQUdBQSxFQUFBMkQsTUFDQXRELE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUFxQyxFQUFBZ0QsaUJBQUF6QixZQUFBdEMsS0FBQUUsWUFBQSxTQUFBK0MsR0FDQUEsRUFBQU4sYUFBQUwsWUFBQXRDLEtBQUFHLFlBQ0FtQyxZQUFBNkQsZUFBQWxELEVBQUFQLEVBQUEyRCxRQU9BM0QsRUFBQTRELFVBQUE1RCxFQUFBNEQsU0FBQWhFLFlBQUF0QyxLQUFBSyxhQUdBLG9CQUFBcEIsT0FBQVcsVUFBQTJELFNBQUE3RSxLQUFBZ0UsRUFBQTRELFNBQUFqQyxNQUVBdEIsTUFBQW5ELFVBQUFvRCxRQUFBdEUsS0FBQWdFLEVBQUE0RCxTQUFBaEUsWUFBQXRDLEtBQUFLLFdBQUEwRCxpQkFBQXpCLFlBQUF0QyxLQUFBRSxZQUFBLFNBQUErQyxHQUNBWCxZQUFBMEQsV0FBQS9DLEVBQUFQLEVBQUE0RCxTQUFBakMsUUFHTSxtQkFBQXBGLE9BQUFXLFVBQUEyRCxTQUFBN0UsS0FBQWdFLEVBQUE0RCxTQUFBakMsTUFFTnBDLEtBQUFpQixnQkFBQVIsRUFBQTRELFNBQUFoRSxZQUFBdEMsS0FBQUssV0FBQXFDLEVBQUE0RCxTQUFBakMsTUFFTTNCLEVBQUE0RCxTQUFBakMsTUFFTnRCLE1BQUFuRCxVQUFBb0QsUUFBQXRFLEtBQUFnRSxFQUFBNEQsU0FBQWhFLFlBQUF0QyxLQUFBSyxXQUFBMEQsaUJBQUF6QixZQUFBdEMsS0FBQUUsWUFBQSxTQUFBK0MsR0FDQVgsWUFBQTZELGVBQUFsRCxFQUFBUCxFQUFBNEQsU0FBQWpDLGNBU0Usc0JBQUFwRixPQUFBVyxVQUFBMkQsU0FBQTdFLEtBQUFnRSxJQUNGLEdBQUEzQixFQUFBNEIsYUFBQSxtQkFDQTVCLEVBQUErQixhQUFBLG1CQUNBLElBQUFMLEVBQUFoQyxTQUFBOEYsY0FBQXhGLEVBQUErQixhQUFBLG1CQUNBLEdBQUFMLEVBQUFsQixTQUFBLENBQ0EsSUFBQVAsS0FDQUEsRUFBQU0sUUFBQW1CLEVBQUFsQixTQUFBQyxjQUNBUixFQUFBUyxjQUNBLFFBQUFDLEVBQUEsRUFBaUJBLEVBQUFlLEVBQUFoQixXQUFBRSxPQUE4QkQsSUFBS2UsRUFBQWhCLFdBQUFFLE9BRXBEWCxFQUFBUyxXQUFBZ0IsRUFBQWhCLFdBQUFDLEdBQUE1QyxNQUFBMkQsRUFBQWhCLFdBQUFDLEdBQUFuQyxNQUdBK0MsWUFBQTNCLE9BQUE2QixHQUFBekIsRUFBQTBCLEVBQUFDLEVBQUExQixTQUtFLHNCQUFBL0IsT0FBQVcsVUFBQTJELFNBQUE3RSxLQUFBZ0UsSUFHRmlDLFFBQUFjLElBQUEvQyxFQUFBLGdDRmtDQVUsRUFBQTRDLFdFNUJBLFNBQUFqRixFQUFBMkIsR0FJQSxHQUFBM0IsRUFBQTRCLGFBQUFMLFlBQUF0QyxLQUFBRyxXQUFBLENBQ0EsSUFBQXFHLEVBQUF6RixFQUFBK0IsYUFBQVIsWUFBQXRDLEtBQUFHLFdBQUFnQixPQUNBLEdBQUFxRixFQUFBLENBQ0EsSUFBQWpILEVBQUErQyxZQUFBbUUsY0FBQUQsRUFBQTlELEdBRUFuRCxJQUVBLG9CQUFBTixPQUFBVyxVQUFBMkQsU0FBQTdFLEtBQUFhLElBQUEsb0JBQUFOLE9BQUFXLFVBQUEyRCxTQUFBN0UsS0FBQWEsR0FDQXdCLEVBQUE0QixhQUFBTCxZQUFBdEMsS0FBQU8sYUFDQVEsRUFBQXNCLFlBQUE1QixTQUFBMkIsZUFBQTdDLElBRUF3QixFQUFBK0UsVUFBQXZHLEVBR01BLEVBQUFnQyxTQUNOUixFQUFBNEIsYUFBQUwsWUFBQXRDLEtBQUFPLGFBQ0FRLEVBQUFzQixZQUFBOUMsSUFHQW9GLFFBQUFjLElBQUFsRyxHQUNBd0IsRUFBQStFLFVBQUEsR0FDQS9FLEVBQUFzQixZQUFBOUMsS0FJQW9GLFFBQUFDLE1BQUEsdUVBQTJFbEMsRUFBQThELEdBQUEsT0FBQXpGLEVBQUFRLFNBQUFDLGNBQUEsaUJBQzNFbUQsUUFBQWMsSUFBQTFFLFVBTUE0RCxRQUFBVyxLQUFBLHVCQUFBaEQsWUFBQXRDLEtBQUFHLFVBQUEsb0NBQUF1QyxLRlBBVSxFQUFBK0MsZUVZQSxTQUFBcEYsRUFBQTJCLEdBRUEsb0JBQUF6RCxPQUFBVyxVQUFBMkQsU0FBQTdFLEtBQUFnRSxJQUFBLG9CQUFBekQsT0FBQVcsVUFBQTJELFNBQUE3RSxLQUFBZ0UsR0FFQTNCLEVBQUE0QixhQUFBTCxZQUFBdEMsS0FBQU8sYUFDQVEsRUFBQXNCLFlBQUE1QixTQUFBMkIsZUFBQU0sSUFFQTNCLEVBQUErRSxVQUFBcEQsRUFJRUEsRUFBQW5CLFNBQ0ZSLEVBQUE0QixhQUFBTCxZQUFBdEMsS0FBQU8sYUFDQVEsRUFBQXNCLFlBQUFLLElBRUEzQixFQUFBK0UsVUFBQSxHQUNBL0UsRUFBQXNCLFlBQUFLLEdBQ0FKLFlBQUFhLE9BQUFwQyxJQUdBNEQsUUFBQWMsSUFBQSxzQ0FBQS9DLElGL0JBVSxFQUFBc0QsY0VrQ0EsU0FBQTNGLEVBQUE0RixLRmpDQXZELEVBQUFxRCxjRW9DQSxTQUFBRCxFQUFBOUQsR0FHQSxJQUFBa0UsRUFBQUosRUFBQXBCLE1BQUEsS0FFQSxHQUFBd0IsRUFBQWpGLE9BQUEsQ0FDQSxNQUFBaUYsRUFBQWpGLE9BQ0EsT0FBQWUsRUFBQThELEdBQ0ksR0FBQUksRUFBQWpGLE9BQUEsR0FFSixJQURBLElBQUFtQyxFQUFBcEIsRUFDQWhCLEVBQUEsRUFBZ0JBLEVBQUFrRixFQUFBakYsT0FBZUQsSUFBQSxDQUMvQixJQUFBb0MsRUFBQThDLEVBQUFsRixJQUVNLENBRU5pRCxRQUFBYyxJQUFBLGVBQUFlLEVBQUEsS0FBQTlELEdBQ0EsTUFKQW9CLElBQUE4QyxFQUFBbEYsSUFVQSxPQUFBb0MsS0Z4REFWLEVBQUF6QyxTQUVBa0csT0FBQXZFLFlBQ0EsdUJBQUF1RSxPQUFBdkUsWUFBQWlCLFdBQ0FvQixRQUFBVyxLQUFBLHlHQUVBWCxRQUFBQyxNQUFBLG9LQUdBaUMsT0FBQXZFLFlBQUFjIiwiZmlsZSI6IiRpbXBsZUV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCAgdmFyIGluaXQ9e1xuXG5cdFx0JHNlcGVyYXRvcjovWy18X10vZywvLy9bOl0vZyxcblx0XHQkY2xhc3NOYW1lOlwiLnJldHVyblwiLC8vY2xhc3MgbmFtZSB0byBkaXNwdGFjaCByZXR1cm5cblx0XHQkZGF0YUZlZWQ6XCJkYXRhLWZlZWRcIiwvL2RhdGEtcmV0dXJuIHdvdWxkIHNvdW5kIGdyZWF0XG5cdFx0JG5vdGlmaWNhdGlvbjpudWxsLFxuXHRcdCRyZXR1cm5UbzpcImVsXCIsLy9kZWZpbmUgeW91ciBvdXRlciBzY29wZSBlbGVtZW50IGhvbGRlclxuXHRcdCRkYXRhR2V0OlwiZGF0YS1nZXRcIiwvL1xuXHRcdCRkYXRhQXBwZW5kOlwiZGF0YS1hcHBlbmRcIixcblx0XHQkcm9vdDpkb2N1bWVudCxcblx0XHQkZ2xvYmFsOmRvY3VtZW50LFxuXHRcbn07IiwiZXhwb3J0IHZhciAgcmVuZGVyPXtcblx0XHRpZDowLFxuXHRcdGxpc3Q6e30sXG5cdFx0aHRtbDJPYmo6ZnVuY3Rpb24oZWwsb2JqLGkpe1xuXG5cdFx0XHRcdG9ialtpXT17fTtcblx0XHRcdFx0aWYoZWwubm9kZVR5cGU9PTMpe1xuXHRcdFx0XHRcdGlmKGVsLm5vZGVWYWx1ZS50cmltKCkpe1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRvYmpbaV0uaXNUZXh0PXRydWU7XG5cdFx0XHRcdFx0XHRvYmpbaV0udGV4dD1lbC5ub2RlVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZXtcblxuXHRcdFx0XHRcdG9ialtpXS50YWdOYW1lPWVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0b2JqW2ldLmF0dHJpYnV0ZXM9e307XG5cdFx0XHRcdFx0Zm9yKHZhciBqPTA7ajxlbC5hdHRyaWJ1dGVzLmxlbmd0aDtqKyspe1xuXHRcdFx0XHRcdFx0ZWwuYXR0cmlidXRlcy5sZW5ndGhcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coaik7XG5cdFx0XHRcdFx0XHRvYmpbaV0uYXR0cmlidXRlc1tlbC5hdHRyaWJ1dGVzW2pdLm5hbWVdPWVsLmF0dHJpYnV0ZXNbal0udmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoZWwuaGFzQ2hpbGROb2Rlcyl7XG5cdFx0XHRcdFx0XHRvYmpbaV0uaGFzQ2hpbGQ9dHJ1ZTtcblx0XHRcdFx0XHRcdG9ialtpXS5jaGlsZENvdW50PWVsLmNoaWxkTm9kZXMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaz0wOyBrPG9ialtpXS5jaGlsZENvdW50OyBrKyspe1xuXHRcdFx0XHRcdFx0XHRpZihlbC5jaGlsZE5vZGVzW2tdKVxuXHRcdFx0XHRcdFx0XHR0aGlzLmh0bWwyT2JqKGVsLmNoaWxkTm9kZXNba10sb2JqW2ldLGsrMSk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdCByZXR1cm4gb2JqO1xuXG5cdFx0fSxcblx0XHRvYmoySHRtbDpmdW5jdGlvbihvYmosZWwpe1xuXHRcdFx0aWYoZWwpe1xuXG5cdFx0XHRcdFxuXHRcdFx0XHRmb3IodmFyIGk9MTtpPD1vYmouY2hpbGRDb3VudDtpKyspe1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKG9ialtpXS5pc1RleHQpe1xuXHRcdFx0XHRcdFx0dmFyIGVsZT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvYmpbaV0udGV4dCk7XG5cdFx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZChlbGUpO1xuXG5cdFx0XHRcdFx0fWVsc2UgaWYob2JqW2ldLnRhZ05hbWUpe1xuXHRcdFx0XHRcdFx0dmFyIGVsZT0kaW1wbGVFdmVudC5jcmVhdGVFbGVtZW50KG9ialtpXS50YWdOYW1lLCBvYmpbaV0uYXR0cmlidXRlcyk7XG5cdFx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZChlbGUpO1xuXG5cdFx0XHRcdFx0XHR0aGlzLm9iajJIdG1sKG9ialtpXSxlbGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cblx0XHRcdH1lbHNle1xuXHRcdFx0XHRlbD0kaW1wbGVFdmVudC5jcmVhdGVFbGVtZW50KG9ialsxXS50YWdOYW1lLCBvYmpbMV0uYXR0cmlidXRlcyk7XG5cdFx0XHRcdHRoaXMub2JqMkh0bWwob2JqWzFdLGVsKTtcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHRcblx0XHR9LFxuXHRcdFxuXHRcdHRvOmZ1bmN0aW9uKGVsLGNvbXBvbmVudCwkcmV0dXJuKXtcblxuXHRcdFx0aWYoIWVsLmhhc0F0dHJpYnV0ZSgncmVuZGVyLWlkJykpe1xuXHRcdFx0XHRcblx0XHQgXHRcdHRoaXMuaWQ9dGhpcy5pZCsxO1xuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUoJ3JlbmRlci1pZCcsdGhpcy5pZCk7XG5cdFx0XHRcdHRoaXMubGlzdFt0aGlzLmlkXT17b2JqOnRoaXMuaHRtbDJPYmooY29tcG9uZW50LHt9LDEpfTtcblx0XHQgXHR9XG5cdFx0IFx0dmFyIHJlbmRlcklkPWVsLmdldEF0dHJpYnV0ZSgncmVuZGVyLWlkJyk7XG5cdFx0IFx0dmFyIG9iaj10aGlzLmxpc3RbcmVuZGVySWRdLm9iajtcblx0XHQgXHR2YXIgZWxlPXRoaXMub2JqMkh0bWwob2JqLGZhbHNlKTtcblx0XHQgXHQvLyBmb3IgZWFjaCBpdGVtIGluIGFycmF5XG5cdFx0IFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCgkcmV0dXJuLGZ1bmN0aW9uKGUpe1xuXHRcdCBcdFx0dmFyIGVsZT0kaW1wbGVFdmVudC5yZW5kZXIub2JqMkh0bWwob2JqLGZhbHNlKTtcblx0XHQgXHRcdGVsLmFwcGVuZENoaWxkKGVsZSk7XG5cdFx0IFx0XHQkaW1wbGVFdmVudC5kaXNwYXRjaFJldHVybnMoZWxlLCBlKTtcblx0XHQgXHRcdCRpbXBsZUV2ZW50LnVwZGF0ZShlbGUpO1xuXHRcdCBcdH0pO1xuXHRcdCBcdFxuXHRcdH0sXG5cdFx0XG5cdFx0XG5cdFx0XG5cdH07IiwiXG5pbXBvcnQge2luaXR9IGZyb20gJy4vaW5pdC5qcyc7XG5pbXBvcnQge3JlbmRlcn0gZnJvbSBcIi4vcmVuZGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRQYXRjaGVyIGZyb20gXCIuL2V2ZW50UGF0Y2hlci5qc1wiO1xuaW1wb3J0ICogYXMgRGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hSZXR1cm5zLmpzXCI7XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRjb25zdCAkaW1wbGVFdmVudD17fTtcbi8vQ29udGFpbmVyIG9yIGhvbGRlcnNcblx0JGltcGxlRXZlbnQuY2FsbGJhY2tzPXt9O1xuXHQkaW1wbGVFdmVudC5jb3JlPXt9O1xuXHQkaW1wbGVFdmVudC5pbml0PWluaXQ7XG5cdCRpbXBsZUV2ZW50LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIFwiT2JqZWN0ICRpbXBsZUV2ZW50XCI7fTtcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL0hlbHBlciBNZXRob2RzXG5cdCRpbXBsZUV2ZW50LmNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24odGFnLCBhdHRyKXtcblx0XHR2YXIgZWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG5cdFx0XHRmb3IgKHZhciBrZXlzIGluIGF0dHIpe1xuXHRcdFx0XHRpZihrZXlzPT1cInRleHRcIil7XG5cdFx0XHRcdFx0ZWxlbWVudC5pbm5lclRleHQ9YXR0cltrZXlzXTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5cyxhdHRyW2tleXNdKTtcblx0XHRcdFx0fVxuXHRcdCAgICAgICAgXG5cdFx0ICAgICAgfVxuXHRcdCByZXR1cm4gZWxlbWVudDtcblx0fTtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0JGltcGxlRXZlbnQuZ2V0RGF0YT1mdW5jdGlvbihlbCl7XG5cdFx0dmFyIHJlc3VsdD17fTtcblx0XHRBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1snKyRpbXBsZUV2ZW50LmluaXQuJGRhdGFHZXQrJ10sIFtuYW1lXScpLGZ1bmN0aW9uKGUpe1xuXHRcdFxuXHRcdFx0Ly9maXJzdCBjaGVjayBmb3IgbmFtZVxuXHRcdFx0aWYoZS5oYXNBdHRyaWJ1dGUoJ25hbWUnKSl7XG5cdFx0XHRcdC8vY2hlY2sgaWYgbmFtZSBoYXMgc29tZSB2YWx1ZVxuXHRcdFx0XHRpZihlLmdldEF0dHJpYnV0ZSgnbmFtZScpKXtcblx0XHRcdFx0XHRpZihlLmhhc0F0dHJpYnV0ZSgnZGF0YS12YWxpZGF0ZScpKXtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dmFyIHZhbGlkYXRlPSRpbXBsZUV2ZW50LnZhbGlkYXRlKGUsZS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSxlLnZhbHVlKTtcblx0XHRcdFx0XHRcdGlmKHZhbGlkYXRlPT09ZmFsc2Upe1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQuaGFzRXJyb3I9dHJ1ZTtcblx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRbZS5nZXRBdHRyaWJ1dGUoJ25hbWUnKV09ZS52YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0cmVzdWx0W2UuZ2V0QXR0cmlidXRlKCduYW1lJyldPWUudmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZXsvL3RoZW4gY2hlY2sgZm9yIGRhdGEtZ2V0XG5cdFx0XHRcdGlmKGUuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFHZXQpKXtcblx0XHRcdFx0XHRpZihlLnZhbHVlIHx8IGUudmFsdWU9PVwiXCIpe1xuXHRcdFx0XHRcdFx0cmVzdWx0W2UuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFHZXQpXT1lLnZhbHVlO1xuXHRcdFx0XHRcdH1lbHNlIGlmKGUuaGFzQXR0cmlidXRlKFwidmFsdWVcIikpe1xuXHRcdFx0XHRcdFx0cmVzdWx0W2UuZ2V0QXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFHZXQpXT1lLmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0JGltcGxlRXZlbnQudmFsaWRhdGU9ZnVuY3Rpb24oZSxuYW1lLCB2YWx1ZSl7XG5cdFx0XHR2YXIgdmFsaWRhdGU9ZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsaWRhdGUnKTtcblx0XHRcdFx0aWYoJGltcGxlRXZlbnQuY2FsbGJhY2tzW3ZhbGlkYXRlXSl7XG5cdFx0XHRcdFx0cmV0dXJuICRpbXBsZUV2ZW50LmNhbGxiYWNrc1t2YWxpZGF0ZV0oZSxuYW1lLHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdFx0XG5cdCRpbXBsZUV2ZW50LmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZWwsZXZlbnQsaGFuZGxlcixkYXRhKXtcblx0XHRlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHQvL2FkZGluZyBjdXJyZW50IGV2ZW50IHRvIGFyZ3Mgc28gdGhhdCBjYWxsYmFjayBjYW4gYWNlc3MgaXQuXG5cdFx0XHRcdHZhciBhcmdzPWRhdGEuc2xpY2UoMik7XG5cdFx0XHRcdGFyZ3MudW5zaGlmdChlKTtcblx0XHRcdFx0IC8vY2FwdXR1cmUgYW55IHJldHVybiBmcm9tIGNhbGxiYWNrIHRvIGZlZWQgcmV0dXJuIGZlZWRlclxuXHRcdFx0XHRcdHZhciAkcmV0dXJuPWhhbmRsZXIuYXBwbHkodGhpcyxhcmdzKTsvL2dpdmUgY2FsbGJhY2sgdGhpcyBzY29wZSBvZiBhZGRFdmVudExpc3RlbmVyIGkuZSB0YXJnZXQgZWxlbWVudFxuXHRcdFx0XHRcdFx0aWYoJHJldHVybil7XG5cdFx0XHRcdFx0XHRcdC8vaWYgYW55IHJldHVybiBoYW5kbGUgaXRcblx0XHRcdFx0XHRcdFx0aWYoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZpbHRlcicpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGZpbHRlcj1lbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsdGVyJyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZigkaW1wbGVFdmVudC5jb3JlLmhhc093blByb3BlcnR5KGZpbHRlcikpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQkcmV0dXJuPSRpbXBsZUV2ZW50LmNvcmVbZmlsdGVyXSgkcmV0dXJuKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fWVsc2UgaWYoJGltcGxlRXZlbnQuY2FsbGJhY2tzLmhhc093blByb3BlcnR5KGZpbHRlcikpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQkcmV0dXJuPSRpbXBsZUV2ZW50LmNhbGxiYWNrc1tmaWx0ZXJdKCRyZXR1cm4pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gYXBwbHkgZmlsdGVyXCIgK2ZpbHRlciArXCI6IE1pc3NpbmcgZmlsdGVyIG1ldGhvZFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQkaW1wbGVFdmVudC5kaXNwYXRjaFJldHVybnModGhpcywkcmV0dXJuKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sZmFsc2UpO1xuXHRcdH07XG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vVXNlciBhY2Nlc3NvcnM6IFVzZXIgbW9zdGx5IHVzZXIgdGhlc2UgbWV0aG9kIHRvIGludGVyYWN0aW9uIHdpdGggYXBwbGljYXRpb24gXG5cdCRpbXBsZUV2ZW50LmFkZD1mdW5jdGlvbihhLGIpe1xuXG5cdFx0XHRpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKXtcblx0XHRcdFx0Ly9pdHMgb2JqZWN0IHBhdHRlcj17bmFtZTpjYWxsYWJja31cblx0XHRcdFx0Zm9yICggdmFyIGtleXMgaW4gYSl7XG5cdFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFba2V5c10pID09PSAnW29iamVjdCBGdW5jdGlvbl0nKXtcblx0XHRcdFx0XHRcdHRoaXMuY2FsbGJhY2tzW2tleXNdPWFba2V5c107XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiUGxlYXNlIHByb3ZpZGUgdmFsaWQgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIDpcIiArIGtleXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2UgaWYoKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpKXtcblx0XHRcdFx0Ly9wYXRlcm4gKG5hbWUsIG1ldGhvZClcdFxuXHRcdFx0XHR0aGlzLmNhbGxiYWNrc1thXT1iO1xuXG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gYWRkKFwiK2ErXCIsIFwiK2IrXCIpIDogU3VwcGx5IG1ldGhvZCBuYW1lIGFuZCBjYWxsYmFja1wiKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCRpbXBsZUV2ZW50LnVwZGF0ZT1mdW5jdGlvbihlbCl7IHRoaXMubGF1bmNoKGVsKX07XG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCRpbXBsZUV2ZW50LmNvbmZpZz1mdW5jdGlvbihhLGIpe1xuXHRcdC8vaWYge30gaXMgcGFzc2VkXG5cdFx0aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSAnW29iamVjdCBPYmplY3RdJyl7XG5cdFx0XHRcdC8vaXRzIG9iamVjdCBwYXR0ZXI9e25hbWU6Y2FsbGFiY2t9XG5cdFx0XHRcdGZvciAodmFyIGtleXMgaW4gYSl7XG5cdFx0XHRcdFx0aWYodGhpcy5pbml0Lmhhc093blByb3BlcnR5KGtleXMpKXtcblx0XHRcdFx0XHRcdHRoaXMuaW5pdFtrZXlzXT1hW2tleXNdO1xuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlVudmFsaWQgQ29uZmlnIFByb3BlcnR5IDpcIiArIGtleXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2V7XG5cblx0XHRcdFx0aWYodGhpcy5pbml0Lmhhc093blByb3BlcnR5KGEpKXtcblx0XHRcdFx0XHRcdHRoaXMuaW5pdFthXT1iO1xuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlVudmFsaWQgQ29uZmlnIFByb3BlcnR5IDpcIiArIGtleXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdH0gXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0JGltcGxlRXZlbnQubGF1bmNoPWZ1bmN0aW9uKGVsKXtcblx0XHQvL2ZpbmQgdGhlIGVsZW1lbnRzIHdpdGggZXZlbnQgYXR0cmlidXRlIGFuZCBhdHRhY2ggYSBoYW5kbGVyIGFuZCBsaXN0ZW5lclxuXHRcdFx0dmFyIGVsZW1lbnQ9ZWwgfHwgdGhpcy5pbml0LiRyb290O1xuXHRcdFx0dmFyIGVsZW1lbnRzPWVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2V2ZW50XScpO1xuXHRcdFx0IGZvcih2YXIgaT0wOyBpPGVsZW1lbnRzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFxuXHRcdFx0XHR2YXIgZXZlbnRMaXN0PWVsZW1lbnRzW2ldLmdldEF0dHJpYnV0ZSgnZXZlbnQnKS50cmltKCkuc3BsaXQoL1xccysvKTtcblx0XHRcdFx0aWYoZXZlbnRMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdFx0dGhpcy5ldmVudFBhdGNoZXIoZWxlbWVudHNbaV0sZXZlbnRMaXN0KTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHR9XG5cdH07XG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vcHJvY2Vzc29yc1xuXHQkaW1wbGVFdmVudC5ldmVudFBhdGNoZXI9ZXZlbnRQYXRjaGVyO1xuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQkaW1wbGVFdmVudC5kaXNwYXRjaFJldHVybnM9RGlzcGF0Y2guZGlzcGF0Y2hSZXR1cm5zO1xuXHQkaW1wbGVFdmVudC5kaXNwYXRjaGVyPURpc3BhdGNoLmRpc3BhdGNoZXI7XG5cdCRpbXBsZUV2ZW50LmRpc3BhdGNoU2luZ2xlPURpc3BhdGNoLmRpc3BhdGNoU2luZ2xlO1xuXHQkaW1wbGVFdmVudC5kaXNwYXRjaEFycmF5PURpc3BhdGNoLmRpc3BhdGNoQXJyYXk7XG5cdCRpbXBsZUV2ZW50LmRhdGFGZWVkVmFsdWU9RGlzcGF0Y2guZGF0YUZlZWRWYWx1ZTtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0JGltcGxlRXZlbnQucmVuZGVyPXJlbmRlcjtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0aWYod2luZG93LiRpbXBsZUV2ZW50KXtcblx0XHRpZih3aW5kb3cuJGltcGxlRXZlbnQudG9TdHJpbmcoKT09PVwiT2JqZWN0ICRpbXBsZUV2ZW50XCIpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRHVwbGljYXRlICRpbXBsZUV2ZW50IGxpYmFyYXkgRm91bmQhIE1ha2Ugc3VyZSB5b3UgYXJlIG5vdCBpbXBvcnRpbmcgJGltcGxlRXZlbnQgbW9yZSB0aGFuIG9uZSB0aW1lLiBcIik7XG5cdFx0fWVsc2V7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiJGltcGxlRXZlbnQgbmFtZSBpcyBhbHJlYWR5IHVzZWQsIFBsZWFzZSBEb250IGFzc2lnbiAnJGltcGxlRXZlbnQnIHRvIGFueSB2YXJpYmFsZSwgZnVuY3Rpb24gb3Igb2JqZWN0cy4gUGxlYXNlIGZyZWUgJyAkaW1wbGVFdmVudCcgbmFtZXNwYWNlIGZyb20gZ2xvYmFsIHNjb3BlLlwiKTtcblx0XHR9XG5cdH1lbHNle1xuXHRcdHdpbmRvdy4kaW1wbGVFdmVudD0kaW1wbGVFdmVudDtcblx0fVxuXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmVudFBhdGNoZXIoZWwsZXZlbnRMaXN0KXtcblx0Ly9ldmVudCBsaXN0IGlzIHRoZSBsc2l0IG9mIGV2ZW50cyBsaWtlIFtjbGlja19zb21lZnVuYyxkYmxfc29tZU90aGVyZnVuY11cblx0XHRmb3IodmFyIGk9MDsgaTxldmVudExpc3QubGVuZ3RoO2krKyl7XG5cdFx0XHRcdHZhciBkYXRhPWV2ZW50TGlzdFtpXS5zcGxpdCgkaW1wbGVFdmVudC5pbml0LiRzZXBlcmF0b3IpO1xuXHRcdFx0XHQvL2NoZWNrIGV2ZW50IGRhdGEgaGFzIGF0bGVhc3QgZXZlbnRuYW1lIGFuZCBjYWxsYmFja1xuXHRcdFx0XHRpZihkYXRhLmxlbmd0aDwyKXtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJJbnN1ZmZpY2llbnQgQWdydW1lbnRzOiBNdXN0IHByb3ZpZGVkIGF0bGVhc3QgZXZlbnRuYW1lIGFuZCBjYWxsYmFjayBuYW1lIG9yIGV2ZW50IGF0dHJpYnV0ZSBmb3JtYXQgaXMgbm90IHVuZGVyc3Rvb2Q6dXNlZCBzZXBlcmF0b3IgaXMgXCIrJGltcGxlRXZlbnQuaW5pdC4kc2VwZXJhdG9yKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9oYW5kbGUgc2V0IGludGVydmFsIFxuXHRcdFx0XHRpZihkYXRhWzBdLm1hdGNoKC90aW1lb3V0fGludGVydmFsLykpe1xuXHRcdFx0XHRcdGlmKGRhdGFbMF09PVwiaW50ZXJ2YWxcIil7XG5cdFx0XHRcdFx0XHRpZighaXNGaW5pdGUoZGF0YVsyXSkpe1xuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwicGxlYXNlIFByb3ZpZGUgVGltZSBpbiBtczsgZm9yIGludGVydmFsIGV2ZW50XCIpO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmKCRpbXBsZUV2ZW50LmNvcmUuaGFzT3duUHJvcGVydHkoZGF0YVsxXSkpe1xuXHRcdFx0XHRcdFx0XHRcdHZhciBpbnRlcnZhbD1zZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly9hZGRpbmcgY3VycmVudCBldmVudCB0byBhcmdzIHNvIHRoYXQgY2FsbGJhY2sgY2FuIGFjZXNzIGl0LlxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGFyZ3M9ZGF0YS5zbGljZSgzKTtcblx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MudW5zaGlmdChpbnRlcnZhbCk7XG5cdFx0XHRcdFx0XHRcdFx0XHQgLy9jYXB1dHVyZSBhbnkgcmV0dXJuIGZyb20gY2FsbGJhY2sgdG8gZmVlZCByZXR1cm4gZmVlZGVyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCRyZXR1cm49JGltcGxlRXZlbnQuY29yZVtkYXRhWzFdXS5hcHBseShlbCxhcmdzKTsvL2dpdmUgY2FsbGJhY2sgdGhpcyBzY29wZSBvZiBhZGRFdmVudExpc3RlbmVyIGkuZSB0YXJnZXQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKCRyZXR1cm4pe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9pZiBhbnkgcmV0dXJuIGhhbmRsZSBpdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZpbHRlcicpKXtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgZmlsdGVyPWVsLmdldEF0dHJpYnV0ZSgnZGF0YS1maWx0ZXInKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKCRpbXBsZUV2ZW50LmNvcmUuaGFzT3duUHJvcGVydHkoZmlsdGVyKSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCRyZXR1cm49JGltcGxlRXZlbnQuY29yZVtmaWx0ZXJdKCRyZXR1cm4pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9ZWxzZSBpZigkaW1wbGVFdmVudC5jYWxsYmFja3MuaGFzT3duUHJvcGVydHkoZmlsdGVyKSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCRyZXR1cm49JGltcGxlRXZlbnQuY2FsbGJhY2tzW2ZpbHRlcl0oJHJldHVybik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBhcHBseSBmaWx0ZXJcIiArZmlsdGVyICtcIjogTWlzc2luZyBmaWx0ZXIgbWV0aG9kXCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JGltcGxlRXZlbnQuZGlzcGF0Y2hSZXR1cm5zKGVsLCRyZXR1cm4pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly99XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cdFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0sIGRhdGFbMl0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0fWVsc2UgaWYoJGltcGxlRXZlbnQuY2FsbGJhY2tzLmhhc093blByb3BlcnR5KGRhdGFbMV0pKXtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBpbnRlcnZhbD1zZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly9hZGRpbmcgY3VycmVudCBldmVudCB0byBhcmdzIHNvIHRoYXQgY2FsbGJhY2sgY2FuIGFjZXNzIGl0LlxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGFyZ3M9ZGF0YS5zbGljZSgzKTtcblx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MudW5zaGlmdChpbnRlcnZhbCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdCAvL2NhcHV0dXJlIGFueSByZXR1cm4gZnJvbSBjYWxsYmFjayB0byBmZWVkIHJldHVybiBmZWVkZXJcblx0XHRcdFx0XHRcdFx0XHRcdFx0IHZhciAkcmV0dXJuPSRpbXBsZUV2ZW50LmNhbGxiYWNrc1tkYXRhWzFdXS5hcHBseShlbCxhcmdzKTsvL2dpdmUgY2FsbGJhY2sgdGhpcyBzY29wZSBvZiBhZGRFdmVudExpc3RlbmVyIGkuZSB0YXJnZXQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKCRyZXR1cm4pe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9pZiBhbnkgcmV0dXJuIGhhbmRsZSBpdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZihlbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtZmlsdGVyJykpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGZpbHRlcj1lbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsdGVyJyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZigkaW1wbGVFdmVudC5jb3JlLmhhc093blByb3BlcnR5KGZpbHRlcikpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkcmV0dXJuPSRpbXBsZUV2ZW50LmNvcmVbZmlsdGVyXSgkcmV0dXJuKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fWVsc2UgaWYoJGltcGxlRXZlbnQuY2FsbGJhY2tzLmhhc093blByb3BlcnR5KGZpbHRlcikpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkcmV0dXJuPSRpbXBsZUV2ZW50LmNhbGxiYWNrc1tmaWx0ZXJdKCRyZXR1cm4pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gYXBwbHkgZmlsdGVyXCIgK2ZpbHRlciArXCI6IE1pc3NpbmcgZmlsdGVyIG1ldGhvZFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkaW1wbGVFdmVudC5kaXNwYXRjaFJldHVybnMoZWwsJHJldHVybik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHRcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9LCBkYXRhWzJdKTtcblx0XHRcdFx0XHRcdFx0XHRcdFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly9jYXNlIDM6IG5vIGNhbGxiYWNrIGlzIGRlZmluZVxuXHRcdFx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkNhbid0IEZvdW5kIE1ldGhvZDpcIithK1wiICxQbGVhc2UgUmVnaXN0ZXIgZXZlbnQgaGFuZGxlciB1c2luZyAnJGltcGxlRXZlbnQuYWRkKCknIG1ldGhvZD9cIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0XHRcdFx0XHR9XHRcblxuXG5cblx0XHRcdFx0XHR9ZWxzZSBpZihkYXRhWzBdPT1cInRpbWVvdXRcIil7XG5cdFx0XHRcdFx0XHRpZighaXNGaW5pdGUoZGF0YVsyXSkpe1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcInBsZWFzZSBQcm92aWRlIFRpbWUgaW4gbXM7IGZvciB0aW1lb3V0IGV2ZW50XCIpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmKCRpbXBsZUV2ZW50LmNvcmUuaGFzT3duUHJvcGVydHkoZGF0YVsxXSkpe1xuXHRcdFx0XHRcdFx0XHR2YXIgdGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly9hZGRpbmcgY3VycmVudCBldmVudCB0byBhcmdzIHNvIHRoYXQgY2FsbGJhY2sgY2FuIGFjZXNzIGl0LlxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGFyZ3M9ZGF0YS5zbGljZSgzKTtcblx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MudW5zaGlmdCh0aW1lcik7XG5cdFx0XHRcdFx0XHRcdFx0XHQgLy9jYXB1dHVyZSBhbnkgcmV0dXJuIGZyb20gY2FsbGJhY2sgdG8gZmVlZCByZXR1cm4gZmVlZGVyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCRyZXR1cm49JGltcGxlRXZlbnQuY29yZVtkYXRhWzFdXS5hcHBseShlbCxhcmdzKTsvL2dpdmUgY2FsbGJhY2sgdGhpcyBzY29wZSBvZiBhZGRFdmVudExpc3RlbmVyIGkuZSB0YXJnZXQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKCRyZXR1cm4pe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9pZiBhbnkgcmV0dXJuIGhhbmRsZSBpdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZpbHRlcicpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBmaWx0ZXI9ZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWZpbHRlcicpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYoJGltcGxlRXZlbnQuY29yZS5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JHJldHVybj0kaW1wbGVFdmVudC5jb3JlW2ZpbHRlcl0oJHJldHVybik7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmKCRpbXBsZUV2ZW50LmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JHJldHVybj0kaW1wbGVFdmVudC5jYWxsYmFja3NbZmlsdGVyXSgkcmV0dXJuKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGFwcGx5IGZpbHRlclwiICtmaWx0ZXIgK1wiOiBNaXNzaW5nIGZpbHRlciBtZXRob2RcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JGltcGxlRXZlbnQuZGlzcGF0Y2hSZXR1cm5zKGVsLCRyZXR1cm4pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVx0XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSwgZGF0YVsyXSk7XG5cdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdH1lbHNlIGlmKCRpbXBsZUV2ZW50LmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShkYXRhWzFdKSl7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHRpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0XHRcdC8vYWRkaW5nIGN1cnJlbnQgZXZlbnQgdG8gYXJncyBzbyB0aGF0IGNhbGxiYWNrIGNhbiBhY2VzcyBpdC5cblx0XHRcdFx0XHRcdFx0XHRcdHZhciBhcmdzPWRhdGEuc2xpY2UoMyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRhcmdzLnVuc2hpZnQodGltZXIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0IC8vY2FwdXR1cmUgYW55IHJldHVybiBmcm9tIGNhbGxiYWNrIHRvIGZlZWQgcmV0dXJuIGZlZWRlclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQkcmV0dXJuPSRpbXBsZUV2ZW50LmNhbGxiYWNrc1tkYXRhWzFdXS5hcHBseShlbCxhcmdzKTsvL2dpdmUgY2FsbGJhY2sgdGhpcyBzY29wZSBvZiBhZGRFdmVudExpc3RlbmVyIGkuZSB0YXJnZXQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKCRyZXR1cm4pe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9pZiBhbnkgcmV0dXJuIGhhbmRsZSBpdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZpbHRlcicpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBmaWx0ZXI9ZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWZpbHRlcicpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYoJGltcGxlRXZlbnQuY29yZS5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JHJldHVybj0kaW1wbGVFdmVudC5jb3JlW2ZpbHRlcl0oJHJldHVybik7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmKCRpbXBsZUV2ZW50LmNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JHJldHVybj0kaW1wbGVFdmVudC5jYWxsYmFja3NbZmlsdGVyXSgkcmV0dXJuKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGFwcGx5IGZpbHRlclwiICtmaWx0ZXIgK1wiOiBNaXNzaW5nIGZpbHRlciBtZXRob2RcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkaW1wbGVFdmVudC5kaXNwYXRjaFJldHVybnMoZWwsJHJldHVybik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHRcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9LCBkYXRhWzJdKTtcblx0XHRcdFx0XHRcdFx0XHRcblxuXHRcdFx0XHRcdFx0XHQvL2Nhc2UgMzogbm8gY2FsbGJhY2sgaXMgZGVmaW5lXG5cdFx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBGb3VuZCBNZXRob2Q6XCIrYStcIiAsUGxlYXNlIFJlZ2lzdGVyIGV2ZW50IGhhbmRsZXIgdXNpbmcgJyRpbXBsZUV2ZW50LmFkZCgpJyBtZXRob2Q/XCIpO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHRcdFx0XHR9XHRcblxuXHRcdFx0XHRcdH0vL1xuXG5cdFx0XHRcdH0vL1xuXHRcdFx0XHQvKlxuXHRcdFx0XHQgZWwtPmN1cnJlbnQgZWxlbWVudFxuXHRcdFx0XHQgZGF0YT0+ZXZlbnQgZGF0YXMgd2hpY2ggY29udGFpbiBldmVudG5hbWUsIGNhbGxiYWNrbmFtZSxvcHRpb25hbCBhcmd1bWVudHNcblx0XHRcdFx0IGRhdGEuc2xpY2UoMiktPnJldHVybnMgbmV3IGFycmF5IHdpdGhvdXQgZXZlbnRuYW1lIGFuZCBtZXRob2RuYW1lLCBvbmx5IGhhcyBhcmdzXG5cdFx0XHRcdCBkYXRhWzBdLT5ldmVudG5hbWVcblx0XHRcdFx0IGRhdGFbMV0tPm1ldGhvZG5hbWVcblx0XHRcdFx0IHJlc3QgZGF0YSBbY29udGVudHNdIGFyZSBhcmd1bWVudHNcblx0XHRcdFx0Ki9cblx0XHRcdFx0aWYoJGltcGxlRXZlbnQuY29yZS5oYXNPd25Qcm9wZXJ0eShkYXRhWzFdKSl7XG5cdFx0XHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKGVsLGRhdGFbMF0sJGltcGxlRXZlbnQuY29yZVtkYXRhWzFdXSxkYXRhKTtcblx0XHRcdFx0Ly9jYXNlIDI6IGNoZWNrIGluIGNhbGxiYWNrcyBsaWJyYXJ5ICxcblx0XHRcdFx0fWVsc2UgaWYoJGltcGxlRXZlbnQuY2FsbGJhY2tzLmhhc093blByb3BlcnR5KGRhdGFbMV0pKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZWwsZGF0YVswXSwkaW1wbGVFdmVudC5jYWxsYmFja3NbZGF0YVsxXV0sZGF0YSk7XG5cblx0XHRcdFx0Ly9jYXNlIDM6IG5vIGNhbGxiYWNrIGlzIGRlZmluZVxuXHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiQ2FuJ3QgRm91bmQgTWV0aG9kOlwiK2RhdGFbMV0rXCIgLFBsZWFzZSBSZWdpc3RlciBldmVudCBoYW5kbGVyIHVzaW5nICckaW1wbGVFdmVudC5hZGQoKScgbWV0aG9kP1wiKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVx0XHRcdCBcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFxuXHRcdH1cblx0fTtcblx0IiwiZXhwb3J0ICBmdW5jdGlvbiBkaXNwYXRjaFJldHVybnMoZWwsJHJldHVybil7XG5cdC8vSWYgcmV0dXJuIGlzIHN0cmluZy9udW1iZXIvaHRtbFxuXHRpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoJHJldHVybikgPT09ICdbb2JqZWN0IFN0cmluZ10nIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCgkcmV0dXJuKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScpe1xuXHRcdC8vc3RyaW5nIG9yIG51bWJlclxuXHRcdFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCRpbXBsZUV2ZW50LmluaXQuJGNsYXNzTmFtZSksZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKGUuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkKSl7IHJldHVybiBmYWxzZX07XG5cdCBcdFx0XHRcdGlmKGUuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFBcHBlbmQpKXtcblx0XHRcdFx0XHRcdGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJHJldHVybikpO1xuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0ZS5pbm5lckhUTUw9JHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pOy8vXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcblxuXHR9ZWxzZSBpZigkcmV0dXJuLm5vZGVOYW1lKXtcblx0XHQvL3RoaXMgaXMgaHRtbCBlbGVtZW50XG5cdFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCRpbXBsZUV2ZW50LmluaXQuJGNsYXNzTmFtZSksZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKGUuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkKSl7IHJldHVybiBmYWxzZX07XG5cdCBcdFx0XHRcdGlmKGUuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFBcHBlbmQpKXtcblx0XHRcdFx0XHRcdGUuYXBwZW5kQ2hpbGQoJHJldHVybik7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRlLmlubmVySFRNTD1cIlwiO1xuXHRcdFx0XHRcdFx0ZS5hcHBlbmRDaGlsZCgkcmV0dXJuKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7Ly9cblx0XHRcdHJldHVybiB0cnVlO1xuXHQvL0luY2FzZSByZXR1cm4gaXMgb2JqZWN0XG5cdH1lbHNlIGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCgkcmV0dXJuKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpe1xuXHRcdC8vY2FzZSBvbmUgR2xvYmFsIHNjb3BlOyBtdXN0IGhhdmUgZ2xvYmFsIGFzIGEgb2JqZWN0XG5cdFx0aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRyZXR1cm4uZ2xvYmFsKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpe1xuXHRcdFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCgkaW1wbGVFdmVudC5pbml0LiRnbG9iYWwucXVlcnlTZWxlY3RvckFsbCgkaW1wbGVFdmVudC5pbml0LiRjbGFzc05hbWUpLGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHQkaW1wbGVFdmVudC5kaXNwYXRjaGVyKGUsJHJldHVybi5nbG9iYWwpO1xuXG5cblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdFx0Ly9jYXNlIHR3bzogZ3JhbmRwYXJlbnQgc2NvcGVcblx0XHRpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoJHJldHVybi5ncmFuZFBhcmVudCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKXtcblx0XHRcdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucGFyZW50Tm9kZS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJGltcGxlRXZlbnQuaW5pdC4kY2xhc3NOYW1lKSxmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYoIWUuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkKSl7XG5cdFx0XHRcdFx0JGltcGxlRXZlbnQuZGlzcGF0Y2hlcihlLCRyZXR1cm4uZ3JhbmRQYXJlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdH1lbHNlIGlmKCRyZXR1cm4uZ3JhbmRQYXJlbnQpe1xuXHRcdFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5wYXJlbnROb2RlLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgkaW1wbGVFdmVudC5pbml0LiRjbGFzc05hbWUpLGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZighZS5oYXNBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUZlZWQpKXtcblx0XHRcdFx0XHQkaW1wbGVFdmVudC5kaXNwYXRjaFNpbmdsZShlLCRyZXR1cm4uZ3JhbmRQYXJlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvL2NhZSB0aHJlZTogcGFyZW50IHNjb3BlXG5cdFx0aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRyZXR1cm4ucGFyZW50KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpe1xuXHRcdFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJGltcGxlRXZlbnQuaW5pdC4kY2xhc3NOYW1lKSxmdW5jdGlvbihlKXtcblx0XHRcdFx0JGltcGxlRXZlbnQuZGlzcGF0Y2hlcihlLCRyZXR1cm4ucGFyZW50KTtcblx0XHRcdH0pO1xuXG5cdFx0fWVsc2UgaWYoJHJldHVybi5wYXJlbnQpe1xuXHRcdFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJGltcGxlRXZlbnQuaW5pdC4kY2xhc3NOYW1lKSxmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYoIWUuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkKSl7XG5cdFx0XHRcdFx0JGltcGxlRXZlbnQuZGlzcGF0Y2hTaW5nbGUoZSwkcmV0dXJuLnBhcmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vY2FzZSBmb3VyOnNlbGZcblx0XHRcdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgkaW1wbGVFdmVudC5pbml0LiRjbGFzc05hbWUpLGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdCRpbXBsZUV2ZW50LmRpc3BhdGNoZXIoZSwkcmV0dXJuKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZigkcmV0dXJuLnNlbGYpe1xuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJGltcGxlRXZlbnQuaW5pdC4kY2xhc3NOYW1lKSxmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRpZighZS5oYXNBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUZlZWQpKXtcblx0XHRcdFx0XHRcdCRpbXBsZUV2ZW50LmRpc3BhdGNoU2luZ2xlKGUsJHJldHVybi5zZWxmKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9XG5cdFx0Ly9jYXNlIGZpdmU6cmV0dXJuVE9cblx0XHRpZigkcmV0dXJuLnJldHVyblRvICYmICRyZXR1cm4ucmV0dXJuVG9bJGltcGxlRXZlbnQuaW5pdC4kcmV0dXJuVG9dKXtcblxuXHRcdFx0Ly9pZigkcmV0dXJuLnJldHVyblRvWyRpbXBsZUV2ZW50LmluaXQuJHJldHVyblRvXS5oYXNBdHRyaWJ1dGUoJ3JldHVybicpKXtcblx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRyZXR1cm4ucmV0dXJuVG8uZGF0YSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoJHJldHVybi5yZXR1cm5Ub1skaW1wbGVFdmVudC5pbml0LiRyZXR1cm5Ub10ucXVlcnlTZWxlY3RvckFsbCgkaW1wbGVFdmVudC5pbml0LiRjbGFzc05hbWUpLGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdFx0XHQkaW1wbGVFdmVudC5kaXNwYXRjaGVyKGUsJHJldHVybi5yZXR1cm5Uby5kYXRhKTtcblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0fWVsc2UgaWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRyZXR1cm4ucmV0dXJuVG8uZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5XScpe1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hSZXR1cm5zKCRyZXR1cm4ucmV0dXJuVG9bJGltcGxlRXZlbnQuaW5pdC4kcmV0dXJuVG9dLCRyZXR1cm4ucmV0dXJuVG8uZGF0YSk7XG5cblx0XHRcdFx0XHR9ZWxzZSBpZigkcmV0dXJuLnJldHVyblRvLmRhdGEpe1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKCRyZXR1cm4ucmV0dXJuVG9bJGltcGxlRXZlbnQuaW5pdC4kcmV0dXJuVG9dLnF1ZXJ5U2VsZWN0b3JBbGwoJGltcGxlRXZlbnQuaW5pdC4kY2xhc3NOYW1lKSxmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdFx0JGltcGxlRXZlbnQuZGlzcGF0Y2hTaW5nbGUoZSwkcmV0dXJuLnJldHVyblRvLmRhdGEpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdH1lbHNle1xuXG5cdFx0fVxuXHRcdFxuXHRcblx0Ly9JbmNhc2UgcmV0dXJuIGlzIEFycmF5XHRcblx0fWVsc2UgaWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRyZXR1cm4pID09PSAnW29iamVjdCBBcnJheV0nKXtcblx0XHRpZihlbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtY29tcG9uZW50Jykpe1xuXHRcdFx0aWYoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbXBvbmVudCcpKXtcblx0XHRcdHZhciBjb21wb25lbnQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tcG9uZW50JykpO1xuXHRcdFx0aWYoY29tcG9uZW50Lm5vZGVOYW1lKXtcblx0XHRcdFx0dmFyIG9iaj17fTtcblx0XHRcdFx0b2JqLnRhZ05hbWU9Y29tcG9uZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdG9iai5hdHRyaWJ1dGVzPXt9O1xuXHRcdFx0XHRcdGZvcih2YXIgaj0wO2o8Y29tcG9uZW50LmF0dHJpYnV0ZXMubGVuZ3RoO2orKyl7Y29tcG9uZW50LmF0dHJpYnV0ZXMubGVuZ3RoXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKGopO1xuXHRcdFx0XHRcdFx0b2JqLmF0dHJpYnV0ZXNbY29tcG9uZW50LmF0dHJpYnV0ZXNbal0ubmFtZV09Y29tcG9uZW50LmF0dHJpYnV0ZXNbal0udmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdCRpbXBsZUV2ZW50LnJlbmRlci50byhlbCxjb21wb25lbnQsJHJldHVybixvYmopO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdH1lbHNlIGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCgkcmV0dXJuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyl7XG5cblx0fWVsc2V7XG5cdFx0Y29uc29sZS5sb2coJHJldHVybiArXCIgdHlwZSBvZiBjYW5ub3QgYmUgcmV0dXJuZWRcIik7XG5cdH1cblx0XG5cblxufTtcbmV4cG9ydCB2YXIgZGlzcGF0Y2hlcj1mdW5jdGlvbihlbCwkcmV0dXJuICl7XG5cdC8vaWYoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCRzaW1wbGVFdmVudC5pbml0LiRjbGFzc05hbWUucmVwbGFjZShcIi5cIixcIlwiKSkpe1xuXHRcdC8vaWYgaXQgaGFzIGRhdGEtZ2VldFxuXG5cdFx0aWYoZWwuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkKSl7XG5cdFx0XHR2YXIga2V5PWVsLmdldEF0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhRmVlZCkudHJpbSgpO1xuXHRcdFx0aWYoa2V5KXtcblx0XHRcdFx0dmFyIHZhbHVlPSRpbXBsZUV2ZW50LmRhdGFGZWVkVmFsdWUoa2V5LCAkcmV0dXJuKTtcblxuXHRcdFx0XHRpZih2YWx1ZSl7XG5cdFx0XHRcdFx0Ly9pZiB2YWx1ZSBpcyBzdHJpbmcgb3IgbnVtYmVyIFxuXHRcdFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFN0cmluZ10nIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nKXtcblx0XHRcdFx0XHRcdFx0aWYoZWwuaGFzQXR0cmlidXRlKCRpbXBsZUV2ZW50LmluaXQuJGRhdGFBcHBlbmQpKXtcblx0XHRcdFx0XHRcdFx0ZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpKTtcblx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRlbC5pbm5lckhUTUw9dmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly9pZiB2YWx1ZSBpcyBodG1sXHRcblx0XHRcdFx0XHR9ZWxzZSBpZih2YWx1ZS5ub2RlTmFtZSl7XG5cdFx0XHRcdFx0XHRpZihlbC5oYXNBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUFwcGVuZCkpe1xuXHRcdFx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZCh2YWx1ZSk7XG5cblx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyh2YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdGVsLmlubmVySFRNTD1cIlwiO1xuXHRcdFx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJPbmx5IFN0cmluZyAsIE51bWJlciBhbmQgSHRtbCBFbGVtZW50ICBjYW4gYmUgZW1iZWRlZDsgQ2Fubm90IGVtYmVkIFwiICsgJHJldHVybltrZXldICsgXCJpbiA6XCIrIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkrIFwiIEh0bWwgRWxlbWVudFwiKTtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGVsKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiTWFrZSBzdXJlIHlvdSBoYXZlIDpcIiArICRpbXBsZUV2ZW50LmluaXQuJGRhdGFGZWVkICsgXCIgYXR0cmlidXRlIHRvIGhhbmRsZSBnaXZlbiByZXR1cm5cIiArICRyZXR1cm4gKVxuXHRcdFx0fVxuXG5cdH1cbn1cbmV4cG9ydCB2YXIgZGlzcGF0Y2hTaW5nbGU9ZnVuY3Rpb24oZWwsICRyZXR1cm4pe1xuXG5cdGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCgkcmV0dXJuKSA9PT0gJ1tvYmplY3QgU3RyaW5nXScgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRyZXR1cm4pID09PSAnW29iamVjdCBOdW1iZXJdJyl7XG5cblx0XHRcdGlmKGVsLmhhc0F0dHJpYnV0ZSgkaW1wbGVFdmVudC5pbml0LiRkYXRhQXBwZW5kKSl7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgkcmV0dXJuKSk7XG5cdFx0fWVsc2V7XG5cdFx0XHRlbC5pbm5lckhUTUw9JHJldHVybjtcblx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcblx0fWVsc2UgaWYoJHJldHVybi5ub2RlTmFtZSl7XG5cdFx0XHRpZihlbC5oYXNBdHRyaWJ1dGUoJGltcGxlRXZlbnQuaW5pdC4kZGF0YUFwcGVuZCkpe1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoJHJldHVybik7XG5cdFx0fWVsc2V7XG5cdFx0XHRlbC5pbm5lckhUTUw9XCJcIjtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCRyZXR1cm4pO1xuXHRcdFx0JGltcGxlRXZlbnQudXBkYXRlKGVsKTtcblx0XHR9XG5cdH1lbHNle1xuXHRcdGNvbnNvbGUubG9nKCdVbmFiZWwgdG8gaGFuZGxlIHRoaXMgdHlwZSBvZiBEYXRhOicrICRyZXR1cm4pO1xuXHR9XG59O1xuZXhwb3J0IHZhciBkaXNwYXRjaEFycmF5PWZ1bmN0aW9uKGVsLCRhcnJheSl7XG5cbn07XG5leHBvcnQgdmFyIGRhdGFGZWVkVmFsdWU9ZnVuY3Rpb24oa2V5LCRyZXR1cm4pe1xuXHQvL2NoZWNrIGZvciBkZWZhdWx0IHZhbHVlO1xuXG5cdHZhciBmZWVkPWtleS5zcGxpdCgnLicpO1xuXHRcblx0XHRpZihmZWVkLmxlbmd0aCl7XG5cdFx0XHRpZihmZWVkLmxlbmd0aD09MSl7XG5cdFx0XHRcdHJldHVybiAkcmV0dXJuW2tleV07XG5cdFx0XHR9ZWxzZSBpZihmZWVkLmxlbmd0aD4xKXtcblx0XHRcdFx0dmFyIHJlc3VsdD0kcmV0dXJuO1xuXHRcdFx0XHRmb3IodmFyIGo9MDsgajxmZWVkLmxlbmd0aDsgaisrKXtcblx0XHRcdFx0XHRpZihyZXN1bHRbZmVlZFtqXV0pe1xuXHRcdFx0XHRcdFx0cmVzdWx0PXJlc3VsdFtmZWVkW2pdXTtcblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJDYW5ub3QgZmluZDpcIiArIGtleSArIFwiaW5cIiArJHJldHVybik7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhyZXN1bHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdFx0XHR9XG5cdFx0fVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=