!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);let i={$useArrow:!0,$useVar:!0,$seperatorArrow:/([a-z]+)[\s]*[=][>][\s]*([\w-\.]+)([(][^)]*[)])?/,$seperatorArrowGlobal:new RegExp(/([a-z]+)[\s]*[=][>][\s]*([\w-\.]+)([(][^)]*[)])?/,"g"),$reserveEventArgument:!0,$seperator:/[:]/g,$className:".return",$dataFeed:"data-feed",$dataGet:"data-get",$dataComponent:"data-component",$dataFilter:"data-filter",$dataValidate:"data-validate",$dataSet:"data-set",$dataStore:"data-store",$dataAppend:"data-append",$returnTo:"el",$root:document,$global:document};var r={id:0,list:{},cloneElement:function(e){return this.obj2Html(this.html2Obj(e,{},1))},html2Obj:function(e,t,n){if(t[n]={},3==e.nodeType)e.nodeValue.trim()&&(t[n].isText=!0,t[n].text=e.nodeValue);else if(8==e.nodeType);else{t[n].tagName=e.nodeName.toLowerCase(),t[n].attributes={};for(var i=0;i<e.attributes.length;i++)e.attributes.length,t[n].attributes[e.attributes[i].name]=e.attributes[i].value;if(e.hasChildNodes){t[n].hasChild=!0,t[n].childCount=e.childNodes.length;for(var r=0;r<t[n].childCount;r++)e.childNodes[r]&&this.html2Obj(e.childNodes[r],t[n],r+1)}}return t},obj2Html:function(e,t){if(t){for(var n=1;n<=e.childCount;n++)if(e[n].isText){var i=document.createTextNode(e[n].text);t.appendChild(i)}else if(e[n].tagName){(i=$impleEvent.createElement(e[n].tagName,e[n].attributes)).id&&(i.id=i.id+n),t.appendChild(i),this.obj2Html(e[n],i)}}else(t=$impleEvent.createElement(e[1].tagName,e[1].attributes)).id&&(t.id=t.id+1),this.obj2Html(e[1],t);return t},to:function(e,t,n){e.hasAttribute("render-id")||(this.id=this.id+1,e.setAttribute("render-id",this.id),this.list[this.id]={obj:this.html2Obj(t,{},1)});var i=e.getAttribute("render-id"),r=this.list[i].obj;this.obj2Html(r,!1);Array.prototype.forEach.call(n,function(t){var n=$impleEvent.render.obj2Html(r,!1);e.appendChild(n),$impleEvent.manageReturns(n,t),$impleEvent.update(n)})}};var l={close:function(e,t,n){var i="parent"==t?this.parentNode:document.getElementById(t);if(i){if("none"==i.style.display)return!1;if("true"===n){var r=confirm("Are you sure want to close?");return $impleEvent.core.animate.call(this,e,"bounce"),!!r&&(i.style.display="none")}i.style.display="none"}else console.warn("close error:-Cannot Find Element with id:"+t)},log:function(e,t){console.log(t)},logEvent:function(e){console.log(e.type,"\n",e)},logFunc:function(e,t,n,i,r,a,o){t=t.trim(),$impleEvent.callbacks.hasOwnProperty(t)?console.log($impleEvent.callbacks[t](e,n,i,r,a,o)):l.hasOwnProperty(t)&&console.log(l[t](e,n,i,r,a,o))},animate:function(e,t,n){var i=n?document.getElementById(n):this;i.setAttribute("class",i.hasAttribute("class")?i.getAttribute("class")+" "+t+" animated":" "+t+" animated");var r=setTimeout(function(){i.setAttribute("class",i.getAttribute("class").replace(t,"").replace("animated","").trim()),clearTimeout(r)},1e3)},dataChanger:function(e,t,n){if(this.hasAttribute($impleEvent.init.$dataGet)){if(!$impleEvent.form){var i=$impleEvent.createElement("div",{style:"padding:5px;border:1px solid #ccc;background:#ccc;border-radius:5px;postion:absolute;z-index:12345678998654;"}),r=$impleEvent.createElement("label",{style:"font-weight:bold;margin:0px 5px;background:#ccc"}),l=$impleEvent.createElement("input",{style:"outline:none; border:none;border-bottom:1px solid #eee;"});r.innerText=this.getAttribute($impleEvent.init.$dataGet),l.value=this.getAttribute("value"),i.appendChild(r),i.appendChild(l),i.style.position="absolute",i.style.zIndex=0x7048861b0fa4,i.style.top="100%",i.style.opacity="0.9",$impleEvent.form={form:i,label:r,input:l}}var a=this;$impleEvent.form.form.onclick=function(e){e.stopPropagation()},this.style.position="relative",$impleEvent.form.label.innerText=this.getAttribute($impleEvent.init.$dataGet),$impleEvent.form.input.value=this.getAttribute("value"),this.appendChild($impleEvent.form.form),$impleEvent.form.input.onchange=function(){a.setAttribute("value",this.value),$impleEvent.manageReturns(a,this.value)}}},carousel:function(e,t,n){var i=this.getElementsByTagName("img");this.hasAttribute("index")||this.setAttribute("index",0);for(var r=parseInt(this.getAttribute("index")),l=0;l<i.length;l++)i[l].style.display="none";++r>i.length&&(r=1),i[r-1].style.display="block",this.setAttribute("index",r)},addClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.add(t)},removeClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.remove(t)},toggleClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.toggle(t)},rotate:function(e,t,n,i){this.style.transition="all 0.35s";var r=l.refactorArgs(arguments,1);if("[object Object]"==Object.prototype.toString.call(r))Array.prototype.forEach.call(l.scopify(this,r.scope,r.classname),function(e){e.style.transition="all 0.35s",e.style.transform="rotate( "+r.args[0]+")"});else{if(!r){var a=Math.round(90*Math.random(1))+"deg";return this.style.transform="rotate( "+a+")",a}this.style.transform="rotate( "+r[0]+")"}},verticalSlideChnage:function(){},scale:function(e,t,n,i){this.style.transition="all 0.35s",2==arguments.length&&isFinite(t)?this.style.transform="scale( "+t+")":3==arguments.length&&isFinite(t)&&isFinite(n)?this.style.transform="scale( "+t+","+n+")":4==arguments.length&&isFinite(t)&&isFinite(n)&&document.getElementById(i)?(document.getElementById(i).style.transition="all 0.35s",document.getElementById(i).style.transform="scale( "+t+","+n+")"):console.warn("Something Wrong with arguments you provided, unable to scale on "+e.type)},css:function(e,t,n,i){this.style.transition="all 0.35s",3==arguments.length?this.style[t]=n:(arguments.length=document.getElementById(i))?(document.getElementById(i).style.transition="all 0.35s",document.getElementById(i).style[t]=n):console.warn("Something Wrong with arguments you provided, unable to appy style/css on "+e.type)},return:function(e,t,n){return isFinite(e)&&(t=n),t?t.replace(/\/s/g," ").trim():(console.warn("Returning empty string  on "+e.type)," ")},returnTo:function(e,t,n,i){return isFinite(e)&&(t=n,n=i,e={type:"interval/timeout"}),n&&document.getElementById(t)?(n=n.replace(/\/s/g," ").trim(),{returnTo:{el:document.getElementById(t),data:{self:n}}}):(console.warn("Returning empty string  on "+e.type)," ")},resize:function(e,t,n){var i;if("fullscreen"==t&&n&&(i=document.getElementById(n)))return i.setAttribute("data-resize",i.style.width+":"+i.style.height),i.style.width=window.innerWidth+"px",i.style.height=window.innerHeight+"px",i.style.position="fixed",i.style.top="0",!1;if("initial"==t&&n&&(i=document.getElementById(n)))return i.hasAttribute("data-resize"),i.style.width="initial",i.style.height="initial",i.style.position="initial",i.style.top="initial",!1;var r=parseInt(this.style.width),l=parseInt(this.style.height),a=parseInt(t),o=parseInt(n);a&&o?(this.style.width=r-r*a/100+"px",this.style.height=l-l*o/100+"px"):a&&(this.style.width=r-r*a/100+"px",this.style.height=l-l*a/100+"px")},timeout:function(e,t,n){if(!isFinite(n))return console.log("please Provide Time in ms; for timeout function"),!1;if($impleEvent.core.hasOwnProperty(t))var i=setTimeout($impleEvent.core[t].bind(this),n);else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;i=setTimeout($impleEvent.callbacks[t].bind(this,[e,i]),n)}},interval:function(e,t,n){if(!isFinite(n))return console.log("please Provide Time in ms; for interval function"),!1;if($impleEvent.core.hasOwnProperty(t)){console.log("wow");var i=setInterval($impleEvent.core[t].bind(this,[e,i]),n)}else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;i=setInterval($impleEvent.callbacks[t].bind(this,[e,i]),n)}},hide:function(e,t){"parent"==t?(this.parentNode.style.transition="all 0.35s",this.parentNode.style.display="none"):"prev"==t?(this.previousElementSibling.style.transition="all 0.35s",this.previousElementSibling.style.display="none"):"next"==t&&(this.nextElementSibling.style.transition="all 0.35s",this.nextElementSibling.style.display="none")},show:function(e,t){"parent"==t?(this.parentNode.style.transition="all 0.35s",this.parentNode.style.display="initial"):"prev"==t?(this.previousElementSibling.style.transition="all 0.35s",this.previousElementSibling.style.display="initial"):"next"==t&&(this.nextElementSibling.style.transition="all 0.35s",this.nextElementSibling.style.display="initial")},toggle:function(e,t,n,i){"prev"==t?"none"!=this.previousElementSibling.style.display?(this.previousElementSibling.style.transition="all 0.35s",this.previousElementSibling.style.display="none",i&&(this.innerText=i)):(this.previousElementSibling.style.transition="all 0.35s",this.previousElementSibling.style.display="initial",n&&(this.innerText=n)):"next"==t?"none"!=this.nextElementSibling.style.display?(this.nextElementSibling.style.transition="all 0.35s",this.nextElementSibling.style.display="none",i&&(this.innerText=i)):(this.nextElementSibling.style.transition="all 0.35s",this.nextElementSibling.style.display="initial",n&&(this.innerText=n)):document.getElementById(t)?"none"!=document.getElementById(t).style.display?(document.getElementById(t).style.transition="all 0.35s",document.getElementById(t).style.display="none",i&&(this.innerText=i)):(document.getElementById(t).style.transition="all 0.35s",document.getElementById(t).style.display="initial",n&&(this.innerText=n)):console.warn("Something Wrong with arguments you provided, unable to appy style/css on "+e.type)}};const o={callbacks:{},inCallbacks:{}};o.core=l,o.init=i,o.vars={},o.reset=function(e,t){let n=e.parentNode;n.nodeType&&(!0===t?n.querySelectorAll(this.init.$className+"["+this.init.$dataFeed+"]").forEach(e=>{e.innerHTML=""}):n.querySelectorAll(this.init.$className).forEach(e=>{e.innerHTML=""}))},o.toString=function(){return"Object $impleEvent"},o.method=function(e){var t=e.split(/\./);return 2===t.length?this.inCallbacks.hasOwnProperty(t[0])?this.inCallbacks[t[0]].hasOwnProperty(t[1])?this.inCallbacks[t[0]][t[1]]:(console.error("Can't Found Method:"+t[1]+"in "+t[0]+"Object : ref->"+e+" ,Please Register event handler using '$impleEvent.addIn("+t[0]+", ....)' method?"),!1):(console.error("Can't Found Object:'"+t[0]+"' in '"+e+"' ,For '.' notation, use  '$impleEvent.addIn()' method?"),!1):this.core.hasOwnProperty(e)?this.core[e]:this.callbacks.hasOwnProperty(e)?this.callbacks[e]:(console.error("Can't Found Method:"+e+" ,Please Register event handler using '$impleEvent.add()' method?"),!1)},o.addIn=function(e,t,n){let i=null;if(i=this.inCallbacks.hasOwnProperty(e)?this.inCallbacks[e]:this.inCallbacks[e]={},"[object Object]"===Object.prototype.toString.call(t))for(var r in t)"[object Function]"===Object.prototype.toString.call(t[r])?i[r]=t[r]:console.error("Please provide valid callback function for :"+r);else"[object String]"===Object.prototype.toString.call(t)&&"[object Function]"===Object.prototype.toString.call(n)?i[t]=n:console.error("Invalid argument supplied to add("+t+", "+n+") : Supply method name and callback");return this.initiate||(this.launch(),this.initiate=!0),this},o.asHTML=function(e){var t=this.createElement("div");return t.innerHTML=e,this.render.cloneElement(t).firstElementChild},o.html=function(e){return this.asHTML(e)},o.createElement=function(e,t){var n=document.createElement(e);for(var i in t)"text"==i?n.innerText=t[i]:n.setAttribute(i,t[i]);return n},o.getData=function(e,t){var n={},i=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(i){let a=null;if(e.value||""===e.value?a=e.value:e.hasAttribute("value")&&(a=e.getAttribute("value")),(""===a||a)&&e.hasAttribute($impleEvent.init.$dataFilter)){var r=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(r)?a=$impleEvent.core[r].call(e,a):$impleEvent.callbacks.hasOwnProperty(r)?a=$impleEvent.callbacks[r].call(e,a):console.error("Unable to apply filter"+r+": Missing filter method"),!a)return console.error("Error in "+$impleEvent.init.$dataFilter+": Must return value with valid data type; check return from '"+r+"' method"),!1}if(1==t)return[i,a];if(e.getAttribute($impleEvent.init.$dataValidate)){var l=e.getAttribute($impleEvent.init.$dataValidate);$impleEvent.callbacks.hasOwnProperty(l)?$impleEvent.callbacks[l].call(e,i,a)||(n.hasError=!0):console.log("Error in "+$impleEvent.init.$dataValidate+" unable to find callback :"+l)}n[i]=a}return e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),function(e){var t=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(t){let a=null;if(e.value||""===e.value?a=e.value:e.hasAttribute("value")&&(a=e.getAttribute("value")),(""===a||a)&&e.hasAttribute($impleEvent.init.$dataFilter)){var i=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(i)?a=$impleEvent.core[i].call(e,a):$impleEvent.callbacks.hasOwnProperty(i)?a=$impleEvent.callbacks[i].call(e,a):console.error("Unable to apply filter"+i+": Missing filter method"),!a)return console.error("Error in "+$impleEvent.init.$dataFilter+" : Must return value with valid data type; check return from '"+i+"' method"),!1}if(e.getAttribute($impleEvent.init.$dataValidate)){var r=e.getAttribute($impleEvent.init.$dataValidate);if($impleEvent.callbacks.hasOwnProperty(r)){var l=$impleEvent.callbacks[r].call(e,t,a);Array.isArray(l)&&(n.validate=[]),!1===l&&(n.hasError=!0)}else console.error("Error in "+$impleEvent.init.$dataValidate+" unable to find callback :"+r)}n[t]=a}}),n},o.setData=function(e,t){let n=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);t.hasOwnProperty(n)&&(e.hasAttribute("value")?e.setAttribute("value",t[n]):e.value=t[n]),e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),function(e){let n=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);t.hasOwnProperty(n)&&(e.value||""===e.value?e.value=t[n]:e.hasAttribute("value")&&e.setAttribute("value",t[n]))})},o.dataStore=function(e,t){let n={};if(e&&e.nodeName)if(e.hasAttribute($impleEvent.init.$dataStore)){let t=e.getAttribute($impleEvent.init.$dataStore).trim();try{n=JSON.parse(t)}catch(e){return console.error("Please Provide Valid JSON data: Provided "+t),null}}else t&&(n=t);else console.error("Please Provide  HTML element as an arguments");return{store:n,get:function(){return this.store},set:function(){e.setAttribute($impleEvent.init.$dataStore,JSON.stringify(this.store))}}},o.validate=function(e,t,n){let i=e.getAttribute(o.init.$dataValidate);if(o.callbacks[i])return o.callbacks[i](e,t,n)},o.initiate=null,o.add=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)"[object Function]"===Object.prototype.toString.call(e[n])?this.callbacks[n]=e[n]:console.error("Please provide valid callback function for :"+n);else"[object String]"===Object.prototype.toString.call(e)&&"[object Function]"===Object.prototype.toString.call(t)?this.callbacks[e]=t:console.error("Invalid argument supplied to add("+e+", "+t+") : Supply method name and callback");return this},o.register=function(e,t){return this.add(e,t)},o.$add=function(){if("[object Object]"===Object.prototype.toString.call(a))for(var e in a)this.vars[e]=a[key];else"[object String]"===Object.prototype.toString.call(a)?this.vars[a]=b:console.error("Invalid argument supplied to add("+a+", "+b+") : Supply vaild arguments");return this},o.addVar=function(e,t){return this.$add(e,t)},o.update=function(e){this.launch(e)},o.config=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)this.init.hasOwnProperty(n)?this.init[n]=e[n]:console.error("Unvalid Config Property :"+n);else this.init.hasOwnProperty(e)?this.init[e]=t:console.error("Unvalid Config Property :"+e);return this},o.launch=function(e){var t=e||this.init.$root;if(t!=document&&t.getAttribute("event")){let e=t.getAttribute("event");if(e.trim())if(!0===this.init.$useArrow){let n=e.replace(o.init.$seperatorArrowGlobal,"");n.replace(/,/g,"").trim()&&(console.error("Invalid syntax defination:'"+n,t),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(t,e.match(this.init.$seperatorArrowGlobal))}else this.eventManager(t,e.split(/\s+/))}for(var n=t.querySelectorAll("[event]"),i=0;i<n.length;i++){let e=n[i].getAttribute("event");if(e.trim())if(!0===this.init.$useArrow){let t=e.replace(o.init.$seperatorArrowGlobal,"");t.replace(/,/g,"").trim()&&(console.error("Invalid syntax defination:'"+t,n[i]),console.warn(" Must provided atleast eventname and callback  in arrow function format 'event=>callback(,arg1,ar2)' seperated by ',' for multiple entry")),this.eventManager(n[i],e.match(this.init.$seperatorArrowGlobal))}else this.eventManager(n[i],e.split(/\s+/))}},o.eventManager=function(e,t){for(var n=0;n<t.length;n++){if(!t[n].trim())return!1;!function(){let[i,r,l]=[null,[],null];if(!0===$impleEvent.init.$useArrow){if(!$impleEvent.init.$seperatorArrow.test(t[n]))return console.warn("Insufficient Agruments:'NaN"+$impleEvent.init.$seperatorArrow),!1;if([,i,l,r]=$impleEvent.init.$seperatorArrow.exec(t[n]),r?(r=r.replace(/[()]/g,"").split(/[,]/),!0===$impleEvent.init.$reserveEventArgument&&r.shift()):r=[],!i||!l)return console.warn("Insufficient Agruments:'NaN"+$impleEvent.init.$seperatorArrow),!1}else{if(data=t[n].split($impleEvent.init.$seperator),data.length<2)return console.warn("Insufficient Agruments: Must provided atleast eventname and callback  or event attribute format is not understood:used seperator is "+$impleEvent.init.$seperator),!1;i=data[0],l=data[1],r=data.slice(2)}if("call"!=i)if(i.match(/timeout|interval/)){if(!isFinite(r[0]))return console.error("please Provide Time in ms; for interval/timeout event"),!1;{let t=r[0];if("interval"==i)var a=setInterval(function(){$impleEvent.callbackHandler(e,l,r,a)},t);else var o=setTimeout(function(){$impleEvent.callbackHandler(e,l,r,o)},t)}}else e.addEventListener(i,function t(n){n.removeEventListener=function(){e.removeEventListener(this.type,t)},$impleEvent.callbackHandler(e,l,r,n)},!1);else window.addEventListener("load",function(t){$impleEvent.callbackHandler(e,l,r,t)})}()}},o.callbackHandler=function(e,t,n,i){var r=t.split(/\./);if(2===r.length){if(!$impleEvent.inCallbacks.hasOwnProperty(r[0]))return console.error("Can't Found Object:'"+r[0]+"' in '"+t+"' ,For '.' notation, use  '$impleEvent.addIn()' method?"),!1;if(!$impleEvent.inCallbacks[r[0]].hasOwnProperty(r[1]))return console.error("Can't Found Method:"+r[1]+"in "+r[0]+"Object : ref->"+t+" ,Please Register event handler using '$impleEvent.addIn("+r[0]+", ....)' method?"),!1;t=$impleEvent.inCallbacks[r[0]][r[1]]}else if($impleEvent.core.hasOwnProperty(t))t=$impleEvent.core[t];else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;t=$impleEvent.callbacks[t]}let l=function(e,t){return t&&(t=t.map(function(t){if(/^[\d]+[\.]?[\d]*$/.test(t))return parseFloat(t);if(/^true$/.test(t))return!0;if(/^false$/.test(t))return!1;if(t.match(/^\$+[a-zA-Z0-9-]+/)){let i=t.replace(/^\$+/,"");if(2==t.match(/^\$+/)[0].length?i&&(e=e.parentNode):3==t.match(/^\$+/)[0].length&&(e=e.parentNode.parentNode),-1!=i.search(/\./)){let t=i.split(/\./);if(e.getAttribute(t[0])&&"value"==t[1])return e.getAttribute(t[0])}else{if(e.hasAttribute(i)){var n={};return n.get=function(){return e.getAttribute(i)},n.set=function(t){e.setAttribute(i,t),this.value=t},n.value=e.getAttribute(i),n}if(e.getAttribute($impleEvent.init.$dataGet)===i)return e.value?e.value:e.getAttribute("value");if(e.getAttribute("name")===i)return e.value?e.value:e.getAttribute("value");if("value"===i)return e.value}}return t.replace(/(^["'])|['"]$/g,"")})),t}(e,n);l.unshift(i);var a=t.apply(e,l);if(a){if(e.getAttribute($impleEvent.init.$dataFilter)){var o=e.getAttribute($impleEvent.init.$dataFilter);if($impleEvent.core.hasOwnProperty(o)?a=$impleEvent.core[o].call(e,a):$impleEvent.callbacks.hasOwnProperty(o)?a=$impleEvent.callbacks[o].call(e,a):console.error("Unable to apply filter"+o+": Missing filter method"),!a)return console.error("Error in "+$impleEvent.init.$dataFilter+" Must return value with valid data type; check return from '"+o+"' method"),!1}$impleEvent.manageReturns(e.parentNode,a)}if(e.hasAttribute($impleEvent.init.$dataSet)){var s=$impleEvent.getData(e,!0);Array.isArray(s)&&Array.prototype.forEach.call(document.querySelectorAll(e.getAttribute($impleEvent.init.$dataSet)),function(e){e.setAttribute($impleEvent.init.$dataGet,s[0]),e.setAttribute("value",s[1])})}},o.manageReturns=function(e,t){if("string"==typeof t||"number"==typeof t||t.nodeName)return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;if(t.nodeName){let n=$impleEvent.render.cloneElement(t);e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(n):(e.innerHTML="",e.appendChild(n)),$impleEvent.update(n)}else e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):(e.innerHTML="",e.appendChild(document.createTextNode(t)))}),!0;if("[object Object]"===Object.prototype.toString.call(t)&&(t.hasOwnProperty("global")&&t.global&&$impleEvent.manageReturns($impleEvent.init.$global,t.global),t.hasOwnProperty("grandParent")&&t.grandParent&&$impleEvent.manageReturns(e.parentNode.parentNode,t.grandParent),t.hasOwnProperty("parent")&&t.parent&&$impleEvent.manageReturns(e.parentNode,t.parent),t.hasOwnProperty("self")&&t.self&&$impleEvent.manageReturns(e,t.self),Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed)){var n=e.getAttribute($impleEvent.init.$dataFeed).trim();if(n){var i=null,r=n.split(".");if(!t.hasOwnProperty(r[0]))return!1;if(r.length)if(1==r.length)i=t[n];else if(r.length>1){for(var l=t,a=0;a<r.length;a++){if(!l[r[a]]){console.error("Cannot find:"+n+" in  the return "+JSON.stringify(t));break}l=l[r[a]]}i=l}if(i)if("string"==typeof i||"number"==typeof i||i.nodeName)if(i.nodeName){let t=$impleEvent.render.cloneElement(i);e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t)),$impleEvent.update(t)}else e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(i)):(e.innerHTML="",e.appendChild(document.createTextNode(i)));else console.error("Only String , Number and Html Element  can be embeded; Cannot embed "+i+"for "+n+"in : "+e.nodeName.toLowerCase()+" Html Element"),console.log(e)}else console.warn("Make sure you have :"+$impleEvent.init.$dataFeed+" attribute to handle given return"+t)}}),t.hasOwnProperty("returnTo")&&t.returnTo&&(t.returnTo[$impleEvent.init.$returnTo]&&t.returnTo[$impleEvent.init.$returnTo].nodeName?$impleEvent.manageReturns(t.returnTo[$impleEvent.init.$returnTo],t.returnTo.data):console.error("returnTo, Element not found:Please give returnTo."+$impleEvent.init.$returnTo+" a valid html element"))),"[object Array]"===Object.prototype.toString.call(t))if(e.querySelector("["+$impleEvent.init.$dataComponent+"]")){let r=e.querySelector("["+$impleEvent.init.$dataComponent+"]"),l=document.querySelector(r.getAttribute($impleEvent.init.$dataComponent));if(l&&l.nodeName){r.hasAttribute($impleEvent.init.$dataAppend)||(r.innerHTML="");for(var n=0;n<t.length;n++){var i=$impleEvent.render.cloneElement(l);if(r.appendChild(i),i.childElementCount)$impleEvent.manageReturns(i,t[n]);else if("string"==typeof t[n]||"number"==typeof t[n]||t[n].nodeName){if(i.hasAttribute($impleEvent.init.$dataFeed))return!1;t[n].nodeName?i.hasAttribute($impleEvent.init.$dataAppend)?i.appendChild($impleEvent.render.cloneElement(t[n])):(i.innerHTML="",i.appendChild($impleEvent.render.cloneElement(t[n]))):i.hasAttribute($impleEvent.init.$dataAppend)?i.appendChild(document.createTextNode(t[n])):(i.innerHTML="",i.appendChild(document.createTextNode(t[n])))}$impleEvent.update(i)}}else console.error("Unable to find Element for Templating from querySelector:"+r.getAttribute($impleEvent.init.$dataComponent))}else console.error("Array returns need ["+$impleEvent.init.$dataComponent+"] holder: No such holder found ")},o.render=r,window.$impleEvent?"Object $impleEvent"===window.$impleEvent.toString()?console.warn("Duplicate $impleEvent libaray Found! Make sure you are not importing $impleEvent more than one time. "):console.error("$impleEvent name is already used, Please Dont assign '$impleEvent' to any varibale, function or objects. Please free ' $impleEvent' namespace from global scope."):window.$impleEvent=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,