!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var i={$seperator:/[-|_]/g,$className:".return",$dataFeed:"data-feed",$dataGet:"data-get",$dataAppend:"data-append",$notification:null,$returnTo:"el",$root:document,$global:document},r={id:0,list:{},cloneElement:function(e){return this.obj2Html(this.html2Obj(e,{},1))},html2Text:function(e,t){},html2Obj:function(e,t,n){if(t[n]={},3==e.nodeType)e.nodeValue.trim()&&(t[n].isText=!0,t[n].text=e.nodeValue);else{t[n].tagName=e.nodeName.toLowerCase(),t[n].attributes={};for(var i=0;i<e.attributes.length;i++)e.attributes.length,t[n].attributes[e.attributes[i].name]=e.attributes[i].value;if(e.hasChildNodes){t[n].hasChild=!0,t[n].childCount=e.childNodes.length;for(var r=0;r<t[n].childCount;r++)e.childNodes[r]&&this.html2Obj(e.childNodes[r],t[n],r+1)}}return t},obj2Html:function(e,t){if(t){for(var n=1;n<=e.childCount;n++)if(e[n].isText){var i=document.createTextNode(e[n].text);t.appendChild(i)}else if(e[n].tagName){(i=$impleEvent.createElement(e[n].tagName,e[n].attributes)).id&&(i.id=i.id+n),t.appendChild(i),this.obj2Html(e[n],i)}}else(t=$impleEvent.createElement(e[1].tagName,e[1].attributes)).id&&(t.id=t.id+1),this.obj2Html(e[1],t);return t},to:function(e,t,n){e.hasAttribute("render-id")||(this.id=this.id+1,e.setAttribute("render-id",this.id),this.list[this.id]={obj:this.html2Obj(t,{},1)});var i=e.getAttribute("render-id"),r=this.list[i].obj;this.obj2Html(r,!1);Array.prototype.forEach.call(n,function(t){var n=$impleEvent.render.obj2Html(r,!1);e.appendChild(n),$impleEvent.dispatchReturns(n,t),$impleEvent.update(n)})}};const l={callbacks:{},core:{}};l.init=i,l.toString=function(){return"Object $impleEvent"},l.createElement=function(e,t){var n=document.createElement(e);for(var i in t)"text"==i?n.innerText=t[i]:n.setAttribute(i,t[i]);return n},l.getData=function(e){var t={};return Array.prototype.forEach.call(e.querySelectorAll("["+l.init.$dataGet+"], [name]"),function(e){e.hasAttribute("name")?e.getAttribute("name")&&(e.hasAttribute("data-validate")&&!1===l.validate(e,e.getAttribute("name"),e.value)?t.hasError=!0:t[e.getAttribute("name")]=e.value):e.getAttribute(l.init.$dataGet)&&(e.value||""==e.value?t[e.getAttribute(l.init.$dataGet)]=e.value:e.hasAttribute("value")&&(t[e.getAttribute(l.init.$dataGet)]=e.getAttribute("value")))}),t},l.validate=function(e,t,n){var i=e.getAttribute("data-validate");if(l.callbacks[i])return l.callbacks[i](e,t,n)},l.addEventListener=function(e,t,n,i){e.addEventListener(t,function(t){var r=i.slice(2);r.unshift(t);var a=n.apply(this,r);if(a){if(e.hasAttribute("data-filter")){var o=e.getAttribute("data-filter");l.core.hasOwnProperty(o)?a=l.core[o](a):l.callbacks.hasOwnProperty(o)?a=l.callbacks[o](a):console.error("Unable to apply filter"+o+": Missing filter method")}l.dispatchReturns(this,a)}},!1)},l.add=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)"[object Function]"===Object.prototype.toString.call(e[n])?this.callbacks[n]=e[n]:console.error("Please provide valid callback function for :"+n);else"[object String]"===Object.prototype.toString.call(e)&&"[object Function]"===Object.prototype.toString.call(t)?this.callbacks[e]=t:console.error("Invalid argument supplied to add("+e+", "+t+") : Supply method name and callback");return this},l.update=function(e){this.launch(e)},l.config=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)this.init.hasOwnProperty(n)?this.init[n]=e[n]:console.error("Unvalid Config Property :"+n);else this.init.hasOwnProperty(e)?this.init[e]=t:console.error("Unvalid Config Property :"+e);return this},l.launch=function(e){for(var t=(e||this.init.$root).querySelectorAll("[event]"),n=0;n<t.length;n++){var i=t[n].getAttribute("event").trim().split(/\s+/);if(!i.length)return!1;this.eventPatcher(t[n],i)}},l.eventPatcher=function(e,t){for(var n=0;n<t.length;n++){var i=t[n].split($impleEvent.init.$seperator);if(i.length<2)return console.warn("Insufficient Agruments: Must provided atleast eventname and callback name or event attribute format is not understood:used seperator is "+$impleEvent.init.$seperator),!1;if(i[0].match(/timeout|interval/))if("interval"==i[0]){if(!isFinite(i[2]))return console.log("please Provide Time in ms; for interval event"),!1;if($impleEvent.core.hasOwnProperty(i[1]))var r=setInterval(function(){var t=i.slice(3);t.unshift(r);var n=$impleEvent.core[i[1]].apply(e,t);if(n){if(e.hasAttribute("data-filter")){var a=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(a)?n=$impleEvent.core[a](n):$impleEvent.callbacks.hasOwnProperty(a)?n=$impleEvent.callbacks[a](n):console.error("Unable to apply filter"+a+": Missing filter method")}$impleEvent.dispatchReturns(e,n)}},i[2]);else{if(!$impleEvent.callbacks.hasOwnProperty(i[1]))return console.error("Can't Found Method:"+a+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;r=setInterval(function(){var t=i.slice(3);t.unshift(r);var n=$impleEvent.callbacks[i[1]].apply(e,t);if(n){if(e.hasAttribute("data-filter")){var a=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(a)?n=$impleEvent.core[a](n):$impleEvent.callbacks.hasOwnProperty(a)?n=$impleEvent.callbacks[a](n):console.error("Unable to apply filter"+a+": Missing filter method")}$impleEvent.dispatchReturns(e,n)}},i[2])}}else if("timeout"==i[0]){if(!isFinite(i[2]))return console.log("please Provide Time in ms; for timeout event"),!1;if($impleEvent.core.hasOwnProperty(i[1]))var l=setTimeout(function(){var t=i.slice(3);t.unshift(l);var n=$impleEvent.core[i[1]].apply(e,t);if(n){if(e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(r)?n=$impleEvent.core[r](n):$impleEvent.callbacks.hasOwnProperty(r)?n=$impleEvent.callbacks[r](n):console.error("Unable to apply filter"+r+": Missing filter method")}$impleEvent.dispatchReturns(e,n)}},i[2]);else{if(!$impleEvent.callbacks.hasOwnProperty(i[1]))return console.error("Can't Found Method:"+a+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;l=setTimeout(function(){var t=i.slice(3);t.unshift(l);var n=$impleEvent.callbacks[i[1]].apply(e,t);if(n){if(e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");$impleEvent.core.hasOwnProperty(r)?n=$impleEvent.core[r](n):$impleEvent.callbacks.hasOwnProperty(r)?n=$impleEvent.callbacks[r](n):console.error("Unable to apply filter"+r+": Missing filter method")}$impleEvent.dispatchReturns(e,n)}},i[2])}}if($impleEvent.core.hasOwnProperty(i[1]))this.addEventListener(e,i[0],$impleEvent.core[i[1]],i);else{if(!$impleEvent.callbacks.hasOwnProperty(i[1]))return console.error("Can't Found Method:"+i[1]+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;this.addEventListener(e,i[0],$impleEvent.callbacks[i[1]],i)}}},l.dispatchReturns=function(e,t){if("string"==typeof t||"number"==typeof t||t.nodeName)return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;t.nodeName?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild($impleEvent.render.cloneElement(t)):(e.innerHTML="",e.appendChild($impleEvent.render.cloneElement(t))):e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):(e.innerHTML="",e.appendChild(document.createTextNode(t)))}),!0;if("[object Object]"===Object.prototype.toString.call(t))$impleEvent.dispatchObject(e,t);else if("[object Array]"===Object.prototype.toString.call(t)&&e.hasAttribute("data-component")&&e.getAttribute("data-component")){var n=document.querySelector(e.getAttribute("data-component"));if(n.nodeName){e.hasAttribute($impleEvent.init.$dataAppend)||(e.innerHTML="");for(var i=0;i<t.length;i++){var r=$impleEvent.render.cloneElement(n);e.appendChild(r),r.childElementCount?$impleEvent.dispatchReturns(r,t[i]):$impleEvent.dispatchSelf(r,t[i])}$impleEvent.update(e)}}},l.dispatcher=function(e,t){if(e.hasAttribute($impleEvent.init.$dataFeed)){var n=e.getAttribute($impleEvent.init.$dataFeed).trim();if(n){var i=$impleEvent.dataFeedValue(n,t);i&&("string"==typeof i||"number"==typeof i||i.nodeName?i.nodeName?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild($impleEvent.render.cloneElement(i)):(e.innerHTML="",e.appendChild($impleEvent.render.cloneElement(i))):e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(i)):(e.innerHTML="",e.appendChild(document.createTextNode(i))):(console.error("Only String , Number and Html Element  can be embeded; Cannot embed "+i+"for "+n+"in : "+e.nodeName.toLowerCase()+" Html Element"),console.log(e)))}else console.warn("Make sure you have :"+$impleEvent.init.$dataFeed+" attribute to handle given return"+t)}},l.dispatchSingle=function(e,t){"[object String]"===Object.prototype.toString.call(t)||"[object Number]"===Object.prototype.toString.call(t)?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):e.innerHTML=t:t.nodeName?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(t):(e.innerHTML="",e.appendChild(t),$impleEvent.update(e)):console.log("Unabel to handle this type of Data:"+t)},l.dispatchSelf=function(e,t){if("string"==typeof t||"number"==typeof t||t.nodeName){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;t.nodeName?e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild($impleEvent.render.cloneElement(t)):(e.innerHTML="",e.appendChild($impleEvent.render.cloneElement(t))):e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):(e.innerHTML="",e.appendChild(document.createTextNode(t)))}},l.dataFeedValue=function(e,t){var n=e.split(".");if(!t.hasOwnProperty(n[0]))return!1;if(n.length){if(1==n.length)return t[e];if(n.length>1){for(var i=t,r=0;r<n.length;r++){if(!i[n[r]]){console.log(t),console.log("Cannot find:"+e+" in "+t);break}i=i[n[r]]}return i}}},l.dispatchObject=function(e,t){t.hasOwnProperty("global")&&t.global&&$impleEvent.dispatchReturns($impleEvent.init.$global,t.global),t.hasOwnProperty("grandParent")&&t.grandParent&&$impleEvent.dispatchReturns(e.parentNode.parentNode,t.grandParent),t.hasOwnProperty("parent")&&t.parent&&$impleEvent.dispatchReturns(e.parentNode,t.parent),t.hasOwnProperty("self")&&t.self&&$impleEvent.dispatchReturns(e,t.self),Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){$impleEvent.dispatcher(e,t)}),t.hasOwnProperty("returnTo")&&t.returnTo&&(t.returnTo[$impleEvent.init.$returnTo]&&t.returnTo[$impleEvent.init.$returnTo].nodeName?$impleEvent.dispatchReturns(t.returnTo[$impleEvent.init.$returnTo],t.returnTo.data):console.error("returnTo, Element not found:Please give returnTo."+$impleEvent.init.$returnTo+" a valid html element"))},l.render=r,window.$impleEvent?"Object $impleEvent"===window.$impleEvent.toString()?console.warn("Duplicate $impleEvent libaray Found! Make sure you are not importing $impleEvent more than one time. "):console.error("$impleEvent name is already used, Please Dont assign '$impleEvent' to any varibale, function or objects. Please free ' $impleEvent' namespace from global scope."):window.$impleEvent=l}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,