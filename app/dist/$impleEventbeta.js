!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var i={$seperator:/[-|_]/g,$className:".return",$dataFeed:"data-feed",$dataGet:"data-get",$dataComponent:"data-component",$dataSet:"data-set",$dataAppend:"data-append",$dataError:"data-error",$dataMessage:"data-message",$dataNotification:"data-notification",$notification:null,$returnTo:"el",$root:document,$global:document},r={id:0,list:{},cloneElement:function(e){return this.obj2Html(this.html2Obj(e,{},1))},html2ObjInnerHtml:function(){},html2Obj:function(e,t,n){if(t[n]={},3==e.nodeType)e.nodeValue.trim()&&(t[n].isText=!0,t[n].text=e.nodeValue);else if(8==e.nodeType);else{t[n].tagName=e.nodeName.toLowerCase(),t[n].attributes={};for(var i=0;i<e.attributes.length;i++)e.attributes.length,t[n].attributes[e.attributes[i].name]=e.attributes[i].value;if(e.hasChildNodes){t[n].hasChild=!0,t[n].childCount=e.childNodes.length;for(var r=0;r<t[n].childCount;r++)e.childNodes[r]&&this.html2Obj(e.childNodes[r],t[n],r+1)}}return t},obj2Html:function(e,t){if(t){for(var n=1;n<=e.childCount;n++)if(e[n].isText){var i=document.createTextNode(e[n].text);t.appendChild(i)}else if(e[n].tagName){(i=$impleEvent.createElement(e[n].tagName,e[n].attributes)).id&&(i.id=i.id+n),t.appendChild(i),this.obj2Html(e[n],i)}}else(t=$impleEvent.createElement(e[1].tagName,e[1].attributes)).id&&(t.id=t.id+1),this.obj2Html(e[1],t);return t},to:function(e,t,n){e.hasAttribute("render-id")||(this.id=this.id+1,e.setAttribute("render-id",this.id),this.list[this.id]={obj:this.html2Obj(t,{},1)});var i=e.getAttribute("render-id"),r=this.list[i].obj;this.obj2Html(r,!1);Array.prototype.forEach.call(n,function(t){var n=$impleEvent.render.obj2Html(r,!1);e.appendChild(n),$impleEvent.manageReturns(n,t),$impleEvent.update(n)})}};var a={close:function(e,t,n){var i="parent"==t?this.parentNode:document.getElementById(t);if(i){if("none"==i.style.display)return!1;if("true"===n){var r=confirm("Are you sure want to close?");return $impleEvent.core.animate.call(this,e,"bounce"),!!r&&(i.style.display="none")}i.style.display="none"}else console.warn("close error:-Cannot Find Element with id:"+t)},animate:function(e,t,n){var i=n?document.getElementById(n):this;i.setAttribute("class",i.hasAttribute("class")?i.getAttribute("class")+" "+t+" animated":" "+t+" animated");var r=setTimeout(function(){i.setAttribute("class",i.getAttribute("class").replace(t,"").replace("animated","").trim()),clearTimeout(r)},1e3)},dataChanger:function(e,t,n){if(this.hasAttribute("data-get")){if(!$impleEvent.form){var i=$impleEvent.createElement("div",{style:"padding:5px;border:1px solid #ccc;background:#ccc;border-radius:5px;postion:absolute;z-index:12345678998654;"}),r=$impleEvent.createElement("label",{style:"font-weight:bold;margin:0px 5px;background:#ccc"}),a=$impleEvent.createElement("input",{style:"outline:none; border:none;border-bottom:1px solid #eee;"});r.innerText=this.getAttribute("data-get"),a.value=this.getAttribute("value"),i.appendChild(r),i.appendChild(a),i.style.position="absolute",i.style.zIndex=0x7048861b0fa4,i.style.top="100%",i.style.opacity="0.9",$impleEvent.form={form:i,label:r,input:a}}var l=this;$impleEvent.form.form.onclick=function(e){e.stopPropagation()},this.style.position="relative",$impleEvent.form.label.innerText=this.getAttribute("data-get"),$impleEvent.form.input.value=this.getAttribute("value"),this.appendChild($impleEvent.form.form),$impleEvent.form.input.onchange=function(){l.setAttribute("value",this.value),$impleEvent.manageReturns(l,this.value)}}},carousel:function(e,t,n){var i=this.getElementsByTagName("img");this.hasAttribute("index")||this.setAttribute("index",0);for(var r=parseInt(this.getAttribute("index")),a=0;a<i.length;a++)i[a].style.display="none";++r>i.length&&(r=1),i[r-1].style.display="block",this.setAttribute("index",r)},addClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.add(t)},removeClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.remove(t)},toggleClass:function(e,t,n){var i=this;n&&document.getElementById(n)&&(i=document.getElementById(n)),i.classList.toggle(t)},rotate:function(e,t,n,i){this.style.transition="all 0.35s";var r=a.refactorArgs(arguments,1);if("[object Object]"==Object.prototype.toString.call(r))Array.prototype.forEach.call(a.scopify(this,r.scope,r.classname),function(e){e.style.transition="all 0.35s",e.style.transform="rotate( "+r.args[0]+")"});else{if(!r){var l=Math.round(90*Math.random(1))+"deg";return this.style.transform="rotate( "+l+")",l}this.style.transform="rotate( "+r[0]+")"}},verticalSlideChnage:function(){},scale:function(e,t,n,i){this.style.transition="all 0.35s",2==arguments.length&&isFinite(t)?this.style.transform="scale( "+t+")":3==arguments.length&&isFinite(t)&&isFinite(n)?this.style.transform="scale( "+t+","+n+")":4==arguments.length&&isFinite(t)&&isFinite(n)&&document.getElementById(i)?(document.getElementById(i).style.transition="all 0.35s",document.getElementById(i).style.transform="scale( "+t+","+n+")"):console.warn("Something Wrong with arguments you provided, unable to scale on "+e.type)},css:function(e,t,n,i){this.style.transition="all 0.35s",3==arguments.length?this.style[t]=n:(arguments.length=document.getElementById(i))?(document.getElementById(i).style.transition="all 0.35s",document.getElementById(i).style[t]=n):console.warn("Something Wrong with arguments you provided, unable to appy style/css on "+e.type)},return:function(e,t){return t?t.replace(/\/s/g," ").trim():(console.warn("Returning empty string  on "+e.type)," ")},returnTo:function(e,t,n){return n&&document.getElementById(t)?(n=n.replace(/\/s/g," ").trim(),{returnTo:{el:document.getElementById(t),data:{self:n}}}):(console.warn("Returning empty string  on "+e.type)," ")},resize:function(e,t,n){var i;if("fullscreen"==t&&n&&(i=document.getElementById(n)))return i.setAttribute("data-resize",i.style.width+":"+i.style.height),i.style.width=window.innerWidth+"px",i.style.height=window.innerHeight+"px",i.style.position="fixed",i.style.top="0",!1;if("initial"==t&&n&&(i=document.getElementById(n)))return i.hasAttribute("data-resize"),i.style.width="initial",i.style.height="initial",i.style.position="initial",i.style.top="initial",!1;var r=parseInt(this.style.width),a=parseInt(this.style.height),l=parseInt(t),o=parseInt(n);l&&o?(this.style.width=r-r*l/100+"px",this.style.height=a-a*o/100+"px"):l&&(this.style.width=r-r*l/100+"px",this.style.height=a-a*l/100+"px")},timeout:function(e,t,n){if(!isFinite(n))return console.log("please Provide Time in ms; for timeout function"),!1;if($impleEvent.core.hasOwnProperty(t))var i=setTimeout($impleEvent.core[t].bind(this),n);else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;i=setTimeout($impleEvent.callbacks[t].bind(this,[e,i]),n)}},interval:function(e,t,n){if(!isFinite(n))return console.log("please Provide Time in ms; for interval function"),!1;if($impleEvent.core.hasOwnProperty(t)){console.log("wow");var i=setInterval($impleEvent.core[t].bind(this,[e,i]),n)}else{if(!$impleEvent.callbacks.hasOwnProperty(t))return console.error("Can't Found Method:"+t+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;i=setInterval($impleEvent.callbacks[t].bind(this,[e,i]),n)}},hide:function(e,t){"parent"==t?(this.parentNode.style.transition="all 0.35s",this.parentNode.style.display="none"):"prev"==t?(this.previousElementSibling.style.transition="all 0.35s",this.previousElementSibling.style.display="none"):"next"==t&&(this.nextElementSibling.style.transition="all 0.35s",this.nextElementSibling.style.display="none")},show:function(e,t){"parent"==t?(this.parentNode.style.transition="all 0.35s",this.parentNode.style.display="initial"):"prev"==t?(this.previousElementSibling.style.transition="all 0.35s",this.previousElementSibling.style.display="initial"):"next"==t&&(this.nextElementSibling.style.transition="all 0.35s",this.nextElementSibling.style.display="initial")},toggle:function(e,t,n,i){"prev"==t?"none"!=this.previousElementSibling.style.display?(this.previousElementSibling.style.transition="all 0.35s",this.previousElementSibling.style.display="none",i&&(this.innerText=i)):(this.previousElementSibling.style.transition="all 0.35s",this.previousElementSibling.style.display="initial",n&&(this.innerText=n)):"next"==t?"none"!=this.nextElementSibling.style.display?(this.nextElementSibling.style.transition="all 0.35s",this.nextElementSibling.style.display="none",i&&(this.innerText=i)):(this.nextElementSibling.style.transition="all 0.35s",this.nextElementSibling.style.display="initial",n&&(this.innerText=n)):document.getElementById(t)?"none"!=document.getElementById(t).style.display?(document.getElementById(t).style.transition="all 0.35s",document.getElementById(t).style.display="none",i&&(this.innerText=i)):(document.getElementById(t).style.transition="all 0.35s",document.getElementById(t).style.display="initial",n&&(this.innerText=n)):console.warn("Something Wrong with arguments you provided, unable to appy style/css on "+e.type)}};const l={callbacks:{}};l.core=a,l.init=i,l.toString=function(){return"Object $impleEvent"},l.addEventListener=function(e,t,n,i){e.addEventListener(t,n,i)},l.asHTML=function(e){var t=this.createElement("div");return t.innerHTML=e,this.render.cloneElement(t).firstElementChild},l.html=function(e){return this.asHTML(e)},l.createElement=function(e,t){var n=document.createElement(e);for(var i in t)"text"==i?n.innerText=t[i]:n.setAttribute(i,t[i]);return n},l.notify=function(e){},l.alert=function(){},l.error=function(e,t){return l.manageReturns(e,t)},l.getData=function(e,t){var n={},i=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(i){var r=e.hasAttribute("value")?e.getAttribute("value"):e.value;if((""===r||r)&&e.hasAttribute("data-filter")){var a=e.getAttribute("data-filter");if($impleEvent.core.hasOwnProperty(a)?r=$impleEvent.core[a].call(e,r):$impleEvent.callbacks.hasOwnProperty(a)?r=$impleEvent.callbacks[a].call(e,r):console.error("Unable to apply filter"+a+": Missing filter method"),!r)return console.error("Error in data-filter:Must return value with valid data type; check return from '"+a+"' method"),!1}if(1==t)return[i,r];if(e.getAttribute("data-validate")){var l=e.getAttribute("data-validate");$impleEvent.callbacks.hasOwnProperty(l)?$impleEvent.callbacks[l].call(e,i,r)||(n.hasError=!0):console.log("Error in data-validate; unable to find callback :"+l)}n[i]=r}return e.childElementCount&&Array.prototype.forEach.call(e.querySelectorAll("["+$impleEvent.init.$dataGet+"], [name]"),function(e){var t=e.hasAttribute("name")?e.getAttribute("name"):e.getAttribute($impleEvent.init.$dataGet);if(t){var i=e.hasAttribute("value")?e.getAttribute("value"):e.value;if((""===i||i)&&e.hasAttribute("data-filter")){var r=e.getAttribute("data-filter");if($impleEvent.core.hasOwnProperty(r)?i=$impleEvent.core[r].call(e,i):$impleEvent.callbacks.hasOwnProperty(r)?i=$impleEvent.callbacks[r].call(e,i):console.error("Unable to apply filter"+r+": Missing filter method"),!i)return console.error("Error in data-filter:Must return value with valid data type; check return from '"+r+"' method"),!1}if(e.getAttribute("data-validate")){var a=e.getAttribute("data-validate");if($impleEvent.callbacks.hasOwnProperty(a)){var l=$impleEvent.callbacks[a].call(e,t,i);Array.isArray(l)&&(n.validate=[]),!1===l&&(n.hasError=!0)}else console.error("Error in data-validate; unable to find callback :"+a)}n[t]=i}}),n},l.validate=function(e,t,n){var i=e.getAttribute("data-validate");if(l.callbacks[i])return l.callbacks[i](e,t,n)},l.initiate=null,l.add=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)"[object Function]"===Object.prototype.toString.call(e[n])?this.callbacks[n]=e[n]:console.error("Please provide valid callback function for :"+n);else"[object String]"===Object.prototype.toString.call(e)&&"[object Function]"===Object.prototype.toString.call(t)?this.callbacks[e]=t:console.error("Invalid argument supplied to add("+e+", "+t+") : Supply method name and callback");return this.initiate||(this.launch(),this.initiate=!0),this},l.register=function(e,t){return this.add(e,t)},l.update=function(e){this.launch(e)},l.config=function(e,t){if("[object Object]"===Object.prototype.toString.call(e))for(var n in e)this.init.hasOwnProperty(n)?this.init[n]=e[n]:console.error("Unvalid Config Property :"+n);else this.init.hasOwnProperty(e)?this.init[e]=t:console.error("Unvalid Config Property :"+e);return this},l.launch=function(e){for(var t=(e||this.init.$root).querySelectorAll("[event]"),n=0;n<t.length;n++){var i=t[n].getAttribute("event").trim().split(/\s+/);if(!i.length)return!1;this.eventManager(t[n],i)}},l.eventManager=function(e,t){for(var n=0;n<t.length;n++){if(!t[n].trim())return!1;!function(){var i=t[n].split($impleEvent.init.$seperator);if((i=t[n].split($impleEvent.init.$seperator)).length<2)return console.warn("Insufficient Agruments: Must provided atleast eventname and callback  or event attribute format is not understood:used seperator is "+$impleEvent.init.$seperator),!1;var r=null;if("call"==i[0]&&window.addEventListener("load",function(t){if($impleEvent.core.hasOwnProperty(i[1]))r=$impleEvent.core[i[1]];else{if(!$impleEvent.callbacks.hasOwnProperty(i[1]))return console.error("Can't Found Method:"+i[1]+" ,Please Register event handler using '$impleEvent.add()' method?"),!1;r=$impleEvent.callbacks[i[1]]}var n=i.slice(2);n.unshift(t);var a=r.apply(e,n);if(a){if(e.hasAttribute("data-filter")){var l=e.getAttribute("data-filter");if($impleEvent.core.hasOwnProperty(l)?a=$impleEvent.core[l].call(e,a):$impleEvent.callbacks.hasOwnProperty(l)?a=$impleEvent.callbacks[l].call(e,a):console.error("Unable to apply filter"+l+": Missing filter method"),!a)return console.error("Error in data-filter:Must return value with valid data type; check return from '"+l+"' method"),!1}$impleEvent.manageReturns(e.parentNode,a)}if(e.hasAttribute("data-set")){var o=$impleEvent.getData(e,!0);Array.isArray(o)&&Array.prototype.forEach.call(document.querySelectorAll(e.getAttribute("data-set")),function(e){e.setAttribute("data-get",o[0]),e.setAttribute("value",o[1])})}}),i[0].match(/timeout|interval/)){if(!(i.length>=3&&isFinite(i[2])))return console.error("please Provide Time in ms; for interval/timeout event"),!1;if("interval"==i[0])var a=setInterval(function(){if($impleEvent.core.hasOwnProperty(i[1]))r=$impleEvent.core[i[1]];else{if(!$impleEvent.callbacks.hasOwnProperty(i[1]))return console.error("Can't Found Method:"+i[1]+" ,Please Register event handler using '$impleEvent.add()' method?"),clearInterval(a),!1;r=$impleEvent.callbacks[i[1]]}var t=i.slice(2);t.unshift(a);var n=r.apply(e,t);if(n){if(e.hasAttribute("data-filter")){var l=e.getAttribute("data-filter");if($impleEvent.core.hasOwnProperty(l)?n=$impleEvent.core[l].call(e,n):$impleEvent.callbacks.hasOwnProperty(l)?n=$impleEvent.callbacks[l].call(e,n):console.error("Unable to apply filter"+l+": Missing filter method"),!n)return console.error("Error in data-filter:Must return value with valid data type; check return from '"+l+"' method"),!1}$impleEvent.manageReturns(e.parentNode,n)}if(e.hasAttribute("data-set")){var o=$impleEvent.getData(e,!0);Array.isArray(o)&&Array.prototype.forEach.call(document.querySelectorAll(e.getAttribute("data-set")),function(e){e.setAttribute("data-get",o[0]),e.setAttribute("value",o[1])})}},i[2]);else var l=setTimeout(function(){if($impleEvent.core.hasOwnProperty(i[1]))r=$impleEvent.core[i[1]];else{if(!$impleEvent.callbacks.hasOwnProperty(i[1]))return console.error("Can't Found Method:"+i[1]+" ,Please Register event handler using '$impleEvent.add()' method?"),clearTimeout(a),!1;r=$impleEvent.callbacks[i[1]]}var t=i.slice(2);t.unshift(l);var n=r.apply(e,t);if(n||""==n){if(e.hasAttribute("data-filter")){var o=e.getAttribute("data-filter");if($impleEvent.core.hasOwnProperty(o)?n=$impleEvent.core[o].call(e,n):$impleEvent.callbacks.hasOwnProperty(o)?n=$impleEvent.callbacks[o].call(e,n):console.error("Unable to apply filter"+o+": Missing filter method"),!n||""==n)return console.error("Error in data-filter:Must return value with valid data type; check return from '"+o+"' method"),!1}$impleEvent.manageReturns(e.parentNode,n)}if(e.hasAttribute("data-set")){var s=$impleEvent.getData(e,!0);Array.isArray(s)&&Array.prototype.forEach.call(document.querySelectorAll(e.getAttribute("data-set")),function(e){e.setAttribute("data-get",s[0]),e.setAttribute("value",s[1])})}},i[2])}else e.addEventListener(i[0],function t(n){if(n.removeEventListener=function(){e.removeEventListener(this.type,t)},$impleEvent.core.hasOwnProperty(i[1]))r=$impleEvent.core[i[1]];else{if(!$impleEvent.callbacks.hasOwnProperty(i[1]))return console.error("Can't Found Method:"+i[1]+" ,Please Register event handler using '$impleEvent.add()' method?"),n.removeEventListener(),!1;r=$impleEvent.callbacks[i[1]]}var a=i.map(function(t){return t.match(/^\$[a-zA-Z0-9]+/)?e.getAttribute($impleEvent.init.$dataGet)===t.replace(/^\$/,"")?e.value?e.value:e.getAttribute("value"):e.getAttribute("name")===t.replace(/^\$/,"")?e.value?e.value:e.getAttribute("value"):e.getAttribute(t.replace(/^\$/,""))?e.getAttribute(t.replace(/^\$/,"")):t:t}).slice(2),l=a.indexOf("$value");-1!==l&&(a[l]=e.value),a.unshift(n);var o=r.apply(this,a);if(!1===o||!0===o)return o;if(o){if(e.hasAttribute("data-filter")){var s=e.getAttribute("data-filter");if($impleEvent.core.hasOwnProperty(s)?o=$impleEvent.core[s].call(e,o):$impleEvent.callbacks.hasOwnProperty(s)?o=$impleEvent.callbacks[s].call(e,o):console.error("Unable to apply filter"+s+": Missing filter method"),!o)return console.error("Error in data-filter:Must return value with valid data type; check return from '"+s+"' method"),!1}$impleEvent.manageReturns(e.parentNode,o)}if(e.hasAttribute("data-set")){var d=$impleEvent.getData(e,!0);Array.isArray(d)&&Array.prototype.forEach.call(document.querySelectorAll(e.getAttribute("data-set")),function(e){e.setAttribute("data-get",d[0]),e.setAttribute("value",d[1])})}},!1)}()}},l.manageReturns=function(e,t){if("string"==typeof t||"number"==typeof t||t.nodeName)return Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed))return!1;t.nodeName?(e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild($impleEvent.render.cloneElement(t)):(e.innerHTML="",e.appendChild($impleEvent.render.cloneElement(t))),$impleEvent.update(e)):e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(t)):(e.innerHTML="",e.appendChild(document.createTextNode(t)))}),!0;if("[object Object]"===Object.prototype.toString.call(t)&&(t.hasOwnProperty("global")&&t.global&&$impleEvent.manageReturns($impleEvent.init.$global,t.global),t.hasOwnProperty("grandParent")&&t.grandParent&&$impleEvent.manageReturns(e.parentNode.parentNode,t.grandParent),t.hasOwnProperty("parent")&&t.parent&&$impleEvent.manageReturns(e.parentNode,t.parent),t.hasOwnProperty("self")&&t.self&&$impleEvent.manageReturns(e,t.self),Array.prototype.forEach.call(e.querySelectorAll($impleEvent.init.$className),function(e){if(e.hasAttribute($impleEvent.init.$dataFeed)){var n=e.getAttribute($impleEvent.init.$dataFeed).trim();if(n){var i=null,r=n.split(".");if(!t.hasOwnProperty(r[0]))return!1;if(r.length)if(1==r.length)i=t[n];else if(r.length>1){for(var a=t,l=0;l<r.length;l++){if(!a[r[l]]){console.error("Cannot find:"+n+" in  the return "+JSON.stringify(t));break}a=a[r[l]]}i=a}i&&("string"==typeof i||"number"==typeof i||i.nodeName?i.nodeName?(e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild($impleEvent.render.cloneElement(i)):(e.innerHTML="",e.appendChild($impleEvent.render.cloneElement(i))),$impleEvent.update(e)):e.hasAttribute($impleEvent.init.$dataAppend)?e.appendChild(document.createTextNode(i)):(e.innerHTML="",e.appendChild(document.createTextNode(i))):(console.error("Only String , Number and Html Element  can be embeded; Cannot embed "+i+"for "+n+"in : "+e.nodeName.toLowerCase()+" Html Element"),console.log(e)))}else console.warn("Make sure you have :"+$impleEvent.init.$dataFeed+" attribute to handle given return"+t)}}),t.hasOwnProperty("returnTo")&&t.returnTo&&(t.returnTo[$impleEvent.init.$returnTo]&&t.returnTo[$impleEvent.init.$returnTo].nodeName?$impleEvent.manageReturns(t.returnTo[$impleEvent.init.$returnTo],t.returnTo.data):console.error("returnTo, Element not found:Please give returnTo."+$impleEvent.init.$returnTo+" a valid html element"))),"[object Array]"===Object.prototype.toString.call(t))if(e.querySelector("["+$impleEvent.init.$dataComponent+"]")){let r=e.querySelector("["+$impleEvent.init.$dataComponent+"]"),a=document.querySelector(r.getAttribute("data-component"));if(a.nodeName){r.hasAttribute($impleEvent.init.$dataAppend)||(r.innerHTML="");for(var n=0;n<t.length;n++){var i=$impleEvent.render.cloneElement(a);if(r.appendChild(i),i.childElementCount)$impleEvent.manageReturns(i,t[n]);else if("string"==typeof t[n]||"number"==typeof t[n]||t[n].nodeName){if(i.hasAttribute($impleEvent.init.$dataFeed))return!1;t[n].nodeName?i.hasAttribute($impleEvent.init.$dataAppend)?i.appendChild($impleEvent.render.cloneElement(t[n])):(i.innerHTML="",i.appendChild($impleEvent.render.cloneElement(t[n]))):i.hasAttribute($impleEvent.init.$dataAppend)?i.appendChild(document.createTextNode(t[n])):(i.innerHTML="",i.appendChild(document.createTextNode(t[n])))}$impleEvent.update(r)}}else console.log("Unable to find Element for Templating from querySelctor:"+r.getAttribute("data-component"))}else console.error("Array returns need [data-component] holder: No such holder found ")},l.render=r,window.$impleEvent?"Object $impleEvent"===window.$impleEvent.toString()?console.warn("Duplicate $impleEvent libaray Found! Make sure you are not importing $impleEvent more than one time. "):console.error("$impleEvent name is already used, Please Dont assign '$impleEvent' to any varibale, function or objects. Please free ' $impleEvent' namespace from global scope."):window.$impleEvent=l}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,